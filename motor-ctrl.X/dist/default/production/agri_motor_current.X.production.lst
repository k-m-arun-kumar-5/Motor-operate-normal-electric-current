

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Mar 16 16:29:25 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 1.44
    47                           ; Generated 14/09/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F887 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0088                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  008F                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  0105                     	;# 
   144  0107                     	;# 
   145  0108                     	;# 
   146  0109                     	;# 
   147  010C                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0185                     	;# 
   153  0187                     	;# 
   154  0188                     	;# 
   155  0189                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  000E                     	;# 
   174  000F                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  001D                     	;# 
   191  001E                     	;# 
   192  001F                     	;# 
   193  0081                     	;# 
   194  0085                     	;# 
   195  0086                     	;# 
   196  0087                     	;# 
   197  0088                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009A                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  009F                     	;# 
   221  0105                     	;# 
   222  0107                     	;# 
   223  0108                     	;# 
   224  0109                     	;# 
   225  010C                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  0185                     	;# 
   231  0187                     	;# 
   232  0188                     	;# 
   233  0189                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000D                     	;# 
   250  000E                     	;# 
   251  000E                     	;# 
   252  000F                     	;# 
   253  0010                     	;# 
   254  0011                     	;# 
   255  0012                     	;# 
   256  0013                     	;# 
   257  0014                     	;# 
   258  0015                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0017                     	;# 
   262  0018                     	;# 
   263  0019                     	;# 
   264  001A                     	;# 
   265  001B                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001D                     	;# 
   269  001E                     	;# 
   270  001F                     	;# 
   271  0081                     	;# 
   272  0085                     	;# 
   273  0086                     	;# 
   274  0087                     	;# 
   275  0088                     	;# 
   276  0089                     	;# 
   277  008C                     	;# 
   278  008D                     	;# 
   279  008E                     	;# 
   280  008F                     	;# 
   281  0090                     	;# 
   282  0091                     	;# 
   283  0092                     	;# 
   284  0093                     	;# 
   285  0093                     	;# 
   286  0093                     	;# 
   287  0094                     	;# 
   288  0095                     	;# 
   289  0096                     	;# 
   290  0097                     	;# 
   291  0098                     	;# 
   292  0099                     	;# 
   293  009A                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  009F                     	;# 
   299  0105                     	;# 
   300  0107                     	;# 
   301  0108                     	;# 
   302  0109                     	;# 
   303  010C                     	;# 
   304  010C                     	;# 
   305  010D                     	;# 
   306  010E                     	;# 
   307  010F                     	;# 
   308  0185                     	;# 
   309  0187                     	;# 
   310  0188                     	;# 
   311  0189                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  0000                     	;# 
   315  0001                     	;# 
   316  0002                     	;# 
   317  0003                     	;# 
   318  0004                     	;# 
   319  0005                     	;# 
   320  0006                     	;# 
   321  0007                     	;# 
   322  0008                     	;# 
   323  0009                     	;# 
   324  000A                     	;# 
   325  000B                     	;# 
   326  000C                     	;# 
   327  000D                     	;# 
   328  000E                     	;# 
   329  000E                     	;# 
   330  000F                     	;# 
   331  0010                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0013                     	;# 
   335  0014                     	;# 
   336  0015                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0017                     	;# 
   340  0018                     	;# 
   341  0019                     	;# 
   342  001A                     	;# 
   343  001B                     	;# 
   344  001B                     	;# 
   345  001C                     	;# 
   346  001D                     	;# 
   347  001E                     	;# 
   348  001F                     	;# 
   349  0081                     	;# 
   350  0085                     	;# 
   351  0086                     	;# 
   352  0087                     	;# 
   353  0088                     	;# 
   354  0089                     	;# 
   355  008C                     	;# 
   356  008D                     	;# 
   357  008E                     	;# 
   358  008F                     	;# 
   359  0090                     	;# 
   360  0091                     	;# 
   361  0092                     	;# 
   362  0093                     	;# 
   363  0093                     	;# 
   364  0093                     	;# 
   365  0094                     	;# 
   366  0095                     	;# 
   367  0096                     	;# 
   368  0097                     	;# 
   369  0098                     	;# 
   370  0099                     	;# 
   371  009A                     	;# 
   372  009B                     	;# 
   373  009C                     	;# 
   374  009D                     	;# 
   375  009E                     	;# 
   376  009F                     	;# 
   377  0105                     	;# 
   378  0107                     	;# 
   379  0108                     	;# 
   380  0109                     	;# 
   381  010C                     	;# 
   382  010C                     	;# 
   383  010D                     	;# 
   384  010E                     	;# 
   385  010F                     	;# 
   386  0185                     	;# 
   387  0187                     	;# 
   388  0188                     	;# 
   389  0189                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  0000                     	;# 
   393  0001                     	;# 
   394  0002                     	;# 
   395  0003                     	;# 
   396  0004                     	;# 
   397  0005                     	;# 
   398  0006                     	;# 
   399  0007                     	;# 
   400  0008                     	;# 
   401  0009                     	;# 
   402  000A                     	;# 
   403  000B                     	;# 
   404  000C                     	;# 
   405  000D                     	;# 
   406  000E                     	;# 
   407  000E                     	;# 
   408  000F                     	;# 
   409  0010                     	;# 
   410  0011                     	;# 
   411  0012                     	;# 
   412  0013                     	;# 
   413  0014                     	;# 
   414  0015                     	;# 
   415  0015                     	;# 
   416  0016                     	;# 
   417  0017                     	;# 
   418  0018                     	;# 
   419  0019                     	;# 
   420  001A                     	;# 
   421  001B                     	;# 
   422  001B                     	;# 
   423  001C                     	;# 
   424  001D                     	;# 
   425  001E                     	;# 
   426  001F                     	;# 
   427  0081                     	;# 
   428  0085                     	;# 
   429  0086                     	;# 
   430  0087                     	;# 
   431  0088                     	;# 
   432  0089                     	;# 
   433  008C                     	;# 
   434  008D                     	;# 
   435  008E                     	;# 
   436  008F                     	;# 
   437  0090                     	;# 
   438  0091                     	;# 
   439  0092                     	;# 
   440  0093                     	;# 
   441  0093                     	;# 
   442  0093                     	;# 
   443  0094                     	;# 
   444  0095                     	;# 
   445  0096                     	;# 
   446  0097                     	;# 
   447  0098                     	;# 
   448  0099                     	;# 
   449  009A                     	;# 
   450  009B                     	;# 
   451  009C                     	;# 
   452  009D                     	;# 
   453  009E                     	;# 
   454  009F                     	;# 
   455  0105                     	;# 
   456  0107                     	;# 
   457  0108                     	;# 
   458  0109                     	;# 
   459  010C                     	;# 
   460  010C                     	;# 
   461  010D                     	;# 
   462  010E                     	;# 
   463  010F                     	;# 
   464  0185                     	;# 
   465  0187                     	;# 
   466  0188                     	;# 
   467  0189                     	;# 
   468  018C                     	;# 
   469  018D                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  000E                     	;# 
   486  000F                     	;# 
   487  0010                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0013                     	;# 
   491  0014                     	;# 
   492  0015                     	;# 
   493  0015                     	;# 
   494  0016                     	;# 
   495  0017                     	;# 
   496  0018                     	;# 
   497  0019                     	;# 
   498  001A                     	;# 
   499  001B                     	;# 
   500  001B                     	;# 
   501  001C                     	;# 
   502  001D                     	;# 
   503  001E                     	;# 
   504  001F                     	;# 
   505  0081                     	;# 
   506  0085                     	;# 
   507  0086                     	;# 
   508  0087                     	;# 
   509  0088                     	;# 
   510  0089                     	;# 
   511  008C                     	;# 
   512  008D                     	;# 
   513  008E                     	;# 
   514  008F                     	;# 
   515  0090                     	;# 
   516  0091                     	;# 
   517  0092                     	;# 
   518  0093                     	;# 
   519  0093                     	;# 
   520  0093                     	;# 
   521  0094                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0098                     	;# 
   526  0099                     	;# 
   527  009A                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  009F                     	;# 
   533  0105                     	;# 
   534  0107                     	;# 
   535  0108                     	;# 
   536  0109                     	;# 
   537  010C                     	;# 
   538  010C                     	;# 
   539  010D                     	;# 
   540  010E                     	;# 
   541  010F                     	;# 
   542  0185                     	;# 
   543  0187                     	;# 
   544  0188                     	;# 
   545  0189                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  0000                     	;# 
   549  0001                     	;# 
   550  0002                     	;# 
   551  0003                     	;# 
   552  0004                     	;# 
   553  0005                     	;# 
   554  0006                     	;# 
   555  0007                     	;# 
   556  0008                     	;# 
   557  0009                     	;# 
   558  000A                     	;# 
   559  000B                     	;# 
   560  000C                     	;# 
   561  000D                     	;# 
   562  000E                     	;# 
   563  000E                     	;# 
   564  000F                     	;# 
   565  0010                     	;# 
   566  0011                     	;# 
   567  0012                     	;# 
   568  0013                     	;# 
   569  0014                     	;# 
   570  0015                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0017                     	;# 
   574  0018                     	;# 
   575  0019                     	;# 
   576  001A                     	;# 
   577  001B                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  001D                     	;# 
   581  001E                     	;# 
   582  001F                     	;# 
   583  0081                     	;# 
   584  0085                     	;# 
   585  0086                     	;# 
   586  0087                     	;# 
   587  0088                     	;# 
   588  0089                     	;# 
   589  008C                     	;# 
   590  008D                     	;# 
   591  008E                     	;# 
   592  008F                     	;# 
   593  0090                     	;# 
   594  0091                     	;# 
   595  0092                     	;# 
   596  0093                     	;# 
   597  0093                     	;# 
   598  0093                     	;# 
   599  0094                     	;# 
   600  0095                     	;# 
   601  0096                     	;# 
   602  0097                     	;# 
   603  0098                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009C                     	;# 
   608  009D                     	;# 
   609  009E                     	;# 
   610  009F                     	;# 
   611  0105                     	;# 
   612  0107                     	;# 
   613  0108                     	;# 
   614  0109                     	;# 
   615  010C                     	;# 
   616  010C                     	;# 
   617  010D                     	;# 
   618  010E                     	;# 
   619  010F                     	;# 
   620  0185                     	;# 
   621  0187                     	;# 
   622  0188                     	;# 
   623  0189                     	;# 
   624  018C                     	;# 
   625  018D                     	;# 
   626                           
   627                           	psect	idataCOMMON
   628  08FE                     __pidataCOMMON:	
   629                           
   630                           ;initializer for _timer1_prescale
   631  08FE  3401               	retlw	1
   632  08FF  3400               	retlw	0
   633                           
   634                           ;initializer for _cur_disp_lcd_loc
   635  0900  3480               	retlw	128
   636  0901  3400               	retlw	0
   637                           
   638                           ;initializer for _lcd_avail_loc_within_limit
   639  0902  3479               	retlw	121
   640                           
   641                           	psect	idataBANK1
   642  08FA                     __pidataBANK1:	
   643                           
   644                           ;initializer for _timer2_prescale
   645  08FA  3401               	retlw	1
   646  08FB  3400               	retlw	0
   647                           
   648                           ;initializer for _cur_input_lcd_loc
   649  08FC  34C0               	retlw	192
   650  08FD  3400               	retlw	0
   651                           
   652                           	psect	idataBANK2
   653  07C0                     __pidataBANK2:	
   654                           
   655                           ;initializer for UART_Transmit_Num@F1845
   656  07C0  3430               	retlw	48
   657  07C1  3431               	retlw	49
   658  07C2  3432               	retlw	50
   659  07C3  3433               	retlw	51
   660  07C4  3434               	retlw	52
   661  07C5  3435               	retlw	53
   662  07C6  3436               	retlw	54
   663  07C7  3437               	retlw	55
   664  07C8  3438               	retlw	56
   665  07C9  3439               	retlw	57
   666  07CA  3441               	retlw	65
   667  07CB  3442               	retlw	66
   668  07CC  3443               	retlw	67
   669  07CD  3444               	retlw	68
   670  07CE  3445               	retlw	69
   671  07CF  3446               	retlw	70
   672                           
   673                           ;initializer for LCD_Disp_Num@F1881
   674  07D0  3430               	retlw	48
   675  07D1  3431               	retlw	49
   676  07D2  3432               	retlw	50
   677  07D3  3433               	retlw	51
   678  07D4  3434               	retlw	52
   679  07D5  3435               	retlw	53
   680  07D6  3436               	retlw	54
   681  07D7  3437               	retlw	55
   682  07D8  3438               	retlw	56
   683  07D9  3439               	retlw	57
   684  07DA  3441               	retlw	65
   685  07DB  3442               	retlw	66
   686  07DC  3443               	retlw	67
   687  07DD  3444               	retlw	68
   688  07DE  3445               	retlw	69
   689  07DF  3446               	retlw	70
   690                           
   691                           ;initializer for UART_Transmit_Num@F1843
   692  07E0  3430               	retlw	48
   693  07E1  3431               	retlw	49
   694  07E2  3432               	retlw	50
   695  07E3  3433               	retlw	51
   696  07E4  3434               	retlw	52
   697  07E5  3435               	retlw	53
   698  07E6  3436               	retlw	54
   699  07E7  3437               	retlw	55
   700  07E8  3438               	retlw	56
   701  07E9  3439               	retlw	57
   702                           
   703                           ;initializer for LCD_Disp_Num@F1879
   704  07EA  3430               	retlw	48
   705  07EB  3431               	retlw	49
   706  07EC  3432               	retlw	50
   707  07ED  3433               	retlw	51
   708  07EE  3434               	retlw	52
   709  07EF  3435               	retlw	53
   710  07F0  3436               	retlw	54
   711  07F1  3437               	retlw	55
   712  07F2  3438               	retlw	56
   713  07F3  3439               	retlw	57
   714                           
   715                           	psect	stringtext
   716  1000                     __pstringtext:	
   717  1000                     stringtab:	
   718  1000                     __stringtab:	
   719                           
   720                           ;	String table - string pointers are 2 bytes each
   721  1000  1BFF               	btfsc	btemp+1,7
   722  1001  280A               	ljmp	stringcode
   723  1002  1383               	bcf	3,7
   724  1003  187F               	btfsc	btemp+1,0
   725  1004  1783               	bsf	3,7
   726  1005  0800               	movf	0,w
   727  1006  0A84               	incf	4,f
   728  1007  1903               	skipnz
   729  1008  0AFF               	incf	btemp+1,f
   730  1009  0008               	return
   731  100A                     stringcode:	
   732  100A  087F               	movf	btemp+1,w
   733  100B  397F               	andlw	127
   734  100C  008A               	movwf	10
   735  100D  0804               	movf	4,w
   736  100E  0A84               	incf	4,f
   737  100F  1903               	skipnz
   738  1010  0AFF               	incf	btemp+1,f
   739  1011  0082               	movwf	2
   740  1012                     __stringbase:	
   741  1012                     __end_of__stringtab:	
   742  1012                     UART_Receive_Char@overrun_error_msg_disp:	
   743  1012  344F               	retlw	79
   744  1013  3445               	retlw	69
   745  1014  3452               	retlw	82
   746  1015  3452               	retlw	82
   747  1016  3400               	retlw	0
   748  1017                     __end_ofUART_Receive_Char@overrun_error_msg_disp:	
   749  1017                     UART_Receive_Char@framing_error_msg_disp:	
   750  1017  3446               	retlw	70
   751  1018  3445               	retlw	69
   752  1019  3452               	retlw	82
   753  101A  3452               	retlw	82
   754  101B  3400               	retlw	0
   755  101C                     __end_ofUART_Receive_Char@framing_error_msg_disp:	
   756  000E                     _TMR1	set	14
   757  0012                     _T2CONbits	set	18
   758  0012                     _T2CON	set	18
   759  0011                     _TMR2	set	17
   760  0010                     _T1CONbits	set	16
   761  0010                     _T1CON	set	16
   762  000E                     _TMR1L	set	14
   763  000F                     _TMR1H	set	15
   764  001A                     _RCREG	set	26
   765  0019                     _TXREG	set	25
   766  0008                     _PORTD	set	8
   767  001E                     _ADRESH	set	30
   768  000B                     _INTCONbits	set	11
   769  001F                     _ADCON0bits	set	31
   770  001F                     _ADCON0	set	31
   771  0090                     _T2CKPS0	set	144
   772  0091                     _T2CKPS1	set	145
   773  0061                     _TMR2IF	set	97
   774  0085                     _T1CKPS1	set	133
   775  0084                     _T1CKPS0	set	132
   776  0060                     _TMR1IF	set	96
   777  0059                     _INTF	set	89
   778  005C                     _INTE	set	92
   779  00C2                     _FERR	set	194
   780  0065                     _RCIF	set	101
   781  00C1                     _OERR	set	193
   782  00C6                     _RX9	set	198
   783  00C5                     _SREN	set	197
   784  00C4                     _CREN	set	196
   785  00C7                     _SPEN	set	199
   786  0031                     _RB1	set	49
   787  0033                     _RB3	set	51
   788  0032                     _RB2	set	50
   789  004A                     _RE2	set	74
   790  0048                     _RE0	set	72
   791  0049                     _RE1	set	73
   792  00F9                     _GO	set	249
   793  0066                     _ADIF	set	102
   794  0099                     _SPBRG	set	153
   795  0086                     _TRISBbits	set	134
   796  0088                     _TRISD	set	136
   797  0088                     _TRISDbits	set	136
   798  0089                     _TRISEbits	set	137
   799  009E                     _ADRESL	set	158
   800  008C                     _PIE1bits	set	140
   801  009F                     _ADCON1	set	159
   802  04C1                     _TRMT	set	1217
   803  04C6                     _TX9	set	1222
   804  0465                     _RCIE	set	1125
   805  0464                     _TXIE	set	1124
   806  04C5                     _TXEN	set	1221
   807  04C4                     _SYNC	set	1220
   808  04C2                     _BRGH	set	1218
   809  04FF                     _ADFM	set	1279
   810  0189                     _ANSELH	set	393
   811  0188                     _ANSEL	set	392
   812  0C3B                     _BRG16	set	3131
   813  101C                     STR_11:	
   814  101C  3445               	retlw	69	;'E'
   815  101D  3452               	retlw	82	;'R'
   816  101E  3452               	retlw	82	;'R'
   817  101F  343A               	retlw	58	;':'
   818  1020  3420               	retlw	32	;' '
   819  1021  3474               	retlw	116	;'t'
   820  1022  346D               	retlw	109	;'m'
   821  1023  3472               	retlw	114	;'r'
   822  1024  3431               	retlw	49	;'1'
   823  1025  3420               	retlw	32	;' '
   824  1026  3469               	retlw	105	;'i'
   825  1027  3473               	retlw	115	;'s'
   826  1028  3420               	retlw	32	;' '
   827  1029  3463               	retlw	99	;'c'
   828  102A  346F               	retlw	111	;'o'
   829  102B  3475               	retlw	117	;'u'
   830  102C  346E               	retlw	110	;'n'
   831  102D  3474               	retlw	116	;'t'
   832  102E  3465               	retlw	101	;'e'
   833  102F  3472               	retlw	114	;'r'
   834  1030  3420               	retlw	32	;' '
   835  1031  3462               	retlw	98	;'b'
   836  1032  3475               	retlw	117	;'u'
   837  1033  3474               	retlw	116	;'t'
   838  1034  3420               	retlw	32	;' '
   839  1035  3463               	retlw	99	;'c'
   840  1036  346C               	retlw	108	;'l'
   841  1037  346B               	retlw	107	;'k'
   842  1038  3420               	retlw	32	;' '
   843  1039  3473               	retlw	115	;'s'
   844  103A  346F               	retlw	111	;'o'
   845  103B  3475               	retlw	117	;'u'
   846  103C  3472               	retlw	114	;'r'
   847  103D  3463               	retlw	99	;'c'
   848  103E  3465               	retlw	101	;'e'
   849  103F  3420               	retlw	32	;' '
   850  1040  3469               	retlw	105	;'i'
   851  1041  3473               	retlw	115	;'s'
   852  1042  3420               	retlw	32	;' '
   853  1043  346E               	retlw	110	;'n'
   854  1044  346F               	retlw	111	;'o'
   855  1045  3474               	retlw	116	;'t'
   856  1046  3420               	retlw	32	;' '
   857  1047  3465               	retlw	101	;'e'
   858  1048  3478               	retlw	120	;'x'
   859  1049  3474               	retlw	116	;'t'
   860  104A  3465               	retlw	101	;'e'
   861  104B  3472               	retlw	114	;'r'
   862  104C  346E               	retlw	110	;'n'
   863  104D  3461               	retlw	97	;'a'
   864  104E  346C               	retlw	108	;'l'
   865  104F  3420               	retlw	32	;' '
   866  1050  340D               	retlw	13
   867  1051  3400               	retlw	0
   868  1052                     STR_9:	
   869  1052  3445               	retlw	69	;'E'
   870  1053  3452               	retlw	82	;'R'
   871  1054  3452               	retlw	82	;'R'
   872  1055  343A               	retlw	58	;':'
   873  1056  3420               	retlw	32	;' '
   874  1057  3474               	retlw	116	;'t'
   875  1058  346D               	retlw	109	;'m'
   876  1059  3472               	retlw	114	;'r'
   877  105A  3431               	retlw	49	;'1'
   878  105B  3420               	retlw	32	;' '
   879  105C  3469               	retlw	105	;'i'
   880  105D  3473               	retlw	115	;'s'
   881  105E  3420               	retlw	32	;' '
   882  105F  3474               	retlw	116	;'t'
   883  1060  3469               	retlw	105	;'i'
   884  1061  346D               	retlw	109	;'m'
   885  1062  3465               	retlw	101	;'e'
   886  1063  3472               	retlw	114	;'r'
   887  1064  3420               	retlw	32	;' '
   888  1065  3462               	retlw	98	;'b'
   889  1066  3475               	retlw	117	;'u'
   890  1067  3474               	retlw	116	;'t'
   891  1068  3420               	retlw	32	;' '
   892  1069  3463               	retlw	99	;'c'
   893  106A  346C               	retlw	108	;'l'
   894  106B  346B               	retlw	107	;'k'
   895  106C  3420               	retlw	32	;' '
   896  106D  3473               	retlw	115	;'s'
   897  106E  346F               	retlw	111	;'o'
   898  106F  3475               	retlw	117	;'u'
   899  1070  3472               	retlw	114	;'r'
   900  1071  3463               	retlw	99	;'c'
   901  1072  3465               	retlw	101	;'e'
   902  1073  3420               	retlw	32	;' '
   903  1074  3469               	retlw	105	;'i'
   904  1075  3473               	retlw	115	;'s'
   905  1076  3420               	retlw	32	;' '
   906  1077  346E               	retlw	110	;'n'
   907  1078  346F               	retlw	111	;'o'
   908  1079  3474               	retlw	116	;'t'
   909  107A  3420               	retlw	32	;' '
   910  107B  3469               	retlw	105	;'i'
   911  107C  346E               	retlw	110	;'n'
   912  107D  3474               	retlw	116	;'t'
   913  107E  3465               	retlw	101	;'e'
   914  107F  3472               	retlw	114	;'r'
   915  1080  346E               	retlw	110	;'n'
   916  1081  3461               	retlw	97	;'a'
   917  1082  346C               	retlw	108	;'l'
   918  1083  3420               	retlw	32	;' '
   919  1084  340D               	retlw	13
   920  1085  3400               	retlw	0
   921  1086                     STR_3:	
   922  1086  3445               	retlw	69	;'E'
   923  1087  3452               	retlw	82	;'R'
   924  1088  3452               	retlw	82	;'R'
   925  1089  343A               	retlw	58	;':'
   926  108A  3420               	retlw	32	;' '
   927  108B  3474               	retlw	116	;'t'
   928  108C  3472               	retlw	114	;'r'
   929  108D  3479               	retlw	121	;'y'
   930  108E  3420               	retlw	32	;' '
   931  108F  3474               	retlw	116	;'t'
   932  1090  346F               	retlw	111	;'o'
   933  1091  3420               	retlw	32	;' '
   934  1092  3464               	retlw	100	;'d'
   935  1093  3469               	retlw	105	;'i'
   936  1094  3473               	retlw	115	;'s'
   937  1095  3461               	retlw	97	;'a'
   938  1096  3462               	retlw	98	;'b'
   939  1097  346C               	retlw	108	;'l'
   940  1098  3465               	retlw	101	;'e'
   941  1099  3420               	retlw	32	;' '
   942  109A  3441               	retlw	65	;'A'
   943  109B  3444               	retlw	68	;'D'
   944  109C  3443               	retlw	67	;'C'
   945  109D  3420               	retlw	32	;' '
   946  109E  3477               	retlw	119	;'w'
   947  109F  3468               	retlw	104	;'h'
   948  10A0  3469               	retlw	105	;'i'
   949  10A1  346C               	retlw	108	;'l'
   950  10A2  3465               	retlw	101	;'e'
   951  10A3  3420               	retlw	32	;' '
   952  10A4  3441               	retlw	65	;'A'
   953  10A5  3444               	retlw	68	;'D'
   954  10A6  3443               	retlw	67	;'C'
   955  10A7  3420               	retlw	32	;' '
   956  10A8  3443               	retlw	67	;'C'
   957  10A9  346F               	retlw	111	;'o'
   958  10AA  346E               	retlw	110	;'n'
   959  10AB  3476               	retlw	118	;'v'
   960  10AC  3465               	retlw	101	;'e'
   961  10AD  3472               	retlw	114	;'r'
   962  10AE  3474               	retlw	116	;'t'
   963  10AF  3469               	retlw	105	;'i'
   964  10B0  346E               	retlw	110	;'n'
   965  10B1  3467               	retlw	103	;'g'
   966  10B2  3420               	retlw	32	;' '
   967  10B3  340D               	retlw	13
   968  10B4  3400               	retlw	0
   969  10B5                     STR_10:	
   970  10B5  3445               	retlw	69	;'E'
   971  10B6  3452               	retlw	82	;'R'
   972  10B7  3452               	retlw	82	;'R'
   973  10B8  343A               	retlw	58	;':'
   974  10B9  3420               	retlw	32	;' '
   975  10BA  3474               	retlw	116	;'t'
   976  10BB  346D               	retlw	109	;'m'
   977  10BC  3472               	retlw	114	;'r'
   978  10BD  3431               	retlw	49	;'1'
   979  10BE  3420               	retlw	32	;' '
   980  10BF  3469               	retlw	105	;'i'
   981  10C0  3473               	retlw	115	;'s'
   982  10C1  3420               	retlw	32	;' '
   983  10C2  3463               	retlw	99	;'c'
   984  10C3  346F               	retlw	111	;'o'
   985  10C4  3475               	retlw	117	;'u'
   986  10C5  346E               	retlw	110	;'n'
   987  10C6  3474               	retlw	116	;'t'
   988  10C7  3465               	retlw	101	;'e'
   989  10C8  3472               	retlw	114	;'r'
   990  10C9  3420               	retlw	32	;' '
   991  10CA  3462               	retlw	98	;'b'
   992  10CB  3475               	retlw	117	;'u'
   993  10CC  3474               	retlw	116	;'t'
   994  10CD  3420               	retlw	32	;' '
   995  10CE  344C               	retlw	76	;'L'
   996  10CF  3450               	retlw	80	;'P'
   997  10D0  3420               	retlw	32	;' '
   998  10D1  346F               	retlw	111	;'o'
   999  10D2  3473               	retlw	115	;'s'
  1000  10D3  3463               	retlw	99	;'c'
  1001  10D4  3420               	retlw	32	;' '
  1002  10D5  3469               	retlw	105	;'i'
  1003  10D6  3473               	retlw	115	;'s'
  1004  10D7  3420               	retlw	32	;' '
  1005  10D8  3464               	retlw	100	;'d'
  1006  10D9  3469               	retlw	105	;'i'
  1007  10DA  3473               	retlw	115	;'s'
  1008  10DB  3461               	retlw	97	;'a'
  1009  10DC  3462               	retlw	98	;'b'
  1010  10DD  346C               	retlw	108	;'l'
  1011  10DE  3465               	retlw	101	;'e'
  1012  10DF  3464               	retlw	100	;'d'
  1013  10E0  3420               	retlw	32	;' '
  1014  10E1  340D               	retlw	13
  1015  10E2  3400               	retlw	0
  1016  10E3                     STR_2:	
  1017  10E3  3445               	retlw	69	;'E'
  1018  10E4  3452               	retlw	82	;'R'
  1019  10E5  3452               	retlw	82	;'R'
  1020  10E6  343A               	retlw	58	;':'
  1021  10E7  3420               	retlw	32	;' '
  1022  10E8  3474               	retlw	116	;'t'
  1023  10E9  3472               	retlw	114	;'r'
  1024  10EA  3479               	retlw	121	;'y'
  1025  10EB  3420               	retlw	32	;' '
  1026  10EC  3474               	retlw	116	;'t'
  1027  10ED  346F               	retlw	111	;'o'
  1028  10EE  3420               	retlw	32	;' '
  1029  10EF  3473               	retlw	115	;'s'
  1030  10F0  3474               	retlw	116	;'t'
  1031  10F1  3461               	retlw	97	;'a'
  1032  10F2  3472               	retlw	114	;'r'
  1033  10F3  3474               	retlw	116	;'t'
  1034  10F4  3420               	retlw	32	;' '
  1035  10F5  3441               	retlw	65	;'A'
  1036  10F6  3444               	retlw	68	;'D'
  1037  10F7  3443               	retlw	67	;'C'
  1038  10F8  3420               	retlw	32	;' '
  1039  10F9  3477               	retlw	119	;'w'
  1040  10FA  3468               	retlw	104	;'h'
  1041  10FB  3469               	retlw	105	;'i'
  1042  10FC  346C               	retlw	108	;'l'
  1043  10FD  3465               	retlw	101	;'e'
  1044  10FE  3420               	retlw	32	;' '
  1045  10FF  3441               	retlw	65	;'A'
  1046  1100  3444               	retlw	68	;'D'
  1047  1101  3443               	retlw	67	;'C'
  1048  1102  3420               	retlw	32	;' '
  1049  1103  3443               	retlw	67	;'C'
  1050  1104  346F               	retlw	111	;'o'
  1051  1105  346E               	retlw	110	;'n'
  1052  1106  3476               	retlw	118	;'v'
  1053  1107  3465               	retlw	101	;'e'
  1054  1108  3472               	retlw	114	;'r'
  1055  1109  3474               	retlw	116	;'t'
  1056  110A  3469               	retlw	105	;'i'
  1057  110B  346E               	retlw	110	;'n'
  1058  110C  3467               	retlw	103	;'g'
  1059  110D  3420               	retlw	32	;' '
  1060  110E  340D               	retlw	13
  1061  110F  3400               	retlw	0
  1062  1110                     STR_1:	
  1063  1110  3445               	retlw	69	;'E'
  1064  1111  3452               	retlw	82	;'R'
  1065  1112  3452               	retlw	82	;'R'
  1066  1113  343A               	retlw	58	;':'
  1067  1114  3420               	retlw	32	;' '
  1068  1115  3469               	retlw	105	;'i'
  1069  1116  346E               	retlw	110	;'n'
  1070  1117  3476               	retlw	118	;'v'
  1071  1118  3461               	retlw	97	;'a'
  1072  1119  346C               	retlw	108	;'l'
  1073  111A  3469               	retlw	105	;'i'
  1074  111B  3464               	retlw	100	;'d'
  1075  111C  3420               	retlw	32	;' '
  1076  111D  3441               	retlw	65	;'A'
  1077  111E  3444               	retlw	68	;'D'
  1078  111F  3443               	retlw	67	;'C'
  1079  1120  3420               	retlw	32	;' '
  1080  1121  3463               	retlw	99	;'c'
  1081  1122  3468               	retlw	104	;'h'
  1082  1123  3461               	retlw	97	;'a'
  1083  1124  346E               	retlw	110	;'n'
  1084  1125  346E               	retlw	110	;'n'
  1085  1126  3465               	retlw	101	;'e'
  1086  1127  346C               	retlw	108	;'l'
  1087  1128  3420               	retlw	32	;' '
  1088  1129  3473               	retlw	115	;'s'
  1089  112A  3465               	retlw	101	;'e'
  1090  112B  346C               	retlw	108	;'l'
  1091  112C  3465               	retlw	101	;'e'
  1092  112D  3463               	retlw	99	;'c'
  1093  112E  3474               	retlw	116	;'t'
  1094  112F  3420               	retlw	32	;' '
  1095  1130  343A               	retlw	58	;':'
  1096  1131  3420               	retlw	32	;' '
  1097  1132  3400               	retlw	0
  1098  1133                     STR_4:	
  1099  1133  3445               	retlw	69	;'E'
  1100  1134  3452               	retlw	82	;'R'
  1101  1135  3452               	retlw	82	;'R'
  1102  1136  343A               	retlw	58	;':'
  1103  1137  3420               	retlw	32	;' '
  1104  1138  3452               	retlw	82	;'R'
  1105  1139  3420               	retlw	32	;' '
  1106  113A  3452               	retlw	82	;'R'
  1107  113B  344D               	retlw	77	;'M'
  1108  113C  3453               	retlw	83	;'S'
  1109  113D  3420               	retlw	32	;' '
  1110  113E  3443               	retlw	67	;'C'
  1111  113F  3455               	retlw	85	;'U'
  1112  1140  3452               	retlw	82	;'R'
  1113  1141  3452               	retlw	82	;'R'
  1114  1142  3445               	retlw	69	;'E'
  1115  1143  344E               	retlw	78	;'N'
  1116  1144  3454               	retlw	84	;'T'
  1117  1145  3420               	retlw	32	;' '
  1118  1146  343C               	retlw	60	;'<'
  1119  1147  3420               	retlw	32	;' '
  1120  1148  344D               	retlw	77	;'M'
  1121  1149  3449               	retlw	73	;'I'
  1122  114A  344E               	retlw	78	;'N'
  1123  114B  3420               	retlw	32	;' '
  1124  114C  344C               	retlw	76	;'L'
  1125  114D  3449               	retlw	73	;'I'
  1126  114E  344D               	retlw	77	;'M'
  1127  114F  3449               	retlw	73	;'I'
  1128  1150  3454               	retlw	84	;'T'
  1129  1151  3420               	retlw	32	;' '
  1130  1152  340D               	retlw	13
  1131  1153  3400               	retlw	0
  1132  1154                     STR_5:	
  1133  1154  3445               	retlw	69	;'E'
  1134  1155  3452               	retlw	82	;'R'
  1135  1156  3452               	retlw	82	;'R'
  1136  1157  343A               	retlw	58	;':'
  1137  1158  3420               	retlw	32	;' '
  1138  1159  3452               	retlw	82	;'R'
  1139  115A  3420               	retlw	32	;' '
  1140  115B  3452               	retlw	82	;'R'
  1141  115C  344D               	retlw	77	;'M'
  1142  115D  3453               	retlw	83	;'S'
  1143  115E  3420               	retlw	32	;' '
  1144  115F  3443               	retlw	67	;'C'
  1145  1160  3455               	retlw	85	;'U'
  1146  1161  3452               	retlw	82	;'R'
  1147  1162  3452               	retlw	82	;'R'
  1148  1163  3445               	retlw	69	;'E'
  1149  1164  344E               	retlw	78	;'N'
  1150  1165  3454               	retlw	84	;'T'
  1151  1166  3420               	retlw	32	;' '
  1152  1167  343E               	retlw	62	;'>'
  1153  1168  3420               	retlw	32	;' '
  1154  1169  344D               	retlw	77	;'M'
  1155  116A  3441               	retlw	65	;'A'
  1156  116B  3458               	retlw	88	;'X'
  1157  116C  3420               	retlw	32	;' '
  1158  116D  344C               	retlw	76	;'L'
  1159  116E  3449               	retlw	73	;'I'
  1160  116F  344D               	retlw	77	;'M'
  1161  1170  3449               	retlw	73	;'I'
  1162  1171  3454               	retlw	84	;'T'
  1163  1172  3420               	retlw	32	;' '
  1164  1173  340D               	retlw	13
  1165  1174  3400               	retlw	0
  1166  1175                     STR_6:	
  1167  1175  3452               	retlw	82	;'R'
  1168  1176  3420               	retlw	32	;' '
  1169  1177  3452               	retlw	82	;'R'
  1170  1178  344D               	retlw	77	;'M'
  1171  1179  3453               	retlw	83	;'S'
  1172  117A  3420               	retlw	32	;' '
  1173  117B  3443               	retlw	67	;'C'
  1174  117C  3455               	retlw	85	;'U'
  1175  117D  3452               	retlw	82	;'R'
  1176  117E  3452               	retlw	82	;'R'
  1177  117F  3445               	retlw	69	;'E'
  1178  1180  344E               	retlw	78	;'N'
  1179  1181  3454               	retlw	84	;'T'
  1180  1182  3420               	retlw	32	;' '
  1181  1183  3477               	retlw	119	;'w'
  1182  1184  3469               	retlw	105	;'i'
  1183  1185  3474               	retlw	116	;'t'
  1184  1186  3468               	retlw	104	;'h'
  1185  1187  3469               	retlw	105	;'i'
  1186  1188  346E               	retlw	110	;'n'
  1187  1189  3420               	retlw	32	;' '
  1188  118A  344C               	retlw	76	;'L'
  1189  118B  3449               	retlw	73	;'I'
  1190  118C  344D               	retlw	77	;'M'
  1191  118D  3449               	retlw	73	;'I'
  1192  118E  3454               	retlw	84	;'T'
  1193  118F  3420               	retlw	32	;' '
  1194  1190  340D               	retlw	13
  1195  1191  3400               	retlw	0
  1196  1192                     STR_8:	
  1197  1192  340D               	retlw	13
  1198  1193  3445               	retlw	69	;'E'
  1199  1194  3452               	retlw	82	;'R'
  1200  1195  3452               	retlw	82	;'R'
  1201  1196  343A               	retlw	58	;':'
  1202  1197  3420               	retlw	32	;' '
  1203  1198  3446               	retlw	70	;'F'
  1204  1199  3445               	retlw	69	;'E'
  1205  119A  3452               	retlw	82	;'R'
  1206  119B  3452               	retlw	82	;'R'
  1207  119C  340D               	retlw	13
  1208  119D  3420               	retlw	32	;' '
  1209  119E  3400               	retlw	0
  1210  119F                     STR_7:	
  1211  119F  340D               	retlw	13
  1212  11A0  3445               	retlw	69	;'E'
  1213  11A1  3452               	retlw	82	;'R'
  1214  11A2  3452               	retlw	82	;'R'
  1215  11A3  343A               	retlw	58	;':'
  1216  11A4  3420               	retlw	32	;' '
  1217  11A5  344F               	retlw	79	;'O'
  1218  11A6  3445               	retlw	69	;'E'
  1219  11A7  3452               	retlw	82	;'R'
  1220  11A8  3452               	retlw	82	;'R'
  1221  11A9  340D               	retlw	13
  1222  11AA  3420               	retlw	32	;' '
  1223  11AB  3400               	retlw	0
  1224                           
  1225                           ; #config settings
  1226  0000                     
  1227                           	psect	cinit
  1228  0015                     start_initialization:	
  1229  0015                     __initialization:	
  1230                           
  1231                           ; Initialize objects allocated to BANK2
  1232  0015  1783               	bsf	3,7	;select IRP bank2
  1233  0016  3044               	movlw	low (__pdataBANK2+52)
  1234  0017  00FD               	movwf	btemp+-1
  1235  0018  3007               	movlw	high __pidataBANK2
  1236  0019  00FE               	movwf	btemp
  1237  001A  30C0               	movlw	low __pidataBANK2
  1238  001B  00FF               	movwf	btemp+1
  1239  001C  3010               	movlw	low __pdataBANK2
  1240  001D  0084               	movwf	4
  1241  001E  120A  158A  2137  120A  118A  	fcall	init_ram0
  1242                           
  1243                           ; Initialize objects allocated to BANK1
  1244  0023  1383               	bcf	3,7	;select IRP bank0
  1245  0024  30EF               	movlw	low (__pdataBANK1+4)
  1246  0025  00FD               	movwf	btemp+-1
  1247  0026  3008               	movlw	high __pidataBANK1
  1248  0027  00FE               	movwf	btemp
  1249  0028  30FA               	movlw	low __pidataBANK1
  1250  0029  00FF               	movwf	btemp+1
  1251  002A  30EB               	movlw	low __pdataBANK1
  1252  002B  0084               	movwf	4
  1253  002C  120A  158A  2137  120A  118A  	fcall	init_ram0
  1254                           
  1255                           ; Initialize objects allocated to COMMON
  1256  0031  120A  158A  20FE  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1257  0036  00F8               	movwf	__pdataCOMMON& (0+127)
  1258  0037  120A  158A  20FF  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
  1259  003C  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
  1260  003D  120A  158A  2100  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
  1261  0042  00FA               	movwf	(__pdataCOMMON+2)& (0+127)
  1262  0043  120A  158A  2101  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
  1263  0048  00FB               	movwf	(__pdataCOMMON+3)& (0+127)
  1264  0049  120A  158A  2102  120A  118A  	fcall	__pidataCOMMON+4	;fetch initializer
  1265  004E  00FC               	movwf	(__pdataCOMMON+4)& (0+127)
  1266                           
  1267                           ; Clear objects allocated to BANK3
  1268  004F  1783               	bsf	3,7	;select IRP bank2
  1269  0050  3090               	movlw	low __pbssBANK3
  1270  0051  0084               	movwf	4
  1271  0052  30C6               	movlw	low (__pbssBANK3+54)
  1272  0053  120A  158A  210B  120A  118A  	fcall	clear_ram0
  1273                           
  1274                           ; Clear objects allocated to BANK2
  1275  0058  304E               	movlw	low __pbssBANK2
  1276  0059  0084               	movwf	4
  1277  005A  3056               	movlw	low (__pbssBANK2+8)
  1278  005B  120A  158A  210B  120A  118A  	fcall	clear_ram0
  1279                           
  1280                           ; Clear objects allocated to BANK1
  1281  0060  1383               	bcf	3,7	;select IRP bank0
  1282  0061  30D9               	movlw	low __pbssBANK1
  1283  0062  0084               	movwf	4
  1284  0063  30EB               	movlw	low (__pbssBANK1+18)
  1285  0064  120A  158A  210B  120A  118A  	fcall	clear_ram0
  1286                           
  1287                           ; Clear objects allocated to BANK0
  1288  0069  3052               	movlw	low __pbssBANK0
  1289  006A  0084               	movwf	4
  1290  006B  3062               	movlw	low (__pbssBANK0+16)
  1291  006C  120A  158A  210B   	fcall	clear_ram0
  1292                           
  1293                           ; Clear objects allocated to COMMON
  1294  006F  01FD               	clrf	__pbssCOMMON& (0+127)
  1295  0070                     end_of_initialization:	
  1296                           ;End of C runtime variable initialization code
  1297                           
  1298  0070                     __end_of__initialization:	
  1299  0070  0183               	clrf	3
  1300  0071  120A  118A  2874   	ljmp	_main	;jump to C main() function
  1301                           
  1302                           	psect	bssCOMMON
  1303  007D                     __pbssCOMMON:	
  1304  007D                     _timer2_cur_service_type:	
  1305  007D                     	ds	1
  1306                           
  1307                           	psect	dataCOMMON
  1308  0078                     __pdataCOMMON:	
  1309  0078                     _timer1_prescale:	
  1310  0078                     	ds	2
  1311  007A                     _cur_disp_lcd_loc:	
  1312  007A                     	ds	2
  1313  007C                     _lcd_avail_loc_within_limit:	
  1314  007C                     	ds	1
  1315                           
  1316                           	psect	bssBANK0
  1317  0052                     __pbssBANK0:	
  1318  0052                     _lcd_unit:	
  1319  0052                     	ds	6
  1320  0058                     _timer1_init_val:	
  1321  0058                     	ds	4
  1322  005C                     _timer2_last_run_state_before_stop:	
  1323  005C                     	ds	1
  1324  005D                     _timer2_cur_run_state:	
  1325  005D                     	ds	1
  1326  005E                     _timer1_cur_service_type:	
  1327  005E                     	ds	1
  1328  005F                     _timer1_last_run_state_before_stop:	
  1329  005F                     	ds	1
  1330  0060                     _timer1_cur_run_state:	
  1331  0060                     	ds	1
  1332  0061                     _adc_cur_channel:	
  1333  0061                     	ds	1
  1334                           
  1335                           	psect	bssBANK1
  1336  00D9                     __pbssBANK1:	
  1337  00D9                     _measure_pulse_lower_count:	
  1338  00D9                     	ds	4
  1339  00DD                     _timer1_elapsed_num_overflow_1_update:	
  1340  00DD                     	ds	4
  1341  00E1                     _timer2_elapsed_num_update:	
  1342  00E1                     	ds	2
  1343  00E3                     _timer2_prescale_shift:	
  1344  00E3                     	ds	2
  1345  00E5                     _timer1_prescale_shift:	
  1346  00E5                     	ds	2
  1347  00E7                     _timer1_elapsed_num_update:	
  1348  00E7                     	ds	2
  1349  00E9                     _lcd_read_command:	
  1350  00E9                     	ds	2
  1351                           
  1352                           	psect	dataBANK1
  1353  00EB                     __pdataBANK1:	
  1354  00EB                     _timer2_prescale:	
  1355  00EB                     	ds	2
  1356  00ED                     _cur_input_lcd_loc:	
  1357  00ED                     	ds	2
  1358                           
  1359                           	psect	bssBANK3
  1360  0190                     __pbssBANK3:	
  1361  0190                     _timer2_req_time_delay_in_milli_sec:	
  1362  0190                     	ds	4
  1363  0194                     _timer2_1_update:	
  1364  0194                     	ds	4
  1365  0198                     _timer2_elapsed_num_overflow_1_update:	
  1366  0198                     	ds	4
  1367  019C                     _timer2_init_val:	
  1368  019C                     	ds	4
  1369  01A0                     _measure_pulse_upper_count:	
  1370  01A0                     	ds	4
  1371  01A4                     _timer1_req_time_delay_in_milli_sec:	
  1372  01A4                     	ds	4
  1373  01A8                     _timer1_max_num_overflow:	
  1374  01A8                     	ds	4
  1375  01AC                     _timer1_req_time_max_update:	
  1376  01AC                     	ds	4
  1377  01B0                     _timer1_1_update:	
  1378  01B0                     	ds	4
  1379  01B4                     _analog_val_in_digital_ch:	
  1380  01B4                     	ds	4
  1381  01B8                     _to_disp:	
  1382  01B8                     	ds	4
  1383  01BC                     _adc_cur_parameters:	
  1384  01BC                     	ds	10
  1385                           
  1386                           	psect	bssBANK2
  1387  014E                     __pbssBANK2:	
  1388  014E                     _timer2_req_time_max_update:	
  1389  014E                     	ds	4
  1390  0152                     _timer2_max_num_overflow:	
  1391  0152                     	ds	4
  1392                           
  1393                           	psect	dataBANK2
  1394  0110                     __pdataBANK2:	
  1395  0110                     UART_Transmit_Num@F1845:	
  1396  0110                     	ds	16
  1397  0120                     LCD_Disp_Num@F1881:	
  1398  0120                     	ds	16
  1399  0130                     UART_Transmit_Num@F1843:	
  1400  0130                     	ds	10
  1401  013A                     LCD_Disp_Num@F1879:	
  1402  013A                     	ds	10
  1403                           
  1404                           	psect	inittext
  1405  0933                     init_fetch0:	
  1406                           ;	Called with low address in FSR and high address in W
  1407                           
  1408  0933  087E               	movf	126,w
  1409  0934  008A               	movwf	10
  1410  0935  087F               	movf	127,w
  1411  0936  0082               	movwf	2
  1412  0937                     init_ram0:	
  1413                           ;Called with:
  1414                           ;	high address of idata address in btemp 
  1415                           ;	low address of idata address in btemp+1 
  1416                           ;	low address of data in FSR
  1417                           ;	high address + 1 of data in btemp-1
  1418                           
  1419  0937  2133  120A  158A   	fcall	init_fetch0
  1420  093A  0080               	movwf	0
  1421  093B  0A84               	incf	4,f
  1422  093C  0804               	movf	4,w
  1423  093D  067D               	xorwf	125,w
  1424  093E  1903               	btfsc	3,2
  1425  093F  3400               	retlw	0
  1426  0940  0AFF               	incf	127,f
  1427  0941  1903               	btfsc	3,2
  1428  0942  0AFE               	incf	126,f
  1429  0943  2937               	goto	init_ram0
  1430                           
  1431                           	psect	clrtext
  1432  090B                     clear_ram0:	
  1433                           ;	Called with FSR containing the base address, and
  1434                           ;	W with the last address+1
  1435                           
  1436  090B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1437  090C                     clrloop0:	
  1438  090C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1439  090D  0A84               	incf	4,f	;increment pointer
  1440  090E  0604               	xorwf	4,w	;XOR with final address
  1441  090F  1903               	btfsc	3,2	;have we reached the end yet?
  1442  0910  3400               	retlw	0	;all done for this memory range, return
  1443  0911  0604               	xorwf	4,w	;XOR again to restore value
  1444  0912  290C               	goto	clrloop0	;do the next byte
  1445                           
  1446                           	psect	cstackBANK3
  1447  01C6                     __pcstackBANK3:	
  1448  01C6                     ??_ADC_Start_Conv:	
  1449                           
  1450                           ; 1 bytes @ 0x0
  1451  01C6                     	ds	6
  1452  01CC                     ADC_Start_Conv@rcvd_status:	
  1453                           
  1454                           ; 1 bytes @ 0x6
  1455  01CC                     	ds	1
  1456  01CD                     ADC_Start_Conv@adc_value_least_byte:	
  1457                           
  1458                           ; 2 bytes @ 0x7
  1459  01CD                     	ds	2
  1460  01CF                     ADC_Start_Conv@adc_value_most_byte:	
  1461                           
  1462                           ; 2 bytes @ 0x9
  1463  01CF                     	ds	2
  1464  01D1                     ADC_Start_Conv@set_adc_parameters:	
  1465                           
  1466                           ; 1 bytes @ 0xB
  1467  01D1                     	ds	1
  1468  01D2                     main@fault_occured_flag:	
  1469                           
  1470                           ; 1 bytes @ 0xC
  1471  01D2                     	ds	1
  1472  01D3                     main@temp:	
  1473                           
  1474                           ; 4 bytes @ 0xD
  1475  01D3                     	ds	4
  1476  01D7                     main@r_at_ch_instant_current_encoded_val:	
  1477                           
  1478                           ; 4 bytes @ 0x11
  1479  01D7                     	ds	4
  1480  01DB                     main@calc_r_source_rms_current_in_milli_amp:	
  1481                           
  1482                           ; 4 bytes @ 0x15
  1483  01DB                     	ds	4
  1484  01DF                     main@i:	
  1485                           
  1486                           ; 4 bytes @ 0x19
  1487  01DF                     	ds	4
  1488  01E3                     main@r_at_ch_peak_current_encoded_value:	
  1489                           
  1490                           ; 4 bytes @ 0x1D
  1491  01E3                     	ds	4
  1492  01E7                     main@r_at_ch_peak_current_int:	
  1493                           
  1494                           ; 4 bytes @ 0x21
  1495  01E7                     	ds	4
  1496  01EB                     main@r_at_ch_peak_current_frac:	
  1497                           
  1498                           ; 4 bytes @ 0x25
  1499  01EB                     	ds	4
  1500                           
  1501                           	psect	cstackBANK2
  1502  0144                     __pcstackBANK2:	
  1503  0144                     main@temp_int:	
  1504                           
  1505                           ; 4 bytes @ 0x0
  1506  0144                     	ds	4
  1507  0148                     main@temp_frac:	
  1508                           
  1509                           ; 4 bytes @ 0x4
  1510  0148                     	ds	4
  1511  014C                     main@cur_disp_block:	
  1512                           
  1513                           ; 2 bytes @ 0x8
  1514  014C                     	ds	2
  1515                           
  1516                           	psect	cstackBANK1
  1517  00A0                     __pcstackBANK1:	
  1518  00A0                     ?_UART_Transmit_Num:	
  1519  00A0                     ?_Encoded_To_Actual_Analog_Val_Calc:	
  1520                           ; 1 bytes @ 0x0
  1521                           
  1522  00A0                     Encoded_To_Actual_Analog_Val_Calc@adc_value:	
  1523                           ; 1 bytes @ 0x0
  1524                           
  1525  00A0                     UART_Transmit_Num@uart_disp_data_int:	
  1526                           ; 4 bytes @ 0x0
  1527                           
  1528                           
  1529                           ; 4 bytes @ 0x0
  1530  00A0                     	ds	4
  1531  00A4                     ??_UART_Transmit_Num:	
  1532  00A4                     Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val:	
  1533                           ; 1 bytes @ 0x4
  1534                           
  1535                           
  1536                           ; 4 bytes @ 0x4
  1537  00A4                     	ds	4
  1538  00A8                     Encoded_To_Actual_Analog_Val_Calc@min_analog_val:	
  1539  00A8                     UART_Transmit_Num@hex_data:	
  1540                           ; 4 bytes @ 0x8
  1541                           
  1542                           
  1543                           ; 16 bytes @ 0x8
  1544  00A8                     	ds	4
  1545  00AC                     Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int:	
  1546                           
  1547                           ; 1 bytes @ 0xC
  1548  00AC                     	ds	1
  1549  00AD                     Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac:	
  1550                           
  1551                           ; 1 bytes @ 0xD
  1552  00AD                     	ds	1
  1553  00AE                     ??_Encoded_To_Actual_Analog_Val_Calc:	
  1554                           
  1555                           ; 1 bytes @ 0xE
  1556  00AE                     	ds	4
  1557  00B2                     Encoded_To_Actual_Analog_Val_Calc@temp_val_1:	
  1558                           
  1559                           ; 4 bytes @ 0x12
  1560  00B2                     	ds	4
  1561  00B6                     Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val:	
  1562                           
  1563                           ; 4 bytes @ 0x16
  1564  00B6                     	ds	2
  1565  00B8                     UART_Transmit_Num@num_data:	
  1566                           
  1567                           ; 10 bytes @ 0x18
  1568  00B8                     	ds	2
  1569  00BA                     Encoded_To_Actual_Analog_Val_Calc@remainder_val_1:	
  1570                           
  1571                           ; 4 bytes @ 0x1A
  1572  00BA                     	ds	4
  1573  00BE                     Encoded_To_Actual_Analog_Val_Calc@remainder_val_10:	
  1574                           
  1575                           ; 4 bytes @ 0x1E
  1576  00BE                     	ds	4
  1577  00C2                     UART_Transmit_Num@tens_thousand_digit:	
  1578  00C2                     Encoded_To_Actual_Analog_Val_Calc@remainder_val:	
  1579                           ; 2 bytes @ 0x22
  1580                           
  1581                           
  1582                           ; 4 bytes @ 0x22
  1583  00C2                     	ds	2
  1584  00C4                     UART_Transmit_Num@uart_datanum_disp_format:	
  1585                           
  1586                           ; 1 bytes @ 0x24
  1587  00C4                     	ds	1
  1588  00C5                     UART_Transmit_Num@thousands_digit:	
  1589                           
  1590                           ; 2 bytes @ 0x25
  1591  00C5                     	ds	2
  1592  00C7                     UART_Transmit_Num@hundreds_digit:	
  1593                           
  1594                           ; 2 bytes @ 0x27
  1595  00C7                     	ds	2
  1596  00C9                     UART_Transmit_Num@tens_digit:	
  1597                           
  1598                           ; 2 bytes @ 0x29
  1599  00C9                     	ds	2
  1600  00CB                     UART_Transmit_Num@unit_digit:	
  1601                           
  1602                           ; 2 bytes @ 0x2B
  1603  00CB                     	ds	2
  1604  00CD                     UART_Transmit_Num@num:	
  1605                           
  1606                           ; 4 bytes @ 0x2D
  1607  00CD                     	ds	4
  1608  00D1                     UART_Transmit_Num@disp_num:	
  1609                           
  1610                           ; 4 bytes @ 0x31
  1611  00D1                     	ds	4
  1612  00D5                     ??_main:	
  1613                           
  1614                           ; 1 bytes @ 0x35
  1615  00D5                     	ds	4
  1616                           
  1617                           	psect	cstackCOMMON
  1618  0070                     __pcstackCOMMON:	
  1619  0070                     ?_Is_ADC_Converting:	
  1620  0070                     ?_UART_Transmit_Char:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ?_UART_Init:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ?_Timer1_Stop:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ??_Timer1_Stop:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_ADC_Conf_Channel:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ?_ADC_Start_Conv:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0070                     ?_main:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     ?_External_Interrupt_Occured_Appl_Proc:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0070                     ??_External_Interrupt_Occured_Appl_Proc:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ?_Timer1_Req_Time_Expiry_Appl_Proc:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ??_Timer1_Req_Time_Expiry_Appl_Proc:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ?_ADC_Conv_Over_Appl_Proc:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656  0070                     ??_ADC_Conv_Over_Appl_Proc:	
  1657                           ; 1 bytes @ 0x0
  1658                           
  1659  0070                     ?_Interrupt_ISR:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?i1___bmul:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ADC_Conv_Over_Appl_Proc@adc_cur_channel:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     i1___bmul@multiplicand:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671                           
  1672                           ; 1 bytes @ 0x0
  1673  0070                     	ds	1
  1674  0071                     ??i1___bmul:	
  1675                           
  1676                           ; 1 bytes @ 0x1
  1677  0071                     	ds	1
  1678  0072                     i1___bmul@multiplier:	
  1679                           
  1680                           ; 1 bytes @ 0x2
  1681  0072                     	ds	1
  1682  0073                     i1___bmul@product:	
  1683                           
  1684                           ; 1 bytes @ 0x3
  1685  0073                     	ds	1
  1686  0074                     Interrupt_ISR@adc_value_least_byte:	
  1687                           
  1688                           ; 2 bytes @ 0x4
  1689  0074                     	ds	2
  1690  0076                     Interrupt_ISR@adc_value_most_byte:	
  1691                           
  1692                           ; 2 bytes @ 0x6
  1693  0076                     	ds	2
  1694                           
  1695                           	psect	cstackBANK0
  1696  0020                     __pcstackBANK0:	
  1697  0020                     ??_Interrupt_ISR:	
  1698                           
  1699                           ; 1 bytes @ 0x0
  1700  0020                     	ds	13
  1701  002D                     ??_Is_ADC_Converting:	
  1702  002D                     ??_UART_Transmit_Char:	
  1703                           ; 1 bytes @ 0xD
  1704                           
  1705  002D                     ??_UART_Init:	
  1706                           ; 1 bytes @ 0xD
  1707                           
  1708  002D                     ?___bmul:	
  1709                           ; 1 bytes @ 0xD
  1710                           
  1711  002D                     ?___lldiv:	
  1712                           ; 1 bytes @ 0xD
  1713                           
  1714  002D                     UART_Transmit_Char@transmit_char:	
  1715                           ; 4 bytes @ 0xD
  1716                           
  1717  002D                     ___bmul@multiplicand:	
  1718                           ; 1 bytes @ 0xD
  1719                           
  1720  002D                     ___lldiv@divisor:	
  1721                           ; 1 bytes @ 0xD
  1722                           
  1723                           
  1724                           ; 4 bytes @ 0xD
  1725  002D                     	ds	1
  1726  002E                     ?_UART_Transmit_Str:	
  1727  002E                     ??___bmul:	
  1728                           ; 1 bytes @ 0xE
  1729                           
  1730  002E                     UART_Transmit_Str@transmit_str:	
  1731                           ; 1 bytes @ 0xE
  1732                           
  1733                           
  1734                           ; 2 bytes @ 0xE
  1735  002E                     	ds	1
  1736  002F                     ___bmul@product:	
  1737                           
  1738                           ; 1 bytes @ 0xF
  1739  002F                     	ds	1
  1740  0030                     ??_UART_Transmit_Str:	
  1741  0030                     ___bmul@multiplier:	
  1742                           ; 1 bytes @ 0x10
  1743                           
  1744                           
  1745                           ; 1 bytes @ 0x10
  1746  0030                     	ds	1
  1747  0031                     ??_ADC_Conf_Channel:	
  1748  0031                     ___lldiv@dividend:	
  1749                           ; 1 bytes @ 0x11
  1750                           
  1751                           
  1752                           ; 4 bytes @ 0x11
  1753  0031                     	ds	1
  1754  0032                     ADC_Conf_Channel@set_adc_cur_channel:	
  1755                           
  1756                           ; 1 bytes @ 0x12
  1757  0032                     	ds	3
  1758  0035                     ??___lldiv:	
  1759                           
  1760                           ; 1 bytes @ 0x15
  1761  0035                     	ds	1
  1762  0036                     ___lldiv@quotient:	
  1763                           
  1764                           ; 4 bytes @ 0x16
  1765  0036                     	ds	4
  1766  003A                     ___lldiv@counter:	
  1767                           
  1768                           ; 1 bytes @ 0x1A
  1769  003A                     	ds	1
  1770  003B                     ?___lmul:	
  1771  003B                     ___lmul@multiplier:	
  1772                           ; 4 bytes @ 0x1B
  1773                           
  1774                           
  1775                           ; 4 bytes @ 0x1B
  1776  003B                     	ds	4
  1777  003F                     ___lmul@multiplicand:	
  1778                           
  1779                           ; 4 bytes @ 0x1F
  1780  003F                     	ds	4
  1781  0043                     ??___lmul:	
  1782                           
  1783                           ; 1 bytes @ 0x23
  1784  0043                     	ds	1
  1785  0044                     ___lmul@product:	
  1786                           
  1787                           ; 4 bytes @ 0x24
  1788  0044                     	ds	4
  1789  0048                     ?___llmod:	
  1790  0048                     ___llmod@divisor:	
  1791                           ; 4 bytes @ 0x28
  1792                           
  1793                           
  1794                           ; 4 bytes @ 0x28
  1795  0048                     	ds	4
  1796  004C                     ___llmod@dividend:	
  1797                           
  1798                           ; 4 bytes @ 0x2C
  1799  004C                     	ds	4
  1800  0050                     ??___llmod:	
  1801                           
  1802                           ; 1 bytes @ 0x30
  1803  0050                     	ds	1
  1804  0051                     ___llmod@counter:	
  1805                           
  1806                           ; 1 bytes @ 0x31
  1807  0051                     	ds	1
  1808                           
  1809                           	psect	maintext
  1810  0074                     __pmaintext:	
  1811 ;;
  1812 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1813 ;;
  1814 ;; *************** function _main *****************
  1815 ;; Defined at:
  1816 ;;		line 68 in file "main.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;  temp_frac       4    4[BANK2 ] unsigned long 
  1821 ;;  temp_int        4    0[BANK2 ] unsigned long 
  1822 ;;  r_at_ch_peak    4   37[BANK3 ] unsigned long 
  1823 ;;  r_at_ch_peak    4   33[BANK3 ] unsigned long 
  1824 ;;  r_at_ch_peak    4   29[BANK3 ] unsigned long 
  1825 ;;  i               4   25[BANK3 ] unsigned long 
  1826 ;;  calc_r_sourc    4   21[BANK3 ] unsigned long 
  1827 ;;  r_at_ch_inst    4   17[BANK3 ] unsigned long 
  1828 ;;  temp            4   13[BANK3 ] unsigned long 
  1829 ;;  cur_disp_blo    2    8[BANK2 ] unsigned int 
  1830 ;;  fault_occure    1   12[BANK3 ] unsigned char 
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : B00/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1840 ;;      Params:         0       0       0       0       0
  1841 ;;      Locals:         0       0       0      29      10
  1842 ;;      Temps:          0       0       4       0       0
  1843 ;;      Totals:         0       0       4      29      10
  1844 ;;Total ram usage:       43 bytes
  1845 ;; Hardware stack levels required when called:    5
  1846 ;; This function calls:
  1847 ;;		_ADC_Conf_Channel
  1848 ;;		_ADC_Start_Conv
  1849 ;;		_Encoded_To_Actual_Analog_Val_Calc
  1850 ;;		_UART_Init
  1851 ;;		_UART_Transmit_Str
  1852 ;;		___bmul
  1853 ;;		___lldiv
  1854 ;;		___lmul
  1855 ;; This function is called by:
  1856 ;;		Startup code after reset
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           
  1861                           ;psect for function _main
  1862  0074                     _main:	
  1863                           
  1864                           ;main.c: 70: unsigned long r_at_ch_instant_current_encoded_val, r_at_ch_peak_current_int
      +                          , r_at_ch_peak_current_frac, r_at_ch_peak_current_encoded_value = 0, temp_int, temp_frac
      +                          , i, temp, calc_r_source_rms_current_in_milli_amp;
  1865                           
  1866                           ;incstack = 0
  1867                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1868  0074  3000               	movlw	0
  1869  0075  1683               	bsf	3,5	;RP0=1, select bank3
  1870  0076  1703               	bsf	3,6	;RP1=1, select bank3
  1871  0077  00E6               	movwf	(main@r_at_ch_peak_current_encoded_value+3)^(0+384)
  1872  0078  3000               	movlw	0
  1873  0079  00E5               	movwf	(main@r_at_ch_peak_current_encoded_value+2)^(0+384)
  1874  007A  3000               	movlw	0
  1875  007B  00E4               	movwf	(main@r_at_ch_peak_current_encoded_value+1)^(0+384)
  1876  007C  3000               	movlw	0
  1877  007D  00E3               	movwf	main@r_at_ch_peak_current_encoded_value^(0+384)
  1878                           
  1879                           ;main.c: 72: char fault_occured_flag = ('n');
  1880  007E  306E               	movlw	110
  1881  007F  1683               	bsf	3,5	;RP0=1, select bank1
  1882  0080  1303               	bcf	3,6	;RP1=0, select bank1
  1883  0081  00D5               	movwf	??_main^(0+128)
  1884  0082  0855               	movf	??_main^(0+128),w
  1885  0083  1683               	bsf	3,5	;RP0=1, select bank3
  1886  0084  1703               	bsf	3,6	;RP1=1, select bank3
  1887  0085  00D2               	movwf	main@fault_occured_flag^(0+384)
  1888                           
  1889                           ;main.c: 73: unsigned int cur_disp_block = 0;
  1890  0086  1283               	bcf	3,5	;RP0=0, select bank2
  1891  0087  1703               	bsf	3,6	;RP1=1, select bank2
  1892  0088  01CC               	clrf	main@cur_disp_block^(0+256)
  1893  0089  01CD               	clrf	(main@cur_disp_block+1)^(0+256)
  1894                           
  1895                           ;main.c: 75: TRISBbits.TRISB1 = 0;
  1896  008A  1683               	bsf	3,5	;RP0=1, select bank1
  1897  008B  1303               	bcf	3,6	;RP1=0, select bank1
  1898  008C  1086               	bcf	6,1	;volatile
  1899                           
  1900                           ;main.c: 76: TRISBbits.TRISB2 = 0;
  1901  008D  1106               	bcf	6,2	;volatile
  1902                           
  1903                           ;main.c: 77: TRISBbits.TRISB3 = 0;
  1904  008E  1186               	bcf	6,3	;volatile
  1905                           
  1906                           ;main.c: 79: ANSEL = 0x02;
  1907  008F  3002               	movlw	2
  1908  0090  1683               	bsf	3,5	;RP0=1, select bank3
  1909  0091  1703               	bsf	3,6	;RP1=1, select bank3
  1910  0092  0088               	movwf	8	;volatile
  1911                           
  1912                           ;main.c: 80: ANSELH = 0x00;
  1913  0093  0189               	clrf	9	;volatile
  1914                           
  1915                           ;main.c: 81: UART_Init();
  1916  0094  120A  158A  2157  120A  118A  	fcall	_UART_Init
  1917  0099                     l3520:	
  1918                           ;main.c: 85: while(1)
  1919                           
  1920                           
  1921                           ;main.c: 86: {
  1922                           ;main.c: 88: {
  1923                           ;main.c: 89: r_at_ch_peak_current_encoded_value = 0;
  1924  0099  3000               	movlw	0
  1925  009A  1683               	bsf	3,5	;RP0=1, select bank3
  1926  009B  1703               	bsf	3,6	;RP1=1, select bank3
  1927  009C  00E6               	movwf	(main@r_at_ch_peak_current_encoded_value+3)^(0+384)
  1928  009D  3000               	movlw	0
  1929  009E  00E5               	movwf	(main@r_at_ch_peak_current_encoded_value+2)^(0+384)
  1930  009F  3000               	movlw	0
  1931  00A0  00E4               	movwf	(main@r_at_ch_peak_current_encoded_value+1)^(0+384)
  1932  00A1  3000               	movlw	0
  1933  00A2  00E3               	movwf	main@r_at_ch_peak_current_encoded_value^(0+384)
  1934                           
  1935                           ;main.c: 90: for(i = 0; i < 400ul; ++i )
  1936  00A3  3000               	movlw	0
  1937  00A4  00E2               	movwf	(main@i+3)^(0+384)
  1938  00A5  3000               	movlw	0
  1939  00A6  00E1               	movwf	(main@i+2)^(0+384)
  1940  00A7  3000               	movlw	0
  1941  00A8  00E0               	movwf	(main@i+1)^(0+384)
  1942  00A9  3000               	movlw	0
  1943  00AA  00DF               	movwf	main@i^(0+384)
  1944  00AB  0862               	movf	(main@i+3)^(0+384),w
  1945  00AC  1D03               	btfss	3,2
  1946  00AD  291B               	goto	l3540
  1947  00AE  0861               	movf	(main@i+2)^(0+384),w
  1948  00AF  1D03               	btfss	3,2
  1949  00B0  291B               	goto	l3540
  1950  00B1  3001               	movlw	1
  1951  00B2  0260               	subwf	(main@i+1)^(0+384),w
  1952  00B3  1D03               	skipz
  1953  00B4  28B9               	goto	u3383
  1954  00B5  3090               	movlw	144
  1955  00B6  025F               	subwf	main@i^(0+384),w
  1956  00B7  1D03               	skipz
  1957  00B8  28B9               	goto	u3383
  1958  00B9                     u3383:	
  1959  00B9  1803               	btfsc	3,0
  1960  00BA  291B               	goto	l3540
  1961  00BB                     l3528:	
  1962                           
  1963                           ;main.c: 91: {
  1964                           ;main.c: 92: ADC_Conf_Channel(ADC_CH_01);
  1965  00BB  3001               	movlw	1
  1966  00BC  120A  118A  26FF  120A  118A  	fcall	_ADC_Conf_Channel
  1967                           
  1968                           ;main.c: 93: ADC_Start_Conv(&adc_cur_parameters[ADC_CH_01]);
  1969  00C1  30C1               	movlw	(low ((_adc_cur_parameters| (0+256)+5)))& (0+255)
  1970  00C2  120A  158A  23BD  120A  118A  	fcall	_ADC_Start_Conv
  1971                           
  1972                           ;main.c: 95: r_at_ch_instant_current_encoded_val = adc_cur_parameters[adc_cur_channel].a
      +                          dc_value_channel;
  1973  00C7  3005               	movlw	5
  1974  00C8  1683               	bsf	3,5	;RP0=1, select bank1
  1975  00C9  1303               	bcf	3,6	;RP1=0, select bank1
  1976  00CA  00D5               	movwf	??_main^(0+128)
  1977  00CB  0855               	movf	??_main^(0+128),w
  1978  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1979  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1980  00CE  00AD               	movwf	___bmul@multiplicand
  1981  00CF  0861               	movf	_adc_cur_channel,w
  1982  00D0  120A  158A  2144  120A  118A  	fcall	___bmul
  1983  00D5  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  1984  00D6  0084               	movwf	4
  1985  00D7  1783               	bsf	3,7	;select IRP bank3
  1986  00D8  0800               	movf	0,w
  1987  00D9  1683               	bsf	3,5	;RP0=1, select bank3
  1988  00DA  1703               	bsf	3,6	;RP1=1, select bank3
  1989  00DB  00D7               	movwf	main@r_at_ch_instant_current_encoded_val^(0+384)
  1990  00DC  0A84               	incf	4,f
  1991  00DD  0800               	movf	0,w
  1992  00DE  00D8               	movwf	(main@r_at_ch_instant_current_encoded_val+1)^(0+384)
  1993  00DF  0A84               	incf	4,f
  1994  00E0  0800               	movf	0,w
  1995  00E1  00D9               	movwf	(main@r_at_ch_instant_current_encoded_val+2)^(0+384)
  1996  00E2  0A84               	incf	4,f
  1997  00E3  0800               	movf	0,w
  1998  00E4  00DA               	movwf	(main@r_at_ch_instant_current_encoded_val+3)^(0+384)
  1999                           
  2000                           ;main.c: 96: if(r_at_ch_instant_current_encoded_val > r_at_ch_peak_current_encoded_value
      +                           )
  2001  00E5  085A               	movf	(main@r_at_ch_instant_current_encoded_val+3)^(0+384),w
  2002  00E6  0266               	subwf	(main@r_at_ch_peak_current_encoded_value+3)^(0+384),w
  2003  00E7  1D03               	skipz
  2004  00E8  28F3               	goto	u3395
  2005  00E9  0859               	movf	(main@r_at_ch_instant_current_encoded_val+2)^(0+384),w
  2006  00EA  0265               	subwf	(main@r_at_ch_peak_current_encoded_value+2)^(0+384),w
  2007  00EB  1D03               	skipz
  2008  00EC  28F3               	goto	u3395
  2009  00ED  0858               	movf	(main@r_at_ch_instant_current_encoded_val+1)^(0+384),w
  2010  00EE  0264               	subwf	(main@r_at_ch_peak_current_encoded_value+1)^(0+384),w
  2011  00EF  1D03               	skipz
  2012  00F0  28F3               	goto	u3395
  2013  00F1  0857               	movf	main@r_at_ch_instant_current_encoded_val^(0+384),w
  2014  00F2  0263               	subwf	main@r_at_ch_peak_current_encoded_value^(0+384),w
  2015  00F3                     u3395:	
  2016  00F3  1803               	skipnc
  2017  00F4  28FD               	goto	l292
  2018                           
  2019                           ;main.c: 97: {
  2020                           ;main.c: 98: r_at_ch_peak_current_encoded_value = r_at_ch_instant_current_encoded_val;
  2021  00F5  085A               	movf	(main@r_at_ch_instant_current_encoded_val+3)^(0+384),w
  2022  00F6  00E6               	movwf	(main@r_at_ch_peak_current_encoded_value+3)^(0+384)
  2023  00F7  0859               	movf	(main@r_at_ch_instant_current_encoded_val+2)^(0+384),w
  2024  00F8  00E5               	movwf	(main@r_at_ch_peak_current_encoded_value+2)^(0+384)
  2025  00F9  0858               	movf	(main@r_at_ch_instant_current_encoded_val+1)^(0+384),w
  2026  00FA  00E4               	movwf	(main@r_at_ch_peak_current_encoded_value+1)^(0+384)
  2027  00FB  0857               	movf	main@r_at_ch_instant_current_encoded_val^(0+384),w
  2028  00FC  00E3               	movwf	main@r_at_ch_peak_current_encoded_value^(0+384)
  2029  00FD                     l292:	
  2030  00FD  3001               	movlw	1
  2031  00FE  07DF               	addwf	main@i^(0+384),f
  2032  00FF  3000               	movlw	0
  2033  0100  1803               	skipnc
  2034  0101  3001               	movlw	1
  2035  0102  07E0               	addwf	(main@i+1)^(0+384),f
  2036  0103  3000               	movlw	0
  2037  0104  1803               	skipnc
  2038  0105  3001               	movlw	1
  2039  0106  07E1               	addwf	(main@i+2)^(0+384),f
  2040  0107  3000               	movlw	0
  2041  0108  1803               	skipnc
  2042  0109  3001               	movlw	1
  2043  010A  07E2               	addwf	(main@i+3)^(0+384),f
  2044  010B  0862               	movf	(main@i+3)^(0+384),w
  2045  010C  1D03               	btfss	3,2
  2046  010D  291B               	goto	l3540
  2047  010E  0861               	movf	(main@i+2)^(0+384),w
  2048  010F  1D03               	btfss	3,2
  2049  0110  291B               	goto	l3540
  2050  0111  3001               	movlw	1
  2051  0112  0260               	subwf	(main@i+1)^(0+384),w
  2052  0113  1D03               	skipz
  2053  0114  2919               	goto	u3403
  2054  0115  3090               	movlw	144
  2055  0116  025F               	subwf	main@i^(0+384),w
  2056  0117  1D03               	skipz
  2057  0118  2919               	goto	u3403
  2058  0119                     u3403:	
  2059  0119  1C03               	btfss	3,0
  2060  011A  28BB               	goto	l3528
  2061  011B                     l3540:	
  2062                           
  2063                           ;main.c: 99: }
  2064                           ;main.c: 100: }
  2065                           ;main.c: 101: Encoded_To_Actual_Analog_Val_Calc(r_at_ch_peak_current_encoded_value, ((5U
      +                          ) - (0U)), (0U), &r_at_ch_peak_current_int, &r_at_ch_peak_current_frac );
  2066  011B  0866               	movf	(main@r_at_ch_peak_current_encoded_value+3)^(0+384),w
  2067  011C  1683               	bsf	3,5	;RP0=1, select bank1
  2068  011D  1303               	bcf	3,6	;RP1=0, select bank1
  2069  011E  00A3               	movwf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+3)^(0+128)
  2070  011F  1683               	bsf	3,5	;RP0=1, select bank3
  2071  0120  1703               	bsf	3,6	;RP1=1, select bank3
  2072  0121  0865               	movf	(main@r_at_ch_peak_current_encoded_value+2)^(0+384),w
  2073  0122  1683               	bsf	3,5	;RP0=1, select bank1
  2074  0123  1303               	bcf	3,6	;RP1=0, select bank1
  2075  0124  00A2               	movwf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+2)^(0+128)
  2076  0125  1683               	bsf	3,5	;RP0=1, select bank3
  2077  0126  1703               	bsf	3,6	;RP1=1, select bank3
  2078  0127  0864               	movf	(main@r_at_ch_peak_current_encoded_value+1)^(0+384),w
  2079  0128  1683               	bsf	3,5	;RP0=1, select bank1
  2080  0129  1303               	bcf	3,6	;RP1=0, select bank1
  2081  012A  00A1               	movwf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+1)^(0+128)
  2082  012B  1683               	bsf	3,5	;RP0=1, select bank3
  2083  012C  1703               	bsf	3,6	;RP1=1, select bank3
  2084  012D  0863               	movf	main@r_at_ch_peak_current_encoded_value^(0+384),w
  2085  012E  1683               	bsf	3,5	;RP0=1, select bank1
  2086  012F  1303               	bcf	3,6	;RP1=0, select bank1
  2087  0130  00A0               	movwf	Encoded_To_Actual_Analog_Val_Calc@adc_value^(0+128)
  2088  0131  3000               	movlw	0
  2089  0132  00A7               	movwf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+3)^(0+128)
  2090  0133  3000               	movlw	0
  2091  0134  00A6               	movwf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+2)^(0+128)
  2092  0135  3000               	movlw	0
  2093  0136  00A5               	movwf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+1)^(0+128)
  2094  0137  3005               	movlw	5
  2095  0138  00A4               	movwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val^(0+128)
  2096  0139  3000               	movlw	0
  2097  013A  00AB               	movwf	(Encoded_To_Actual_Analog_Val_Calc@min_analog_val+3)^(0+128)
  2098  013B  3000               	movlw	0
  2099  013C  00AA               	movwf	(Encoded_To_Actual_Analog_Val_Calc@min_analog_val+2)^(0+128)
  2100  013D  3000               	movlw	0
  2101  013E  00A9               	movwf	(Encoded_To_Actual_Analog_Val_Calc@min_analog_val+1)^(0+128)
  2102  013F  3000               	movlw	0
  2103  0140  00A8               	movwf	Encoded_To_Actual_Analog_Val_Calc@min_analog_val^(0+128)
  2104  0141  30E7               	movlw	(low (main@r_at_ch_peak_current_int| (0+256)))& (0+255)
  2105  0142  00D5               	movwf	??_main^(0+128)
  2106  0143  0855               	movf	??_main^(0+128),w
  2107  0144  00AC               	movwf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int^(0+128)
  2108  0145  30EB               	movlw	(low (main@r_at_ch_peak_current_frac| (0+256)))& (0+255)
  2109  0146  00D6               	movwf	(??_main+1)^(0+128)
  2110  0147  0856               	movf	(??_main+1)^(0+128),w
  2111  0148  00AD               	movwf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac^(0+128)
  2112  0149  120A  158A  2555  120A  118A  	fcall	_Encoded_To_Actual_Analog_Val_Calc
  2113                           
  2114                           ;main.c: 117: temp_int = r_at_ch_peak_current_int * 2;
  2115  014E  1003               	clrc
  2116  014F  1683               	bsf	3,5	;RP0=1, select bank3
  2117  0150  1703               	bsf	3,6	;RP1=1, select bank3
  2118  0151  0D67               	rlf	main@r_at_ch_peak_current_int^(0+384),w
  2119  0152  1283               	bcf	3,5	;RP0=0, select bank2
  2120  0153  1703               	bsf	3,6	;RP1=1, select bank2
  2121  0154  00C4               	movwf	main@temp_int^(0+256)
  2122  0155  1683               	bsf	3,5	;RP0=1, select bank3
  2123  0156  1703               	bsf	3,6	;RP1=1, select bank3
  2124  0157  0D68               	rlf	(main@r_at_ch_peak_current_int+1)^(0+384),w
  2125  0158  1283               	bcf	3,5	;RP0=0, select bank2
  2126  0159  1703               	bsf	3,6	;RP1=1, select bank2
  2127  015A  00C5               	movwf	(main@temp_int+1)^(0+256)
  2128  015B  1683               	bsf	3,5	;RP0=1, select bank3
  2129  015C  1703               	bsf	3,6	;RP1=1, select bank3
  2130  015D  0D69               	rlf	(main@r_at_ch_peak_current_int+2)^(0+384),w
  2131  015E  1283               	bcf	3,5	;RP0=0, select bank2
  2132  015F  1703               	bsf	3,6	;RP1=1, select bank2
  2133  0160  00C6               	movwf	(main@temp_int+2)^(0+256)
  2134  0161  1683               	bsf	3,5	;RP0=1, select bank3
  2135  0162  1703               	bsf	3,6	;RP1=1, select bank3
  2136  0163  0D6A               	rlf	(main@r_at_ch_peak_current_int+3)^(0+384),w
  2137  0164  1283               	bcf	3,5	;RP0=0, select bank2
  2138  0165  1703               	bsf	3,6	;RP1=1, select bank2
  2139  0166  00C7               	movwf	(main@temp_int+3)^(0+256)
  2140                           
  2141                           ;main.c: 118: temp_frac = (r_at_ch_peak_current_frac /10) * 2;
  2142  0167  3000               	movlw	0
  2143  0168  1283               	bcf	3,5	;RP0=0, select bank0
  2144  0169  1303               	bcf	3,6	;RP1=0, select bank0
  2145  016A  00B0               	movwf	___lldiv@divisor+3
  2146  016B  3000               	movlw	0
  2147  016C  00AF               	movwf	___lldiv@divisor+2
  2148  016D  3000               	movlw	0
  2149  016E  00AE               	movwf	___lldiv@divisor+1
  2150  016F  300A               	movlw	10
  2151  0170  00AD               	movwf	___lldiv@divisor
  2152  0171  1683               	bsf	3,5	;RP0=1, select bank3
  2153  0172  1703               	bsf	3,6	;RP1=1, select bank3
  2154  0173  086E               	movf	(main@r_at_ch_peak_current_frac+3)^(0+384),w
  2155  0174  1283               	bcf	3,5	;RP0=0, select bank0
  2156  0175  1303               	bcf	3,6	;RP1=0, select bank0
  2157  0176  00B4               	movwf	___lldiv@dividend+3
  2158  0177  1683               	bsf	3,5	;RP0=1, select bank3
  2159  0178  1703               	bsf	3,6	;RP1=1, select bank3
  2160  0179  086D               	movf	(main@r_at_ch_peak_current_frac+2)^(0+384),w
  2161  017A  1283               	bcf	3,5	;RP0=0, select bank0
  2162  017B  1303               	bcf	3,6	;RP1=0, select bank0
  2163  017C  00B3               	movwf	___lldiv@dividend+2
  2164  017D  1683               	bsf	3,5	;RP0=1, select bank3
  2165  017E  1703               	bsf	3,6	;RP1=1, select bank3
  2166  017F  086C               	movf	(main@r_at_ch_peak_current_frac+1)^(0+384),w
  2167  0180  1283               	bcf	3,5	;RP0=0, select bank0
  2168  0181  1303               	bcf	3,6	;RP1=0, select bank0
  2169  0182  00B2               	movwf	___lldiv@dividend+1
  2170  0183  1683               	bsf	3,5	;RP0=1, select bank3
  2171  0184  1703               	bsf	3,6	;RP1=1, select bank3
  2172  0185  086B               	movf	main@r_at_ch_peak_current_frac^(0+384),w
  2173  0186  1283               	bcf	3,5	;RP0=0, select bank0
  2174  0187  1303               	bcf	3,6	;RP1=0, select bank0
  2175  0188  00B1               	movwf	___lldiv@dividend
  2176  0189  120A  118A  2760  120A  118A  	fcall	___lldiv
  2177  018E  1003               	clrc
  2178  018F  1283               	bcf	3,5	;RP0=0, select bank0
  2179  0190  1303               	bcf	3,6	;RP1=0, select bank0
  2180  0191  0D2D               	rlf	?___lldiv,w
  2181  0192  1283               	bcf	3,5	;RP0=0, select bank2
  2182  0193  1703               	bsf	3,6	;RP1=1, select bank2
  2183  0194  00C8               	movwf	main@temp_frac^(0+256)
  2184  0195  1283               	bcf	3,5	;RP0=0, select bank0
  2185  0196  1303               	bcf	3,6	;RP1=0, select bank0
  2186  0197  0D2E               	rlf	?___lldiv+1,w
  2187  0198  1283               	bcf	3,5	;RP0=0, select bank2
  2188  0199  1703               	bsf	3,6	;RP1=1, select bank2
  2189  019A  00C9               	movwf	(main@temp_frac+1)^(0+256)
  2190  019B  1283               	bcf	3,5	;RP0=0, select bank0
  2191  019C  1303               	bcf	3,6	;RP1=0, select bank0
  2192  019D  0D2F               	rlf	?___lldiv+2,w
  2193  019E  1283               	bcf	3,5	;RP0=0, select bank2
  2194  019F  1703               	bsf	3,6	;RP1=1, select bank2
  2195  01A0  00CA               	movwf	(main@temp_frac+2)^(0+256)
  2196  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  2197  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  2198  01A3  0D30               	rlf	?___lldiv+3,w
  2199  01A4  1283               	bcf	3,5	;RP0=0, select bank2
  2200  01A5  1703               	bsf	3,6	;RP1=1, select bank2
  2201  01A6  00CB               	movwf	(main@temp_frac+3)^(0+256)
  2202                           
  2203                           ;main.c: 119: temp = temp_int + (temp_frac/100);
  2204  01A7  3000               	movlw	0
  2205  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  2206  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  2207  01AA  00B0               	movwf	___lldiv@divisor+3
  2208  01AB  3000               	movlw	0
  2209  01AC  00AF               	movwf	___lldiv@divisor+2
  2210  01AD  3000               	movlw	0
  2211  01AE  00AE               	movwf	___lldiv@divisor+1
  2212  01AF  3064               	movlw	100
  2213  01B0  00AD               	movwf	___lldiv@divisor
  2214  01B1  1283               	bcf	3,5	;RP0=0, select bank2
  2215  01B2  1703               	bsf	3,6	;RP1=1, select bank2
  2216  01B3  084B               	movf	(main@temp_frac+3)^(0+256),w
  2217  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  2218  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  2219  01B6  00B4               	movwf	___lldiv@dividend+3
  2220  01B7  1283               	bcf	3,5	;RP0=0, select bank2
  2221  01B8  1703               	bsf	3,6	;RP1=1, select bank2
  2222  01B9  084A               	movf	(main@temp_frac+2)^(0+256),w
  2223  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2224  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  2225  01BC  00B3               	movwf	___lldiv@dividend+2
  2226  01BD  1283               	bcf	3,5	;RP0=0, select bank2
  2227  01BE  1703               	bsf	3,6	;RP1=1, select bank2
  2228  01BF  0849               	movf	(main@temp_frac+1)^(0+256),w
  2229  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  2230  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  2231  01C2  00B2               	movwf	___lldiv@dividend+1
  2232  01C3  1283               	bcf	3,5	;RP0=0, select bank2
  2233  01C4  1703               	bsf	3,6	;RP1=1, select bank2
  2234  01C5  0848               	movf	main@temp_frac^(0+256),w
  2235  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  2236  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  2237  01C8  00B1               	movwf	___lldiv@dividend
  2238  01C9  120A  118A  2760  120A  118A  	fcall	___lldiv
  2239  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  2240  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  2241  01D0  082D               	movf	?___lldiv,w
  2242  01D1  1283               	bcf	3,5	;RP0=0, select bank2
  2243  01D2  1703               	bsf	3,6	;RP1=1, select bank2
  2244  01D3  0744               	addwf	main@temp_int^(0+256),w
  2245  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  2246  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  2247  01D6  00D5               	movwf	??_main^(0+128)
  2248  01D7  3000               	movlw	0
  2249  01D8  1803               	skipnc
  2250  01D9  3001               	movlw	1
  2251  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2252  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  2253  01DC  072E               	addwf	?___lldiv+1,w
  2254  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  2255  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  2256  01DF  01D7               	clrf	(??_main^(0+128)+2)
  2257  01E0  1803               	skipnc
  2258  01E1  0AD7               	incf	(??_main^(0+128)+2),f
  2259  01E2  1283               	bcf	3,5	;RP0=0, select bank2
  2260  01E3  1703               	bsf	3,6	;RP1=1, select bank2
  2261  01E4  0745               	addwf	(main@temp_int+1)^(0+256),w
  2262  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2263  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  2264  01E7  00D6               	movwf	(??_main^(0+128)+1)
  2265  01E8  1803               	skipnc
  2266  01E9  0AD7               	incf	(??_main^(0+128)+2),f
  2267  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2268  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  2269  01EC  082F               	movf	?___lldiv+2,w
  2270  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  2271  01EE  1303               	bcf	3,6	;RP1=0, select bank1
  2272  01EF  0757               	addwf	(??_main^(0+128)+2),w
  2273  01F0  01D8               	clrf	(??_main^(0+128)+3)
  2274  01F1  1803               	skipnc
  2275  01F2  0AD8               	incf	(??_main^(0+128)+3),f
  2276  01F3  1283               	bcf	3,5	;RP0=0, select bank2
  2277  01F4  1703               	bsf	3,6	;RP1=1, select bank2
  2278  01F5  0746               	addwf	(main@temp_int+2)^(0+256),w
  2279  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  2280  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  2281  01F8  00D7               	movwf	(??_main^(0+128)+2)
  2282  01F9  1803               	skipnc
  2283  01FA  0AD8               	incf	(??_main^(0+128)+3),f
  2284  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  2285  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  2286  01FD  0830               	movf	?___lldiv+3,w
  2287  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  2288  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  2289  0200  0758               	addwf	(??_main^(0+128)+3),w
  2290  0201  1283               	bcf	3,5	;RP0=0, select bank2
  2291  0202  1703               	bsf	3,6	;RP1=1, select bank2
  2292  0203  0747               	addwf	(main@temp_int+3)^(0+256),w
  2293  0204  1683               	bsf	3,5	;RP0=1, select bank1
  2294  0205  1303               	bcf	3,6	;RP1=0, select bank1
  2295  0206  00D8               	movwf	(??_main^(0+128)+3)
  2296  0207  0858               	movf	(??_main+3)^(0+128),w
  2297  0208  1683               	bsf	3,5	;RP0=1, select bank3
  2298  0209  1703               	bsf	3,6	;RP1=1, select bank3
  2299  020A  00D6               	movwf	(main@temp+3)^(0+384)
  2300  020B  1683               	bsf	3,5	;RP0=1, select bank1
  2301  020C  1303               	bcf	3,6	;RP1=0, select bank1
  2302  020D  0857               	movf	(??_main+2)^(0+128),w
  2303  020E  1683               	bsf	3,5	;RP0=1, select bank3
  2304  020F  1703               	bsf	3,6	;RP1=1, select bank3
  2305  0210  00D5               	movwf	(main@temp+2)^(0+384)
  2306  0211  1683               	bsf	3,5	;RP0=1, select bank1
  2307  0212  1303               	bcf	3,6	;RP1=0, select bank1
  2308  0213  0856               	movf	(??_main+1)^(0+128),w
  2309  0214  1683               	bsf	3,5	;RP0=1, select bank3
  2310  0215  1703               	bsf	3,6	;RP1=1, select bank3
  2311  0216  00D4               	movwf	(main@temp+1)^(0+384)
  2312  0217  1683               	bsf	3,5	;RP0=1, select bank1
  2313  0218  1303               	bcf	3,6	;RP1=0, select bank1
  2314  0219  0855               	movf	??_main^(0+128),w
  2315  021A  1683               	bsf	3,5	;RP0=1, select bank3
  2316  021B  1703               	bsf	3,6	;RP1=1, select bank3
  2317  021C  00D3               	movwf	main@temp^(0+384)
  2318                           
  2319                           ;main.c: 120: if(temp >= 1)
  2320  021D  0856               	movf	(main@temp+3)^(0+384),w
  2321  021E  0455               	iorwf	(main@temp+2)^(0+384),w
  2322  021F  0454               	iorwf	(main@temp+1)^(0+384),w
  2323  0220  0453               	iorwf	main@temp^(0+384),w
  2324  0221  1903               	skipnz
  2325  0222  2A53               	goto	l3552
  2326                           
  2327                           ;main.c: 121: {
  2328                           ;main.c: 122: temp -= 1;
  2329  0223  3001               	movlw	1
  2330  0224  1683               	bsf	3,5	;RP0=1, select bank1
  2331  0225  1303               	bcf	3,6	;RP1=0, select bank1
  2332  0226  00D5               	movwf	??_main^(0+128)
  2333  0227  3000               	movlw	0
  2334  0228  00D6               	movwf	(??_main^(0+128)+1)
  2335  0229  3000               	movlw	0
  2336  022A  00D7               	movwf	(??_main^(0+128)+2)
  2337  022B  3000               	movlw	0
  2338  022C  00D8               	movwf	(??_main^(0+128)+3)
  2339  022D  0855               	movf	??_main^(0+128),w
  2340  022E  1683               	bsf	3,5	;RP0=1, select bank3
  2341  022F  1703               	bsf	3,6	;RP1=1, select bank3
  2342  0230  02D3               	subwf	main@temp^(0+384),f
  2343  0231  1683               	bsf	3,5	;RP0=1, select bank1
  2344  0232  1303               	bcf	3,6	;RP1=0, select bank1
  2345  0233  0856               	movf	(??_main+1)^(0+128),w
  2346  0234  1C03               	skipc
  2347  0235  0F56               	incfsz	(??_main+1)^(0+128),w
  2348  0236  2A38               	goto	u3425
  2349  0237  2A3B               	goto	u3426
  2350  0238                     u3425:	
  2351  0238  1683               	bsf	3,5	;RP0=1, select bank3
  2352  0239  1703               	bsf	3,6	;RP1=1, select bank3
  2353  023A  02D4               	subwf	(main@temp+1)^(0+384),f
  2354  023B                     u3426:	
  2355  023B  1683               	bsf	3,5	;RP0=1, select bank1
  2356  023C  1303               	bcf	3,6	;RP1=0, select bank1
  2357  023D  0857               	movf	(??_main+2)^(0+128),w
  2358  023E  1C03               	skipc
  2359  023F  0F57               	incfsz	(??_main+2)^(0+128),w
  2360  0240  2A42               	goto	u3427
  2361  0241  2A45               	goto	u3428
  2362  0242                     u3427:	
  2363  0242  1683               	bsf	3,5	;RP0=1, select bank3
  2364  0243  1703               	bsf	3,6	;RP1=1, select bank3
  2365  0244  02D5               	subwf	(main@temp+2)^(0+384),f
  2366  0245                     u3428:	
  2367  0245  1683               	bsf	3,5	;RP0=1, select bank1
  2368  0246  1303               	bcf	3,6	;RP1=0, select bank1
  2369  0247  0858               	movf	(??_main+3)^(0+128),w
  2370  0248  1C03               	skipc
  2371  0249  0F58               	incfsz	(??_main+3)^(0+128),w
  2372  024A  2A4C               	goto	u3429
  2373  024B  2A4F               	goto	u3420
  2374  024C                     u3429:	
  2375  024C  1683               	bsf	3,5	;RP0=1, select bank3
  2376  024D  1703               	bsf	3,6	;RP1=1, select bank3
  2377  024E  02D6               	subwf	(main@temp+3)^(0+384),f
  2378  024F                     u3420:	
  2379  024F  1683               	bsf	3,5	;RP0=1, select bank1
  2380  0250  1303               	bcf	3,6	;RP1=0, select bank1
  2381  0251  1683               	bsf	3,5	;RP0=1, select bank3
  2382  0252  1703               	bsf	3,6	;RP1=1, select bank3
  2383  0253                     l3552:	
  2384                           
  2385                           ;main.c: 124: }
  2386                           ;main.c: 126: temp_int *= (35 * 707/1000);
  2387  0253  3000               	movlw	0
  2388  0254  1283               	bcf	3,5	;RP0=0, select bank0
  2389  0255  1303               	bcf	3,6	;RP1=0, select bank0
  2390  0256  00BE               	movwf	___lmul@multiplier+3
  2391  0257  3000               	movlw	0
  2392  0258  00BD               	movwf	___lmul@multiplier+2
  2393  0259  3000               	movlw	0
  2394  025A  00BC               	movwf	___lmul@multiplier+1
  2395  025B  3018               	movlw	24
  2396  025C  00BB               	movwf	___lmul@multiplier
  2397  025D  1283               	bcf	3,5	;RP0=0, select bank2
  2398  025E  1703               	bsf	3,6	;RP1=1, select bank2
  2399  025F  0847               	movf	(main@temp_int+3)^(0+256),w
  2400  0260  1283               	bcf	3,5	;RP0=0, select bank0
  2401  0261  1303               	bcf	3,6	;RP1=0, select bank0
  2402  0262  00C2               	movwf	___lmul@multiplicand+3
  2403  0263  1283               	bcf	3,5	;RP0=0, select bank2
  2404  0264  1703               	bsf	3,6	;RP1=1, select bank2
  2405  0265  0846               	movf	(main@temp_int+2)^(0+256),w
  2406  0266  1283               	bcf	3,5	;RP0=0, select bank0
  2407  0267  1303               	bcf	3,6	;RP1=0, select bank0
  2408  0268  00C1               	movwf	___lmul@multiplicand+2
  2409  0269  1283               	bcf	3,5	;RP0=0, select bank2
  2410  026A  1703               	bsf	3,6	;RP1=1, select bank2
  2411  026B  0845               	movf	(main@temp_int+1)^(0+256),w
  2412  026C  1283               	bcf	3,5	;RP0=0, select bank0
  2413  026D  1303               	bcf	3,6	;RP1=0, select bank0
  2414  026E  00C0               	movwf	___lmul@multiplicand+1
  2415  026F  1283               	bcf	3,5	;RP0=0, select bank2
  2416  0270  1703               	bsf	3,6	;RP1=1, select bank2
  2417  0271  0844               	movf	main@temp_int^(0+256),w
  2418  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0273  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0274  00BF               	movwf	___lmul@multiplicand
  2421  0275  120A  158A  219F  120A  118A  	fcall	___lmul
  2422  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2423  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2424  027C  083E               	movf	?___lmul+3,w
  2425  027D  1283               	bcf	3,5	;RP0=0, select bank2
  2426  027E  1703               	bsf	3,6	;RP1=1, select bank2
  2427  027F  00C7               	movwf	(main@temp_int+3)^(0+256)
  2428  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2429  0281  1303               	bcf	3,6	;RP1=0, select bank0
  2430  0282  083D               	movf	?___lmul+2,w
  2431  0283  1283               	bcf	3,5	;RP0=0, select bank2
  2432  0284  1703               	bsf	3,6	;RP1=1, select bank2
  2433  0285  00C6               	movwf	(main@temp_int+2)^(0+256)
  2434  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2436  0288  083C               	movf	?___lmul+1,w
  2437  0289  1283               	bcf	3,5	;RP0=0, select bank2
  2438  028A  1703               	bsf	3,6	;RP1=1, select bank2
  2439  028B  00C5               	movwf	(main@temp_int+1)^(0+256)
  2440  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2441  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2442  028E  083B               	movf	?___lmul,w
  2443  028F  1283               	bcf	3,5	;RP0=0, select bank2
  2444  0290  1703               	bsf	3,6	;RP1=1, select bank2
  2445  0291  00C4               	movwf	main@temp_int^(0+256)
  2446                           
  2447                           ;main.c: 128: temp_frac *= (35 * 707/1000);
  2448  0292  3000               	movlw	0
  2449  0293  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0294  1303               	bcf	3,6	;RP1=0, select bank0
  2451  0295  00BE               	movwf	___lmul@multiplier+3
  2452  0296  3000               	movlw	0
  2453  0297  00BD               	movwf	___lmul@multiplier+2
  2454  0298  3000               	movlw	0
  2455  0299  00BC               	movwf	___lmul@multiplier+1
  2456  029A  3018               	movlw	24
  2457  029B  00BB               	movwf	___lmul@multiplier
  2458  029C  1283               	bcf	3,5	;RP0=0, select bank2
  2459  029D  1703               	bsf	3,6	;RP1=1, select bank2
  2460  029E  084B               	movf	(main@temp_frac+3)^(0+256),w
  2461  029F  1283               	bcf	3,5	;RP0=0, select bank0
  2462  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  2463  02A1  00C2               	movwf	___lmul@multiplicand+3
  2464  02A2  1283               	bcf	3,5	;RP0=0, select bank2
  2465  02A3  1703               	bsf	3,6	;RP1=1, select bank2
  2466  02A4  084A               	movf	(main@temp_frac+2)^(0+256),w
  2467  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  2468  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  2469  02A7  00C1               	movwf	___lmul@multiplicand+2
  2470  02A8  1283               	bcf	3,5	;RP0=0, select bank2
  2471  02A9  1703               	bsf	3,6	;RP1=1, select bank2
  2472  02AA  0849               	movf	(main@temp_frac+1)^(0+256),w
  2473  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  2474  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  2475  02AD  00C0               	movwf	___lmul@multiplicand+1
  2476  02AE  1283               	bcf	3,5	;RP0=0, select bank2
  2477  02AF  1703               	bsf	3,6	;RP1=1, select bank2
  2478  02B0  0848               	movf	main@temp_frac^(0+256),w
  2479  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  2480  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  2481  02B3  00BF               	movwf	___lmul@multiplicand
  2482  02B4  120A  158A  219F  120A  118A  	fcall	___lmul
  2483  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  2484  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  2485  02BB  083E               	movf	?___lmul+3,w
  2486  02BC  1283               	bcf	3,5	;RP0=0, select bank2
  2487  02BD  1703               	bsf	3,6	;RP1=1, select bank2
  2488  02BE  00CB               	movwf	(main@temp_frac+3)^(0+256)
  2489  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  2490  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  2491  02C1  083D               	movf	?___lmul+2,w
  2492  02C2  1283               	bcf	3,5	;RP0=0, select bank2
  2493  02C3  1703               	bsf	3,6	;RP1=1, select bank2
  2494  02C4  00CA               	movwf	(main@temp_frac+2)^(0+256)
  2495  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2496  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  2497  02C7  083C               	movf	?___lmul+1,w
  2498  02C8  1283               	bcf	3,5	;RP0=0, select bank2
  2499  02C9  1703               	bsf	3,6	;RP1=1, select bank2
  2500  02CA  00C9               	movwf	(main@temp_frac+1)^(0+256)
  2501  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  2502  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  2503  02CD  083B               	movf	?___lmul,w
  2504  02CE  1283               	bcf	3,5	;RP0=0, select bank2
  2505  02CF  1703               	bsf	3,6	;RP1=1, select bank2
  2506  02D0  00C8               	movwf	main@temp_frac^(0+256)
  2507                           
  2508                           ;main.c: 130: calc_r_source_rms_current_in_milli_amp = (temp_int + (temp_frac/100)) * 20
      +                          ;
  2509  02D1  3000               	movlw	0
  2510  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2511  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  2512  02D4  00B0               	movwf	___lldiv@divisor+3
  2513  02D5  3000               	movlw	0
  2514  02D6  00AF               	movwf	___lldiv@divisor+2
  2515  02D7  3000               	movlw	0
  2516  02D8  00AE               	movwf	___lldiv@divisor+1
  2517  02D9  3064               	movlw	100
  2518  02DA  00AD               	movwf	___lldiv@divisor
  2519  02DB  1283               	bcf	3,5	;RP0=0, select bank2
  2520  02DC  1703               	bsf	3,6	;RP1=1, select bank2
  2521  02DD  084B               	movf	(main@temp_frac+3)^(0+256),w
  2522  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2523  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2524  02E0  00B4               	movwf	___lldiv@dividend+3
  2525  02E1  1283               	bcf	3,5	;RP0=0, select bank2
  2526  02E2  1703               	bsf	3,6	;RP1=1, select bank2
  2527  02E3  084A               	movf	(main@temp_frac+2)^(0+256),w
  2528  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2529  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2530  02E6  00B3               	movwf	___lldiv@dividend+2
  2531  02E7  1283               	bcf	3,5	;RP0=0, select bank2
  2532  02E8  1703               	bsf	3,6	;RP1=1, select bank2
  2533  02E9  0849               	movf	(main@temp_frac+1)^(0+256),w
  2534  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2535  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  2536  02EC  00B2               	movwf	___lldiv@dividend+1
  2537  02ED  1283               	bcf	3,5	;RP0=0, select bank2
  2538  02EE  1703               	bsf	3,6	;RP1=1, select bank2
  2539  02EF  0848               	movf	main@temp_frac^(0+256),w
  2540  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  2541  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  2542  02F2  00B1               	movwf	___lldiv@dividend
  2543  02F3  120A  118A  2760  120A  118A  	fcall	___lldiv
  2544  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2545  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  2546  02FA  082D               	movf	?___lldiv,w
  2547  02FB  1283               	bcf	3,5	;RP0=0, select bank2
  2548  02FC  1703               	bsf	3,6	;RP1=1, select bank2
  2549  02FD  0744               	addwf	main@temp_int^(0+256),w
  2550  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  2551  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  2552  0300  00D5               	movwf	??_main^(0+128)
  2553  0301  3000               	movlw	0
  2554  0302  1803               	skipnc
  2555  0303  3001               	movlw	1
  2556  0304  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0305  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0306  072E               	addwf	?___lldiv+1,w
  2559  0307  1683               	bsf	3,5	;RP0=1, select bank1
  2560  0308  1303               	bcf	3,6	;RP1=0, select bank1
  2561  0309  01D7               	clrf	(??_main^(0+128)+2)
  2562  030A  1803               	skipnc
  2563  030B  0AD7               	incf	(??_main^(0+128)+2),f
  2564  030C  1283               	bcf	3,5	;RP0=0, select bank2
  2565  030D  1703               	bsf	3,6	;RP1=1, select bank2
  2566  030E  0745               	addwf	(main@temp_int+1)^(0+256),w
  2567  030F  1683               	bsf	3,5	;RP0=1, select bank1
  2568  0310  1303               	bcf	3,6	;RP1=0, select bank1
  2569  0311  00D6               	movwf	(??_main^(0+128)+1)
  2570  0312  1803               	skipnc
  2571  0313  0AD7               	incf	(??_main^(0+128)+2),f
  2572  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2573  0315  1303               	bcf	3,6	;RP1=0, select bank0
  2574  0316  082F               	movf	?___lldiv+2,w
  2575  0317  1683               	bsf	3,5	;RP0=1, select bank1
  2576  0318  1303               	bcf	3,6	;RP1=0, select bank1
  2577  0319  0757               	addwf	(??_main^(0+128)+2),w
  2578  031A  01D8               	clrf	(??_main^(0+128)+3)
  2579  031B  1803               	skipnc
  2580  031C  0AD8               	incf	(??_main^(0+128)+3),f
  2581  031D  1283               	bcf	3,5	;RP0=0, select bank2
  2582  031E  1703               	bsf	3,6	;RP1=1, select bank2
  2583  031F  0746               	addwf	(main@temp_int+2)^(0+256),w
  2584  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2585  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2586  0322  00D7               	movwf	(??_main^(0+128)+2)
  2587  0323  1803               	skipnc
  2588  0324  0AD8               	incf	(??_main^(0+128)+3),f
  2589  0325  1283               	bcf	3,5	;RP0=0, select bank0
  2590  0326  1303               	bcf	3,6	;RP1=0, select bank0
  2591  0327  0830               	movf	?___lldiv+3,w
  2592  0328  1683               	bsf	3,5	;RP0=1, select bank1
  2593  0329  1303               	bcf	3,6	;RP1=0, select bank1
  2594  032A  0758               	addwf	(??_main^(0+128)+3),w
  2595  032B  1283               	bcf	3,5	;RP0=0, select bank2
  2596  032C  1703               	bsf	3,6	;RP1=1, select bank2
  2597  032D  0747               	addwf	(main@temp_int+3)^(0+256),w
  2598  032E  1683               	bsf	3,5	;RP0=1, select bank1
  2599  032F  1303               	bcf	3,6	;RP1=0, select bank1
  2600  0330  00D8               	movwf	(??_main^(0+128)+3)
  2601  0331  0858               	movf	(??_main+3)^(0+128),w
  2602  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0334  00BE               	movwf	___lmul@multiplier+3
  2605  0335  1683               	bsf	3,5	;RP0=1, select bank1
  2606  0336  1303               	bcf	3,6	;RP1=0, select bank1
  2607  0337  0857               	movf	(??_main+2)^(0+128),w
  2608  0338  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0339  1303               	bcf	3,6	;RP1=0, select bank0
  2610  033A  00BD               	movwf	___lmul@multiplier+2
  2611  033B  1683               	bsf	3,5	;RP0=1, select bank1
  2612  033C  1303               	bcf	3,6	;RP1=0, select bank1
  2613  033D  0856               	movf	(??_main+1)^(0+128),w
  2614  033E  1283               	bcf	3,5	;RP0=0, select bank0
  2615  033F  1303               	bcf	3,6	;RP1=0, select bank0
  2616  0340  00BC               	movwf	___lmul@multiplier+1
  2617  0341  1683               	bsf	3,5	;RP0=1, select bank1
  2618  0342  1303               	bcf	3,6	;RP1=0, select bank1
  2619  0343  0855               	movf	??_main^(0+128),w
  2620  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0346  00BB               	movwf	___lmul@multiplier
  2623  0347  3000               	movlw	0
  2624  0348  00C2               	movwf	___lmul@multiplicand+3
  2625  0349  3000               	movlw	0
  2626  034A  00C1               	movwf	___lmul@multiplicand+2
  2627  034B  3000               	movlw	0
  2628  034C  00C0               	movwf	___lmul@multiplicand+1
  2629  034D  3014               	movlw	20
  2630  034E  00BF               	movwf	___lmul@multiplicand
  2631  034F  120A  158A  219F  120A  118A  	fcall	___lmul
  2632  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0356  083E               	movf	?___lmul+3,w
  2635  0357  1683               	bsf	3,5	;RP0=1, select bank3
  2636  0358  1703               	bsf	3,6	;RP1=1, select bank3
  2637  0359  00DE               	movwf	(main@calc_r_source_rms_current_in_milli_amp+3)^(0+384)
  2638  035A  1283               	bcf	3,5	;RP0=0, select bank0
  2639  035B  1303               	bcf	3,6	;RP1=0, select bank0
  2640  035C  083D               	movf	?___lmul+2,w
  2641  035D  1683               	bsf	3,5	;RP0=1, select bank3
  2642  035E  1703               	bsf	3,6	;RP1=1, select bank3
  2643  035F  00DD               	movwf	(main@calc_r_source_rms_current_in_milli_amp+2)^(0+384)
  2644  0360  1283               	bcf	3,5	;RP0=0, select bank0
  2645  0361  1303               	bcf	3,6	;RP1=0, select bank0
  2646  0362  083C               	movf	?___lmul+1,w
  2647  0363  1683               	bsf	3,5	;RP0=1, select bank3
  2648  0364  1703               	bsf	3,6	;RP1=1, select bank3
  2649  0365  00DC               	movwf	(main@calc_r_source_rms_current_in_milli_amp+1)^(0+384)
  2650  0366  1283               	bcf	3,5	;RP0=0, select bank0
  2651  0367  1303               	bcf	3,6	;RP1=0, select bank0
  2652  0368  083B               	movf	?___lmul,w
  2653  0369  1683               	bsf	3,5	;RP0=1, select bank3
  2654  036A  1703               	bsf	3,6	;RP1=1, select bank3
  2655  036B  00DB               	movwf	main@calc_r_source_rms_current_in_milli_amp^(0+384)
  2656                           
  2657                           ;main.c: 141: if(calc_r_source_rms_current_in_milli_amp < 2660)
  2658  036C  085E               	movf	(main@calc_r_source_rms_current_in_milli_amp+3)^(0+384),w
  2659  036D  1D03               	btfss	3,2
  2660  036E  2B9B               	goto	l3570
  2661  036F  085D               	movf	(main@calc_r_source_rms_current_in_milli_amp+2)^(0+384),w
  2662  0370  1D03               	btfss	3,2
  2663  0371  2B9B               	goto	l3570
  2664  0372  300A               	movlw	10
  2665  0373  025C               	subwf	(main@calc_r_source_rms_current_in_milli_amp+1)^(0+384),w
  2666  0374  1D03               	skipz
  2667  0375  2B7A               	goto	u3433
  2668  0376  3064               	movlw	100
  2669  0377  025B               	subwf	main@calc_r_source_rms_current_in_milli_amp^(0+384),w
  2670  0378  1D03               	skipz
  2671  0379  2B7A               	goto	u3433
  2672  037A                     u3433:	
  2673  037A  1803               	btfsc	3,0
  2674  037B  2B9B               	goto	l3570
  2675                           
  2676                           ;main.c: 142: {
  2677                           ;main.c: 144: RB2 = (1);
  2678  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2679  037D  1303               	bcf	3,6	;RP1=0, select bank0
  2680  037E  1506               	bsf	6,2	;volatile
  2681                           
  2682                           ;main.c: 145: RB3 = (0);
  2683  037F  1186               	bcf	6,3	;volatile
  2684                           
  2685                           ;main.c: 146: fault_occured_flag = ('y');
  2686  0380  3079               	movlw	121
  2687  0381  1683               	bsf	3,5	;RP0=1, select bank1
  2688  0382  1303               	bcf	3,6	;RP1=0, select bank1
  2689  0383  00D5               	movwf	??_main^(0+128)
  2690  0384  0855               	movf	??_main^(0+128),w
  2691  0385  1683               	bsf	3,5	;RP0=1, select bank3
  2692  0386  1703               	bsf	3,6	;RP1=1, select bank3
  2693  0387  00D2               	movwf	main@fault_occured_flag^(0+384)
  2694                           
  2695                           ;main.c: 147: if(cur_disp_block != 1)
  2696  0388  1283               	bcf	3,5	;RP0=0, select bank2
  2697  0389  1703               	bsf	3,6	;RP1=1, select bank2
  2698  038A  034C               	decf	main@cur_disp_block^(0+256),w
  2699  038B  044D               	iorwf	(main@cur_disp_block+1)^(0+256),w
  2700  038C  1903               	btfsc	3,2
  2701  038D  2899               	goto	l3520
  2702                           
  2703                           ;main.c: 148: {
  2704                           ;main.c: 149: UART_Transmit_Str("ERR: R RMS CURRENT < MIN LIMIT \r");
  2705  038E  3033               	movlw	low (STR_4| (0+32768))
  2706  038F  1283               	bcf	3,5	;RP0=0, select bank0
  2707  0390  1303               	bcf	3,6	;RP1=0, select bank0
  2708  0391  00AE               	movwf	UART_Transmit_Str@transmit_str
  2709  0392  3091               	movlw	high (STR_4| (0+32768))
  2710  0393  00AF               	movwf	UART_Transmit_Str@transmit_str+1
  2711  0394  120A  158A  217A  120A  118A  	fcall	_UART_Transmit_Str
  2712                           
  2713                           ;main.c: 150: cur_disp_block = 1;
  2714  0399  3001               	movlw	1
  2715  039A  2BE5               	goto	L2
  2716  039B                     l3570:	
  2717                           ;main.c: 151: }
  2718                           ;main.c: 153: }
  2719                           
  2720                           
  2721                           ;main.c: 154: else
  2722                           ;main.c: 155: {
  2723                           ;main.c: 159: if(calc_r_source_rms_current_in_milli_amp > 4020)
  2724  039B  1683               	bsf	3,5	;RP0=1, select bank3
  2725  039C  1703               	bsf	3,6	;RP1=1, select bank3
  2726  039D  085E               	movf	(main@calc_r_source_rms_current_in_milli_amp+3)^(0+384),w
  2727  039E  1D03               	btfss	3,2
  2728  039F  2BAD               	goto	l3572
  2729  03A0  085D               	movf	(main@calc_r_source_rms_current_in_milli_amp+2)^(0+384),w
  2730  03A1  1D03               	btfss	3,2
  2731  03A2  2BAD               	goto	l3572
  2732  03A3  300F               	movlw	15
  2733  03A4  025C               	subwf	(main@calc_r_source_rms_current_in_milli_amp+1)^(0+384),w
  2734  03A5  1D03               	skipz
  2735  03A6  2BAB               	goto	u3453
  2736  03A7  30B5               	movlw	181
  2737  03A8  025B               	subwf	main@calc_r_source_rms_current_in_milli_amp^(0+384),w
  2738  03A9  1D03               	skipz
  2739  03AA  2BAB               	goto	u3453
  2740  03AB                     u3453:	
  2741  03AB  1C03               	btfss	3,0
  2742  03AC  2BCD               	goto	l297
  2743  03AD                     l3572:	
  2744                           
  2745                           ;main.c: 160: {
  2746                           ;main.c: 163: RB1 = (1);
  2747  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2748  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2749  03AF  1486               	bsf	6,1	;volatile
  2750                           
  2751                           ;main.c: 164: RB3 = (0);
  2752  03B0  1186               	bcf	6,3	;volatile
  2753                           
  2754                           ;main.c: 165: fault_occured_flag = ('y');
  2755  03B1  3079               	movlw	121
  2756  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  2757  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  2758  03B4  00D5               	movwf	??_main^(0+128)
  2759  03B5  0855               	movf	??_main^(0+128),w
  2760  03B6  1683               	bsf	3,5	;RP0=1, select bank3
  2761  03B7  1703               	bsf	3,6	;RP1=1, select bank3
  2762  03B8  00D2               	movwf	main@fault_occured_flag^(0+384)
  2763                           
  2764                           ;main.c: 166: if(cur_disp_block != 2)
  2765  03B9  3002               	movlw	2
  2766  03BA  1283               	bcf	3,5	;RP0=0, select bank2
  2767  03BB  1703               	bsf	3,6	;RP1=1, select bank2
  2768  03BC  064C               	xorwf	main@cur_disp_block^(0+256),w
  2769  03BD  044D               	iorwf	(main@cur_disp_block+1)^(0+256),w
  2770  03BE  1903               	btfsc	3,2
  2771  03BF  2899               	goto	l3520
  2772                           
  2773                           ;main.c: 167: {
  2774                           ;main.c: 168: UART_Transmit_Str("ERR: R RMS CURRENT > MAX LIMIT \r");
  2775  03C0  3054               	movlw	low (STR_5| (0+32768))
  2776  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  2777  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  2778  03C3  00AE               	movwf	UART_Transmit_Str@transmit_str
  2779  03C4  3091               	movlw	high (STR_5| (0+32768))
  2780  03C5  00AF               	movwf	UART_Transmit_Str@transmit_str+1
  2781  03C6  120A  158A  217A  120A  118A  	fcall	_UART_Transmit_Str
  2782                           
  2783                           ;main.c: 169: cur_disp_block = 2;
  2784  03CB  3002               	movlw	2
  2785  03CC  2BE5               	goto	L2
  2786  03CD                     l297:	
  2787                           ;main.c: 170: }
  2788                           ;main.c: 172: }
  2789                           
  2790                           
  2791                           ;main.c: 173: else
  2792                           ;main.c: 174: {
  2793                           ;main.c: 176: RB2 = (0);
  2794  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  2795  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2796  03CF  1106               	bcf	6,2	;volatile
  2797                           
  2798                           ;main.c: 177: RB1 = (0);
  2799  03D0  1086               	bcf	6,1	;volatile
  2800                           
  2801                           ;main.c: 178: RB3 = (1);
  2802  03D1  1586               	bsf	6,3	;volatile
  2803                           
  2804                           ;main.c: 179: if(cur_disp_block != 3)
  2805  03D2  3003               	movlw	3
  2806  03D3  1283               	bcf	3,5	;RP0=0, select bank2
  2807  03D4  1703               	bsf	3,6	;RP1=1, select bank2
  2808  03D5  064C               	xorwf	main@cur_disp_block^(0+256),w
  2809  03D6  044D               	iorwf	(main@cur_disp_block+1)^(0+256),w
  2810  03D7  1903               	btfsc	3,2
  2811  03D8  2899               	goto	l3520
  2812                           
  2813                           ;main.c: 180: {
  2814                           ;main.c: 181: UART_Transmit_Str("R RMS CURRENT within LIMIT \r");
  2815  03D9  3075               	movlw	low (STR_6| (0+32768))
  2816  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2817  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  2818  03DC  00AE               	movwf	UART_Transmit_Str@transmit_str
  2819  03DD  3091               	movlw	high (STR_6| (0+32768))
  2820  03DE  00AF               	movwf	UART_Transmit_Str@transmit_str+1
  2821  03DF  120A  158A  217A  120A  118A  	fcall	_UART_Transmit_Str
  2822                           
  2823                           ;main.c: 182: cur_disp_block = 3;
  2824  03E4  3003               	movlw	3
  2825  03E5                     L2:	
  2826  03E5  1283               	bcf	3,5	;RP0=0, select bank2
  2827  03E6  1703               	bsf	3,6	;RP1=1, select bank2
  2828  03E7  00CC               	movwf	main@cur_disp_block^(0+256)
  2829  03E8  3000               	movlw	0
  2830  03E9  00CD               	movwf	(main@cur_disp_block^(0+256)+1)
  2831  03EA  2899               	goto	l3520
  2832  03EB                     __end_of_main:	
  2833                           
  2834                           	psect	text1
  2835  0957                     __ptext1:	
  2836 ;; *************** function _UART_Init *****************
  2837 ;; Defined at:
  2838 ;;		line 33 in file "uart.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;		None
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2852 ;;      Params:         0       0       0       0       0
  2853 ;;      Locals:         0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0
  2855 ;;      Totals:         0       0       0       0       0
  2856 ;;Total ram usage:        0 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    2
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_main
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           
  2867                           ;psect for function _UART_Init
  2868  0957                     _UART_Init:	
  2869                           
  2870                           ;uart.c: 36: SPBRG = 32;
  2871                           
  2872                           ;incstack = 0
  2873                           ; Regs used in _UART_Init: [wreg]
  2874  0957  3020               	movlw	32
  2875  0958  1683               	bsf	3,5	;RP0=1, select bank1
  2876  0959  1303               	bcf	3,6	;RP1=0, select bank1
  2877  095A  0099               	movwf	25	;volatile
  2878                           
  2879                           ;uart.c: 37: BRG16 = 0 ;
  2880  095B  1683               	bsf	3,5	;RP0=1, select bank3
  2881  095C  1703               	bsf	3,6	;RP1=1, select bank3
  2882  095D  1187               	bcf	7,3	;volatile
  2883                           
  2884                           ;uart.c: 38: BRGH = 0;
  2885  095E  1683               	bsf	3,5	;RP0=1, select bank1
  2886  095F  1303               	bcf	3,6	;RP1=0, select bank1
  2887  0960  1118               	bcf	24,2	;volatile
  2888                           
  2889                           ;uart.c: 39: SPEN = 1;
  2890  0961  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0962  1303               	bcf	3,6	;RP1=0, select bank0
  2892  0963  1798               	bsf	24,7	;volatile
  2893                           
  2894                           ;uart.c: 40: SYNC = 0;
  2895  0964  1683               	bsf	3,5	;RP0=1, select bank1
  2896  0965  1303               	bcf	3,6	;RP1=0, select bank1
  2897  0966  1218               	bcf	24,4	;volatile
  2898                           
  2899                           ;uart.c: 41: CREN = 1;
  2900  0967  1283               	bcf	3,5	;RP0=0, select bank0
  2901  0968  1303               	bcf	3,6	;RP1=0, select bank0
  2902  0969  1618               	bsf	24,4	;volatile
  2903                           
  2904                           ;uart.c: 42: TXEN = 0;
  2905  096A  1683               	bsf	3,5	;RP0=1, select bank1
  2906  096B  1303               	bcf	3,6	;RP1=0, select bank1
  2907  096C  1298               	bcf	24,5	;volatile
  2908                           
  2909                           ;uart.c: 43: TXEN = 1;
  2910  096D  1698               	bsf	24,5	;volatile
  2911                           
  2912                           ;uart.c: 45: SREN = 0;
  2913  096E  1283               	bcf	3,5	;RP0=0, select bank0
  2914  096F  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0970  1298               	bcf	24,5	;volatile
  2916                           
  2917                           ;uart.c: 46: TXIE = 0;
  2918  0971  1683               	bsf	3,5	;RP0=1, select bank1
  2919  0972  1303               	bcf	3,6	;RP1=0, select bank1
  2920  0973  120C               	bcf	12,4	;volatile
  2921                           
  2922                           ;uart.c: 47: RCIE = 1;
  2923  0974  168C               	bsf	12,5	;volatile
  2924                           
  2925                           ;uart.c: 48: TX9 = 0;
  2926  0975  1318               	bcf	24,6	;volatile
  2927                           
  2928                           ;uart.c: 49: RX9 = 0;
  2929  0976  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0977  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0978  1318               	bcf	24,6	;volatile
  2932  0979  0008               	return
  2933  097A                     __end_of_UART_Init:	
  2934                           
  2935                           	psect	text2
  2936  0D55                     __ptext2:	
  2937 ;; *************** function _Encoded_To_Actual_Analog_Val_Calc *****************
  2938 ;; Defined at:
  2939 ;;		line 251 in file "adc.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  adc_value       4    0[BANK1 ] unsigned long 
  2942 ;;  full_scale_a    4    4[BANK1 ] unsigned long 
  2943 ;;  min_analog_v    4    8[BANK1 ] unsigned long 
  2944 ;;  analog_val_i    1   12[BANK1 ] const PTR unsigned long 
  2945 ;;		 -> main@r_at_ch_peak_current_int(4), 
  2946 ;;  analog_val_i    1   13[BANK1 ] const PTR unsigned long 
  2947 ;;		 -> main@r_at_ch_peak_current_frac(4), 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  remainder_va    4   34[BANK1 ] unsigned long 
  2950 ;;  remainder_va    4   30[BANK1 ] unsigned long 
  2951 ;;  remainder_va    4   26[BANK1 ] unsigned long 
  2952 ;;  temp_remaind    4   22[BANK1 ] unsigned long 
  2953 ;;  temp_val_1      4   18[BANK1 ] unsigned long 
  2954 ;;  temp_val_100    4    0        unsigned long 
  2955 ;;  temp_val_100    4    0        unsigned long 
  2956 ;;  temp_val_10     4    0        unsigned long 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2966 ;;      Params:         0       0      14       0       0
  2967 ;;      Locals:         0       0      20       0       0
  2968 ;;      Temps:          0       0       4       0       0
  2969 ;;      Totals:         0       0      38       0       0
  2970 ;;Total ram usage:       38 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    3
  2973 ;; This function calls:
  2974 ;;		___lldiv
  2975 ;;		___llmod
  2976 ;;		___lmul
  2977 ;; This function is called by:
  2978 ;;		_main
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function _Encoded_To_Actual_Analog_Val_Calc
  2984  0D55                     _Encoded_To_Actual_Analog_Val_Calc:	
  2985                           
  2986                           ;adc.c: 254: unsigned long temp_val_1, temp_val_10, temp_val_100, temp_val_1000, remaind
      +                          er_val, temp_remainder_val, remainder_val_1, remainder_val_10;
  2987                           ;adc.c: 258: if(full_scale_analog_val < 65 )
  2988                           
  2989                           ;incstack = 0
  2990                           ; Regs used in _Encoded_To_Actual_Analog_Val_Calc: [wreg-fsr0h+status,2+status,0+pclath+
      +                          cstack]
  2991  0D55  1683               	bsf	3,5	;RP0=1, select bank1
  2992  0D56  1303               	bcf	3,6	;RP1=0, select bank1
  2993  0D57  0827               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+3)^(0+128),w
  2994  0D58  1D03               	btfss	3,2
  2995  0D59  2FEC               	goto	l3376
  2996  0D5A  0826               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+2)^(0+128),w
  2997  0D5B  1D03               	btfss	3,2
  2998  0D5C  2FEC               	goto	l3376
  2999  0D5D  0825               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+1)^(0+128),w
  3000  0D5E  1D03               	btfss	3,2
  3001  0D5F  2FEC               	goto	l3376
  3002  0D60  3041               	movlw	65
  3003  0D61  0224               	subwf	Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val^(0+128),w
  3004  0D62  1D03               	skipz
  3005  0D63  2D64               	goto	u3263
  3006  0D64                     u3263:	
  3007  0D64  1803               	btfsc	3,0
  3008  0D65  2FEC               	goto	l3376
  3009                           
  3010                           ;adc.c: 259: {
  3011                           ;adc.c: 260: temp_val_1 = ((full_scale_analog_val * adc_value) / (1023UL)) ;
  3012  0D66  3000               	movlw	0
  3013  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  3014  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  3015  0D69  00B0               	movwf	___lldiv@divisor+3
  3016  0D6A  3000               	movlw	0
  3017  0D6B  00AF               	movwf	___lldiv@divisor+2
  3018  0D6C  3003               	movlw	3
  3019  0D6D  00AE               	movwf	___lldiv@divisor+1
  3020  0D6E  30FF               	movlw	255
  3021  0D6F  00AD               	movwf	___lldiv@divisor
  3022  0D70  1683               	bsf	3,5	;RP0=1, select bank1
  3023  0D71  1303               	bcf	3,6	;RP1=0, select bank1
  3024  0D72  0827               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+3)^(0+128),w
  3025  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  3026  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  3027  0D75  00BE               	movwf	___lmul@multiplier+3
  3028  0D76  1683               	bsf	3,5	;RP0=1, select bank1
  3029  0D77  1303               	bcf	3,6	;RP1=0, select bank1
  3030  0D78  0826               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+2)^(0+128),w
  3031  0D79  1283               	bcf	3,5	;RP0=0, select bank0
  3032  0D7A  1303               	bcf	3,6	;RP1=0, select bank0
  3033  0D7B  00BD               	movwf	___lmul@multiplier+2
  3034  0D7C  1683               	bsf	3,5	;RP0=1, select bank1
  3035  0D7D  1303               	bcf	3,6	;RP1=0, select bank1
  3036  0D7E  0825               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+1)^(0+128),w
  3037  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  3038  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  3039  0D81  00BC               	movwf	___lmul@multiplier+1
  3040  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  3041  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  3042  0D84  0824               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val^(0+128),w
  3043  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0D87  00BB               	movwf	___lmul@multiplier
  3046  0D88  1683               	bsf	3,5	;RP0=1, select bank1
  3047  0D89  1303               	bcf	3,6	;RP1=0, select bank1
  3048  0D8A  0823               	movf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+3)^(0+128),w
  3049  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  3050  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  3051  0D8D  00C2               	movwf	___lmul@multiplicand+3
  3052  0D8E  1683               	bsf	3,5	;RP0=1, select bank1
  3053  0D8F  1303               	bcf	3,6	;RP1=0, select bank1
  3054  0D90  0822               	movf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+2)^(0+128),w
  3055  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  3056  0D92  1303               	bcf	3,6	;RP1=0, select bank0
  3057  0D93  00C1               	movwf	___lmul@multiplicand+2
  3058  0D94  1683               	bsf	3,5	;RP0=1, select bank1
  3059  0D95  1303               	bcf	3,6	;RP1=0, select bank1
  3060  0D96  0821               	movf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+1)^(0+128),w
  3061  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  3062  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  3063  0D99  00C0               	movwf	___lmul@multiplicand+1
  3064  0D9A  1683               	bsf	3,5	;RP0=1, select bank1
  3065  0D9B  1303               	bcf	3,6	;RP1=0, select bank1
  3066  0D9C  0820               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value^(0+128),w
  3067  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  3068  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  3069  0D9F  00BF               	movwf	___lmul@multiplicand
  3070  0DA0  120A  158A  219F  120A  158A  	fcall	___lmul
  3071  0DA5  1283               	bcf	3,5	;RP0=0, select bank0
  3072  0DA6  1303               	bcf	3,6	;RP1=0, select bank0
  3073  0DA7  083E               	movf	?___lmul+3,w
  3074  0DA8  00B4               	movwf	___lldiv@dividend+3
  3075  0DA9  083D               	movf	?___lmul+2,w
  3076  0DAA  00B3               	movwf	___lldiv@dividend+2
  3077  0DAB  083C               	movf	?___lmul+1,w
  3078  0DAC  00B2               	movwf	___lldiv@dividend+1
  3079  0DAD  083B               	movf	?___lmul,w
  3080  0DAE  00B1               	movwf	___lldiv@dividend
  3081  0DAF  120A  118A  2760  120A  158A  	fcall	___lldiv
  3082  0DB4  1283               	bcf	3,5	;RP0=0, select bank0
  3083  0DB5  1303               	bcf	3,6	;RP1=0, select bank0
  3084  0DB6  0830               	movf	?___lldiv+3,w
  3085  0DB7  1683               	bsf	3,5	;RP0=1, select bank1
  3086  0DB8  1303               	bcf	3,6	;RP1=0, select bank1
  3087  0DB9  00B5               	movwf	(Encoded_To_Actual_Analog_Val_Calc@temp_val_1+3)^(0+128)
  3088  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0DBC  082F               	movf	?___lldiv+2,w
  3091  0DBD  1683               	bsf	3,5	;RP0=1, select bank1
  3092  0DBE  1303               	bcf	3,6	;RP1=0, select bank1
  3093  0DBF  00B4               	movwf	(Encoded_To_Actual_Analog_Val_Calc@temp_val_1+2)^(0+128)
  3094  0DC0  1283               	bcf	3,5	;RP0=0, select bank0
  3095  0DC1  1303               	bcf	3,6	;RP1=0, select bank0
  3096  0DC2  082E               	movf	?___lldiv+1,w
  3097  0DC3  1683               	bsf	3,5	;RP0=1, select bank1
  3098  0DC4  1303               	bcf	3,6	;RP1=0, select bank1
  3099  0DC5  00B3               	movwf	(Encoded_To_Actual_Analog_Val_Calc@temp_val_1+1)^(0+128)
  3100  0DC6  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0DC7  1303               	bcf	3,6	;RP1=0, select bank0
  3102  0DC8  082D               	movf	?___lldiv,w
  3103  0DC9  1683               	bsf	3,5	;RP0=1, select bank1
  3104  0DCA  1303               	bcf	3,6	;RP1=0, select bank1
  3105  0DCB  00B2               	movwf	Encoded_To_Actual_Analog_Val_Calc@temp_val_1^(0+128)
  3106                           
  3107                           ;adc.c: 261: *analog_val_in_digital_int = temp_val_1 + min_analog_val;
  3108  0DCC  0832               	movf	Encoded_To_Actual_Analog_Val_Calc@temp_val_1^(0+128),w
  3109  0DCD  0728               	addwf	Encoded_To_Actual_Analog_Val_Calc@min_analog_val^(0+128),w
  3110  0DCE  00AE               	movwf	??_Encoded_To_Actual_Analog_Val_Calc^(0+128)
  3111  0DCF  3000               	movlw	0
  3112  0DD0  1803               	skipnc
  3113  0DD1  3001               	movlw	1
  3114  0DD2  0733               	addwf	(Encoded_To_Actual_Analog_Val_Calc@temp_val_1+1)^(0+128),w
  3115  0DD3  01B0               	clrf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+2)
  3116  0DD4  1803               	skipnc
  3117  0DD5  0AB0               	incf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+2),f
  3118  0DD6  0729               	addwf	(Encoded_To_Actual_Analog_Val_Calc@min_analog_val+1)^(0+128),w
  3119  0DD7  00AF               	movwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+1)
  3120  0DD8  1803               	skipnc
  3121  0DD9  0AB0               	incf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+2),f
  3122  0DDA  0834               	movf	(Encoded_To_Actual_Analog_Val_Calc@temp_val_1+2)^(0+128),w
  3123  0DDB  0730               	addwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+2),w
  3124  0DDC  01B1               	clrf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+3)
  3125  0DDD  1803               	skipnc
  3126  0DDE  0AB1               	incf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+3),f
  3127  0DDF  072A               	addwf	(Encoded_To_Actual_Analog_Val_Calc@min_analog_val+2)^(0+128),w
  3128  0DE0  00B0               	movwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+2)
  3129  0DE1  1803               	skipnc
  3130  0DE2  0AB1               	incf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+3),f
  3131  0DE3  0835               	movf	(Encoded_To_Actual_Analog_Val_Calc@temp_val_1+3)^(0+128),w
  3132  0DE4  0731               	addwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+3),w
  3133  0DE5  072B               	addwf	(Encoded_To_Actual_Analog_Val_Calc@min_analog_val+3)^(0+128),w
  3134  0DE6  00B1               	movwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+3)
  3135  0DE7  082C               	movf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int^(0+128),w
  3136  0DE8  0084               	movwf	4
  3137  0DE9  082E               	movf	??_Encoded_To_Actual_Analog_Val_Calc^(0+128),w
  3138  0DEA  1783               	bsf	3,7	;select IRP bank2
  3139  0DEB  0080               	movwf	0
  3140  0DEC  0A84               	incf	4,f
  3141  0DED  082F               	movf	(??_Encoded_To_Actual_Analog_Val_Calc+1)^(0+128),w
  3142  0DEE  0080               	movwf	0
  3143  0DEF  0A84               	incf	4,f
  3144  0DF0  0830               	movf	(??_Encoded_To_Actual_Analog_Val_Calc+2)^(0+128),w
  3145  0DF1  0080               	movwf	0
  3146  0DF2  0A84               	incf	4,f
  3147  0DF3  0831               	movf	(??_Encoded_To_Actual_Analog_Val_Calc+3)^(0+128),w
  3148  0DF4  0080               	movwf	0
  3149                           
  3150                           ;adc.c: 262: remainder_val = (full_scale_analog_val * adc_value) % (1023UL);
  3151  0DF5  3000               	movlw	0
  3152  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0DF8  00CB               	movwf	___llmod@divisor+3
  3155  0DF9  3000               	movlw	0
  3156  0DFA  00CA               	movwf	___llmod@divisor+2
  3157  0DFB  3003               	movlw	3
  3158  0DFC  00C9               	movwf	___llmod@divisor+1
  3159  0DFD  30FF               	movlw	255
  3160  0DFE  00C8               	movwf	___llmod@divisor
  3161  0DFF  1683               	bsf	3,5	;RP0=1, select bank1
  3162  0E00  1303               	bcf	3,6	;RP1=0, select bank1
  3163  0E01  0827               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+3)^(0+128),w
  3164  0E02  1283               	bcf	3,5	;RP0=0, select bank0
  3165  0E03  1303               	bcf	3,6	;RP1=0, select bank0
  3166  0E04  00BE               	movwf	___lmul@multiplier+3
  3167  0E05  1683               	bsf	3,5	;RP0=1, select bank1
  3168  0E06  1303               	bcf	3,6	;RP1=0, select bank1
  3169  0E07  0826               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+2)^(0+128),w
  3170  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  3171  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  3172  0E0A  00BD               	movwf	___lmul@multiplier+2
  3173  0E0B  1683               	bsf	3,5	;RP0=1, select bank1
  3174  0E0C  1303               	bcf	3,6	;RP1=0, select bank1
  3175  0E0D  0825               	movf	(Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val+1)^(0+128),w
  3176  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  3177  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  3178  0E10  00BC               	movwf	___lmul@multiplier+1
  3179  0E11  1683               	bsf	3,5	;RP0=1, select bank1
  3180  0E12  1303               	bcf	3,6	;RP1=0, select bank1
  3181  0E13  0824               	movf	Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val^(0+128),w
  3182  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  3183  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  3184  0E16  00BB               	movwf	___lmul@multiplier
  3185  0E17  1683               	bsf	3,5	;RP0=1, select bank1
  3186  0E18  1303               	bcf	3,6	;RP1=0, select bank1
  3187  0E19  0823               	movf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+3)^(0+128),w
  3188  0E1A  1283               	bcf	3,5	;RP0=0, select bank0
  3189  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
  3190  0E1C  00C2               	movwf	___lmul@multiplicand+3
  3191  0E1D  1683               	bsf	3,5	;RP0=1, select bank1
  3192  0E1E  1303               	bcf	3,6	;RP1=0, select bank1
  3193  0E1F  0822               	movf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+2)^(0+128),w
  3194  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  3195  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  3196  0E22  00C1               	movwf	___lmul@multiplicand+2
  3197  0E23  1683               	bsf	3,5	;RP0=1, select bank1
  3198  0E24  1303               	bcf	3,6	;RP1=0, select bank1
  3199  0E25  0821               	movf	(Encoded_To_Actual_Analog_Val_Calc@adc_value+1)^(0+128),w
  3200  0E26  1283               	bcf	3,5	;RP0=0, select bank0
  3201  0E27  1303               	bcf	3,6	;RP1=0, select bank0
  3202  0E28  00C0               	movwf	___lmul@multiplicand+1
  3203  0E29  1683               	bsf	3,5	;RP0=1, select bank1
  3204  0E2A  1303               	bcf	3,6	;RP1=0, select bank1
  3205  0E2B  0820               	movf	Encoded_To_Actual_Analog_Val_Calc@adc_value^(0+128),w
  3206  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  3207  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  3208  0E2E  00BF               	movwf	___lmul@multiplicand
  3209  0E2F  120A  158A  219F  120A  158A  	fcall	___lmul
  3210  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  3211  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0E36  083E               	movf	?___lmul+3,w
  3213  0E37  00CF               	movwf	___llmod@dividend+3
  3214  0E38  083D               	movf	?___lmul+2,w
  3215  0E39  00CE               	movwf	___llmod@dividend+2
  3216  0E3A  083C               	movf	?___lmul+1,w
  3217  0E3B  00CD               	movwf	___llmod@dividend+1
  3218  0E3C  083B               	movf	?___lmul,w
  3219  0E3D  00CC               	movwf	___llmod@dividend
  3220  0E3E  120A  158A  21E0  120A  158A  	fcall	___llmod
  3221  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  3222  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  3223  0E45  084B               	movf	?___llmod+3,w
  3224  0E46  1683               	bsf	3,5	;RP0=1, select bank1
  3225  0E47  1303               	bcf	3,6	;RP1=0, select bank1
  3226  0E48  00C5               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+3)^(0+128)
  3227  0E49  1283               	bcf	3,5	;RP0=0, select bank0
  3228  0E4A  1303               	bcf	3,6	;RP1=0, select bank0
  3229  0E4B  084A               	movf	?___llmod+2,w
  3230  0E4C  1683               	bsf	3,5	;RP0=1, select bank1
  3231  0E4D  1303               	bcf	3,6	;RP1=0, select bank1
  3232  0E4E  00C4               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+2)^(0+128)
  3233  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  3234  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  3235  0E51  0849               	movf	?___llmod+1,w
  3236  0E52  1683               	bsf	3,5	;RP0=1, select bank1
  3237  0E53  1303               	bcf	3,6	;RP1=0, select bank1
  3238  0E54  00C3               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+1)^(0+128)
  3239  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  3240  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  3241  0E57  0848               	movf	?___llmod,w
  3242  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  3243  0E59  1303               	bcf	3,6	;RP1=0, select bank1
  3244  0E5A  00C2               	movwf	Encoded_To_Actual_Analog_Val_Calc@remainder_val^(0+128)
  3245                           
  3246                           ;adc.c: 263: remainder_val_1 = ((remainder_val * 10) / (1023UL));
  3247  0E5B  3000               	movlw	0
  3248  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  3249  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  3250  0E5E  00B0               	movwf	___lldiv@divisor+3
  3251  0E5F  3000               	movlw	0
  3252  0E60  00AF               	movwf	___lldiv@divisor+2
  3253  0E61  3003               	movlw	3
  3254  0E62  00AE               	movwf	___lldiv@divisor+1
  3255  0E63  30FF               	movlw	255
  3256  0E64  00AD               	movwf	___lldiv@divisor
  3257  0E65  1683               	bsf	3,5	;RP0=1, select bank1
  3258  0E66  1303               	bcf	3,6	;RP1=0, select bank1
  3259  0E67  0845               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+3)^(0+128),w
  3260  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0E6A  00BE               	movwf	___lmul@multiplier+3
  3263  0E6B  1683               	bsf	3,5	;RP0=1, select bank1
  3264  0E6C  1303               	bcf	3,6	;RP1=0, select bank1
  3265  0E6D  0844               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+2)^(0+128),w
  3266  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  3267  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  3268  0E70  00BD               	movwf	___lmul@multiplier+2
  3269  0E71  1683               	bsf	3,5	;RP0=1, select bank1
  3270  0E72  1303               	bcf	3,6	;RP1=0, select bank1
  3271  0E73  0843               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+1)^(0+128),w
  3272  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  3273  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  3274  0E76  00BC               	movwf	___lmul@multiplier+1
  3275  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  3276  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  3277  0E79  0842               	movf	Encoded_To_Actual_Analog_Val_Calc@remainder_val^(0+128),w
  3278  0E7A  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0E7B  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0E7C  00BB               	movwf	___lmul@multiplier
  3281  0E7D  3000               	movlw	0
  3282  0E7E  00C2               	movwf	___lmul@multiplicand+3
  3283  0E7F  3000               	movlw	0
  3284  0E80  00C1               	movwf	___lmul@multiplicand+2
  3285  0E81  3000               	movlw	0
  3286  0E82  00C0               	movwf	___lmul@multiplicand+1
  3287  0E83  300A               	movlw	10
  3288  0E84  00BF               	movwf	___lmul@multiplicand
  3289  0E85  120A  158A  219F  120A  158A  	fcall	___lmul
  3290  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  3291  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  3292  0E8C  083E               	movf	?___lmul+3,w
  3293  0E8D  00B4               	movwf	___lldiv@dividend+3
  3294  0E8E  083D               	movf	?___lmul+2,w
  3295  0E8F  00B3               	movwf	___lldiv@dividend+2
  3296  0E90  083C               	movf	?___lmul+1,w
  3297  0E91  00B2               	movwf	___lldiv@dividend+1
  3298  0E92  083B               	movf	?___lmul,w
  3299  0E93  00B1               	movwf	___lldiv@dividend
  3300  0E94  120A  118A  2760  120A  158A  	fcall	___lldiv
  3301  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  3302  0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  3303  0E9B  0830               	movf	?___lldiv+3,w
  3304  0E9C  1683               	bsf	3,5	;RP0=1, select bank1
  3305  0E9D  1303               	bcf	3,6	;RP1=0, select bank1
  3306  0E9E  00BD               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_1+3)^(0+128)
  3307  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  3308  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  3309  0EA1  082F               	movf	?___lldiv+2,w
  3310  0EA2  1683               	bsf	3,5	;RP0=1, select bank1
  3311  0EA3  1303               	bcf	3,6	;RP1=0, select bank1
  3312  0EA4  00BC               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_1+2)^(0+128)
  3313  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  3314  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  3315  0EA7  082E               	movf	?___lldiv+1,w
  3316  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  3317  0EA9  1303               	bcf	3,6	;RP1=0, select bank1
  3318  0EAA  00BB               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_1+1)^(0+128)
  3319  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  3320  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  3321  0EAD  082D               	movf	?___lldiv,w
  3322  0EAE  1683               	bsf	3,5	;RP0=1, select bank1
  3323  0EAF  1303               	bcf	3,6	;RP1=0, select bank1
  3324  0EB0  00BA               	movwf	Encoded_To_Actual_Analog_Val_Calc@remainder_val_1^(0+128)
  3325                           
  3326                           ;adc.c: 264: temp_remainder_val = ((remainder_val * 10) % (1023UL));
  3327  0EB1  3000               	movlw	0
  3328  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  3329  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  3330  0EB4  00CB               	movwf	___llmod@divisor+3
  3331  0EB5  3000               	movlw	0
  3332  0EB6  00CA               	movwf	___llmod@divisor+2
  3333  0EB7  3003               	movlw	3
  3334  0EB8  00C9               	movwf	___llmod@divisor+1
  3335  0EB9  30FF               	movlw	255
  3336  0EBA  00C8               	movwf	___llmod@divisor
  3337  0EBB  1683               	bsf	3,5	;RP0=1, select bank1
  3338  0EBC  1303               	bcf	3,6	;RP1=0, select bank1
  3339  0EBD  0845               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+3)^(0+128),w
  3340  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  3341  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  3342  0EC0  00BE               	movwf	___lmul@multiplier+3
  3343  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  3344  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  3345  0EC3  0844               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+2)^(0+128),w
  3346  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  3347  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  3348  0EC6  00BD               	movwf	___lmul@multiplier+2
  3349  0EC7  1683               	bsf	3,5	;RP0=1, select bank1
  3350  0EC8  1303               	bcf	3,6	;RP1=0, select bank1
  3351  0EC9  0843               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val+1)^(0+128),w
  3352  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  3353  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  3354  0ECC  00BC               	movwf	___lmul@multiplier+1
  3355  0ECD  1683               	bsf	3,5	;RP0=1, select bank1
  3356  0ECE  1303               	bcf	3,6	;RP1=0, select bank1
  3357  0ECF  0842               	movf	Encoded_To_Actual_Analog_Val_Calc@remainder_val^(0+128),w
  3358  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0ED2  00BB               	movwf	___lmul@multiplier
  3361  0ED3  3000               	movlw	0
  3362  0ED4  00C2               	movwf	___lmul@multiplicand+3
  3363  0ED5  3000               	movlw	0
  3364  0ED6  00C1               	movwf	___lmul@multiplicand+2
  3365  0ED7  3000               	movlw	0
  3366  0ED8  00C0               	movwf	___lmul@multiplicand+1
  3367  0ED9  300A               	movlw	10
  3368  0EDA  00BF               	movwf	___lmul@multiplicand
  3369  0EDB  120A  158A  219F  120A  158A  	fcall	___lmul
  3370  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  3371  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  3372  0EE2  083E               	movf	?___lmul+3,w
  3373  0EE3  00CF               	movwf	___llmod@dividend+3
  3374  0EE4  083D               	movf	?___lmul+2,w
  3375  0EE5  00CE               	movwf	___llmod@dividend+2
  3376  0EE6  083C               	movf	?___lmul+1,w
  3377  0EE7  00CD               	movwf	___llmod@dividend+1
  3378  0EE8  083B               	movf	?___lmul,w
  3379  0EE9  00CC               	movwf	___llmod@dividend
  3380  0EEA  120A  158A  21E0  120A  158A  	fcall	___llmod
  3381  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  3382  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  3383  0EF1  084B               	movf	?___llmod+3,w
  3384  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  3385  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
  3386  0EF4  00B9               	movwf	(Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val+3)^(0+128)
  3387  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  3388  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  3389  0EF7  084A               	movf	?___llmod+2,w
  3390  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  3391  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  3392  0EFA  00B8               	movwf	(Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val+2)^(0+128)
  3393  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  3394  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  3395  0EFD  0849               	movf	?___llmod+1,w
  3396  0EFE  1683               	bsf	3,5	;RP0=1, select bank1
  3397  0EFF  1303               	bcf	3,6	;RP1=0, select bank1
  3398  0F00  00B7               	movwf	(Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val+1)^(0+128)
  3399  0F01  1283               	bcf	3,5	;RP0=0, select bank0
  3400  0F02  1303               	bcf	3,6	;RP1=0, select bank0
  3401  0F03  0848               	movf	?___llmod,w
  3402  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  3403  0F05  1303               	bcf	3,6	;RP1=0, select bank1
  3404  0F06  00B6               	movwf	Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val^(0+128)
  3405                           
  3406                           ;adc.c: 265: remainder_val_10 = ((temp_remainder_val * 10) / (1023UL));
  3407  0F07  3000               	movlw	0
  3408  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0F0A  00B0               	movwf	___lldiv@divisor+3
  3411  0F0B  3000               	movlw	0
  3412  0F0C  00AF               	movwf	___lldiv@divisor+2
  3413  0F0D  3003               	movlw	3
  3414  0F0E  00AE               	movwf	___lldiv@divisor+1
  3415  0F0F  30FF               	movlw	255
  3416  0F10  00AD               	movwf	___lldiv@divisor
  3417  0F11  1683               	bsf	3,5	;RP0=1, select bank1
  3418  0F12  1303               	bcf	3,6	;RP1=0, select bank1
  3419  0F13  0839               	movf	(Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val+3)^(0+128),w
  3420  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  3421  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  3422  0F16  00BE               	movwf	___lmul@multiplier+3
  3423  0F17  1683               	bsf	3,5	;RP0=1, select bank1
  3424  0F18  1303               	bcf	3,6	;RP1=0, select bank1
  3425  0F19  0838               	movf	(Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val+2)^(0+128),w
  3426  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  3428  0F1C  00BD               	movwf	___lmul@multiplier+2
  3429  0F1D  1683               	bsf	3,5	;RP0=1, select bank1
  3430  0F1E  1303               	bcf	3,6	;RP1=0, select bank1
  3431  0F1F  0837               	movf	(Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val+1)^(0+128),w
  3432  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0F22  00BC               	movwf	___lmul@multiplier+1
  3435  0F23  1683               	bsf	3,5	;RP0=1, select bank1
  3436  0F24  1303               	bcf	3,6	;RP1=0, select bank1
  3437  0F25  0836               	movf	Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val^(0+128),w
  3438  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  3439  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  3440  0F28  00BB               	movwf	___lmul@multiplier
  3441  0F29  3000               	movlw	0
  3442  0F2A  00C2               	movwf	___lmul@multiplicand+3
  3443  0F2B  3000               	movlw	0
  3444  0F2C  00C1               	movwf	___lmul@multiplicand+2
  3445  0F2D  3000               	movlw	0
  3446  0F2E  00C0               	movwf	___lmul@multiplicand+1
  3447  0F2F  300A               	movlw	10
  3448  0F30  00BF               	movwf	___lmul@multiplicand
  3449  0F31  120A  158A  219F  120A  158A  	fcall	___lmul
  3450  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0F38  083E               	movf	?___lmul+3,w
  3453  0F39  00B4               	movwf	___lldiv@dividend+3
  3454  0F3A  083D               	movf	?___lmul+2,w
  3455  0F3B  00B3               	movwf	___lldiv@dividend+2
  3456  0F3C  083C               	movf	?___lmul+1,w
  3457  0F3D  00B2               	movwf	___lldiv@dividend+1
  3458  0F3E  083B               	movf	?___lmul,w
  3459  0F3F  00B1               	movwf	___lldiv@dividend
  3460  0F40  120A  118A  2760  120A  158A  	fcall	___lldiv
  3461  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  3462  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  3463  0F47  0830               	movf	?___lldiv+3,w
  3464  0F48  1683               	bsf	3,5	;RP0=1, select bank1
  3465  0F49  1303               	bcf	3,6	;RP1=0, select bank1
  3466  0F4A  00C1               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_10+3)^(0+128)
  3467  0F4B  1283               	bcf	3,5	;RP0=0, select bank0
  3468  0F4C  1303               	bcf	3,6	;RP1=0, select bank0
  3469  0F4D  082F               	movf	?___lldiv+2,w
  3470  0F4E  1683               	bsf	3,5	;RP0=1, select bank1
  3471  0F4F  1303               	bcf	3,6	;RP1=0, select bank1
  3472  0F50  00C0               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_10+2)^(0+128)
  3473  0F51  1283               	bcf	3,5	;RP0=0, select bank0
  3474  0F52  1303               	bcf	3,6	;RP1=0, select bank0
  3475  0F53  082E               	movf	?___lldiv+1,w
  3476  0F54  1683               	bsf	3,5	;RP0=1, select bank1
  3477  0F55  1303               	bcf	3,6	;RP1=0, select bank1
  3478  0F56  00BF               	movwf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_10+1)^(0+128)
  3479  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  3481  0F59  082D               	movf	?___lldiv,w
  3482  0F5A  1683               	bsf	3,5	;RP0=1, select bank1
  3483  0F5B  1303               	bcf	3,6	;RP1=0, select bank1
  3484  0F5C  00BE               	movwf	Encoded_To_Actual_Analog_Val_Calc@remainder_val_10^(0+128)
  3485                           
  3486                           ;adc.c: 266: *analog_val_in_digital_frac = (remainder_val_1 * 100 )+ remainder_val_10 * 
      +                          10 ;
  3487  0F5D  0841               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_10+3)^(0+128),w
  3488  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  3489  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  3490  0F60  00BE               	movwf	___lmul@multiplier+3
  3491  0F61  1683               	bsf	3,5	;RP0=1, select bank1
  3492  0F62  1303               	bcf	3,6	;RP1=0, select bank1
  3493  0F63  0840               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_10+2)^(0+128),w
  3494  0F64  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0F65  1303               	bcf	3,6	;RP1=0, select bank0
  3496  0F66  00BD               	movwf	___lmul@multiplier+2
  3497  0F67  1683               	bsf	3,5	;RP0=1, select bank1
  3498  0F68  1303               	bcf	3,6	;RP1=0, select bank1
  3499  0F69  083F               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_10+1)^(0+128),w
  3500  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  3501  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  3502  0F6C  00BC               	movwf	___lmul@multiplier+1
  3503  0F6D  1683               	bsf	3,5	;RP0=1, select bank1
  3504  0F6E  1303               	bcf	3,6	;RP1=0, select bank1
  3505  0F6F  083E               	movf	Encoded_To_Actual_Analog_Val_Calc@remainder_val_10^(0+128),w
  3506  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  3507  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  3508  0F72  00BB               	movwf	___lmul@multiplier
  3509  0F73  3000               	movlw	0
  3510  0F74  00C2               	movwf	___lmul@multiplicand+3
  3511  0F75  3000               	movlw	0
  3512  0F76  00C1               	movwf	___lmul@multiplicand+2
  3513  0F77  3000               	movlw	0
  3514  0F78  00C0               	movwf	___lmul@multiplicand+1
  3515  0F79  300A               	movlw	10
  3516  0F7A  00BF               	movwf	___lmul@multiplicand
  3517  0F7B  120A  158A  219F  120A  158A  	fcall	___lmul
  3518  0F80  1283               	bcf	3,5	;RP0=0, select bank0
  3519  0F81  1303               	bcf	3,6	;RP1=0, select bank0
  3520  0F82  083B               	movf	?___lmul,w
  3521  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  3522  0F84  1303               	bcf	3,6	;RP1=0, select bank1
  3523  0F85  00AE               	movwf	??_Encoded_To_Actual_Analog_Val_Calc^(0+128)
  3524  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3525  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3526  0F88  083C               	movf	?___lmul+1,w
  3527  0F89  1683               	bsf	3,5	;RP0=1, select bank1
  3528  0F8A  1303               	bcf	3,6	;RP1=0, select bank1
  3529  0F8B  00AF               	movwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+1)
  3530  0F8C  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0F8D  1303               	bcf	3,6	;RP1=0, select bank0
  3532  0F8E  083D               	movf	?___lmul+2,w
  3533  0F8F  1683               	bsf	3,5	;RP0=1, select bank1
  3534  0F90  1303               	bcf	3,6	;RP1=0, select bank1
  3535  0F91  00B0               	movwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+2)
  3536  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  3537  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  3538  0F94  083E               	movf	?___lmul+3,w
  3539  0F95  1683               	bsf	3,5	;RP0=1, select bank1
  3540  0F96  1303               	bcf	3,6	;RP1=0, select bank1
  3541  0F97  00B1               	movwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+3)
  3542  0F98  083D               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_1+3)^(0+128),w
  3543  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  3544  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
  3545  0F9B  00BE               	movwf	___lmul@multiplier+3
  3546  0F9C  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0F9D  1303               	bcf	3,6	;RP1=0, select bank1
  3548  0F9E  083C               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_1+2)^(0+128),w
  3549  0F9F  1283               	bcf	3,5	;RP0=0, select bank0
  3550  0FA0  1303               	bcf	3,6	;RP1=0, select bank0
  3551  0FA1  00BD               	movwf	___lmul@multiplier+2
  3552  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  3553  0FA3  1303               	bcf	3,6	;RP1=0, select bank1
  3554  0FA4  083B               	movf	(Encoded_To_Actual_Analog_Val_Calc@remainder_val_1+1)^(0+128),w
  3555  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  3556  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  3557  0FA7  00BC               	movwf	___lmul@multiplier+1
  3558  0FA8  1683               	bsf	3,5	;RP0=1, select bank1
  3559  0FA9  1303               	bcf	3,6	;RP1=0, select bank1
  3560  0FAA  083A               	movf	Encoded_To_Actual_Analog_Val_Calc@remainder_val_1^(0+128),w
  3561  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0FAD  00BB               	movwf	___lmul@multiplier
  3564  0FAE  3000               	movlw	0
  3565  0FAF  00C2               	movwf	___lmul@multiplicand+3
  3566  0FB0  3000               	movlw	0
  3567  0FB1  00C1               	movwf	___lmul@multiplicand+2
  3568  0FB2  3000               	movlw	0
  3569  0FB3  00C0               	movwf	___lmul@multiplicand+1
  3570  0FB4  3064               	movlw	100
  3571  0FB5  00BF               	movwf	___lmul@multiplicand
  3572  0FB6  120A  158A  219F  120A  158A  	fcall	___lmul
  3573  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  3574  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  3575  0FBD  083B               	movf	?___lmul,w
  3576  0FBE  1683               	bsf	3,5	;RP0=1, select bank1
  3577  0FBF  1303               	bcf	3,6	;RP1=0, select bank1
  3578  0FC0  07AE               	addwf	??_Encoded_To_Actual_Analog_Val_Calc^(0+128),f
  3579  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  3580  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  3581  0FC3  083C               	movf	?___lmul+1,w
  3582  0FC4  1803               	skipnc
  3583  0FC5  0F3C               	incfsz	?___lmul+1,w
  3584  0FC6  2FC8               	goto	u3270
  3585  0FC7  2FCB               	goto	u3271
  3586  0FC8                     u3270:	
  3587  0FC8  1683               	bsf	3,5	;RP0=1, select bank1
  3588  0FC9  1303               	bcf	3,6	;RP1=0, select bank1
  3589  0FCA  07AF               	addwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+1),f
  3590  0FCB                     u3271:	
  3591  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  3592  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  3593  0FCD  083D               	movf	?___lmul+2,w
  3594  0FCE  1803               	skipnc
  3595  0FCF  0F3D               	incfsz	?___lmul+2,w
  3596  0FD0  2FD2               	goto	u3272
  3597  0FD1  2FD5               	goto	u3273
  3598  0FD2                     u3272:	
  3599  0FD2  1683               	bsf	3,5	;RP0=1, select bank1
  3600  0FD3  1303               	bcf	3,6	;RP1=0, select bank1
  3601  0FD4  07B0               	addwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+2),f
  3602  0FD5                     u3273:	
  3603  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  3604  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  3605  0FD7  083E               	movf	?___lmul+3,w
  3606  0FD8  1803               	skipnc
  3607  0FD9  0A3E               	incf	?___lmul+3,w
  3608  0FDA  1683               	bsf	3,5	;RP0=1, select bank1
  3609  0FDB  1303               	bcf	3,6	;RP1=0, select bank1
  3610  0FDC  07B1               	addwf	(??_Encoded_To_Actual_Analog_Val_Calc^(0+128)+3),f
  3611  0FDD  082D               	movf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac^(0+128),w
  3612  0FDE  0084               	movwf	4
  3613  0FDF  082E               	movf	??_Encoded_To_Actual_Analog_Val_Calc^(0+128),w
  3614  0FE0  1783               	bsf	3,7	;select IRP bank2
  3615  0FE1  0080               	movwf	0
  3616  0FE2  0A84               	incf	4,f
  3617  0FE3  082F               	movf	(??_Encoded_To_Actual_Analog_Val_Calc+1)^(0+128),w
  3618  0FE4  0080               	movwf	0
  3619  0FE5  0A84               	incf	4,f
  3620  0FE6  0830               	movf	(??_Encoded_To_Actual_Analog_Val_Calc+2)^(0+128),w
  3621  0FE7  0080               	movwf	0
  3622  0FE8  0A84               	incf	4,f
  3623  0FE9  0831               	movf	(??_Encoded_To_Actual_Analog_Val_Calc+3)^(0+128),w
  3624  0FEA  0080               	movwf	0
  3625                           
  3626                           ;adc.c: 267: return;
  3627  0FEB  0008               	return
  3628  0FEC                     l3376:	
  3629                           
  3630                           ;adc.c: 268: }
  3631                           ;adc.c: 270: *analog_val_in_digital_int = 0;
  3632  0FEC  082C               	movf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int^(0+128),w
  3633  0FED  0084               	movwf	4
  3634  0FEE  1783               	bsf	3,7	;select IRP bank2
  3635  0FEF  0180               	clrf	0
  3636  0FF0  0A84               	incf	4,f
  3637  0FF1  0180               	clrf	0
  3638  0FF2  0A84               	incf	4,f
  3639  0FF3  0180               	clrf	0
  3640  0FF4  0A84               	incf	4,f
  3641  0FF5  0180               	clrf	0
  3642                           
  3643                           ;adc.c: 271: *analog_val_in_digital_frac = 0;
  3644  0FF6  082D               	movf	Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac^(0+128),w
  3645  0FF7  0084               	movwf	4
  3646  0FF8  0180               	clrf	0
  3647  0FF9  0A84               	incf	4,f
  3648  0FFA  0180               	clrf	0
  3649  0FFB  0A84               	incf	4,f
  3650  0FFC  0180               	clrf	0
  3651  0FFD  0A84               	incf	4,f
  3652  0FFE  0180               	clrf	0
  3653  0FFF  0008               	return
  3654  1000                     __end_of_Encoded_To_Actual_Analog_Val_Calc:	
  3655                           
  3656                           	psect	text3
  3657  099F                     __ptext3:	
  3658 ;; *************** function ___lmul *****************
  3659 ;; Defined at:
  3660 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul32.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  multiplier      4   27[BANK0 ] unsigned long 
  3663 ;;  multiplicand    4   31[BANK0 ] unsigned long 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;  product         4   36[BANK0 ] unsigned long 
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  4   27[BANK0 ] unsigned long 
  3668 ;; Registers used:
  3669 ;;		wreg, status,2, status,0
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3675 ;;      Params:         0       8       0       0       0
  3676 ;;      Locals:         0       4       0       0       0
  3677 ;;      Temps:          0       1       0       0       0
  3678 ;;      Totals:         0      13       0       0       0
  3679 ;;Total ram usage:       13 bytes
  3680 ;; Hardware stack levels used:    1
  3681 ;; Hardware stack levels required when called:    2
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_Encoded_To_Actual_Analog_Val_Calc
  3686 ;;		_main
  3687 ;;		_Encoded_To_Percent_Calc
  3688 ;;		_Actual_Analog_Val_To_Encoded_Calc
  3689 ;;		_Timer1_Load_Init_Val_Calc
  3690 ;;		_Timer2_Load_Init_Val_Calc
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           
  3695                           ;psect for function ___lmul
  3696  099F                     ___lmul:	
  3697                           
  3698                           ;incstack = 0
  3699                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3700  099F  3000               	movlw	0
  3701  09A0  1283               	bcf	3,5	;RP0=0, select bank0
  3702  09A1  1303               	bcf	3,6	;RP1=0, select bank0
  3703  09A2  00C7               	movwf	___lmul@product+3
  3704  09A3  3000               	movlw	0
  3705  09A4  00C6               	movwf	___lmul@product+2
  3706  09A5  3000               	movlw	0
  3707  09A6  00C5               	movwf	___lmul@product+1
  3708  09A7  3000               	movlw	0
  3709  09A8  00C4               	movwf	___lmul@product
  3710  09A9                     l3262:	
  3711  09A9  1C3B               	btfss	___lmul@multiplier,0
  3712  09AA  29BF               	goto	l3266
  3713  09AB  083F               	movf	___lmul@multiplicand,w
  3714  09AC  07C4               	addwf	___lmul@product,f
  3715  09AD  0840               	movf	___lmul@multiplicand+1,w
  3716  09AE  1103               	clrz
  3717  09AF  1803               	skipnc
  3718  09B0  3E01               	addlw	1
  3719  09B1  1D03               	btfss	3,2
  3720  09B2  07C5               	addwf	___lmul@product+1,f
  3721  09B3  0841               	movf	___lmul@multiplicand+2,w
  3722  09B4  1103               	clrz
  3723  09B5  1803               	skipnc
  3724  09B6  3E01               	addlw	1
  3725  09B7  1D03               	btfss	3,2
  3726  09B8  07C6               	addwf	___lmul@product+2,f
  3727  09B9  0842               	movf	___lmul@multiplicand+3,w
  3728  09BA  1103               	clrz
  3729  09BB  1803               	skipnc
  3730  09BC  3E01               	addlw	1
  3731  09BD  1D03               	btfss	3,2
  3732  09BE  07C7               	addwf	___lmul@product+3,f
  3733  09BF                     l3266:	
  3734  09BF  3001               	movlw	1
  3735  09C0  00C3               	movwf	??___lmul
  3736  09C1                     u3065:	
  3737  09C1  1003               	clrc
  3738  09C2  0DBF               	rlf	___lmul@multiplicand,f
  3739  09C3  0DC0               	rlf	___lmul@multiplicand+1,f
  3740  09C4  0DC1               	rlf	___lmul@multiplicand+2,f
  3741  09C5  0DC2               	rlf	___lmul@multiplicand+3,f
  3742  09C6  0BC3               	decfsz	??___lmul,f
  3743  09C7  29C1               	goto	u3065
  3744  09C8  3001               	movlw	1
  3745  09C9                     u3075:	
  3746  09C9  1003               	clrc
  3747  09CA  0CBE               	rrf	___lmul@multiplier+3,f
  3748  09CB  0CBD               	rrf	___lmul@multiplier+2,f
  3749  09CC  0CBC               	rrf	___lmul@multiplier+1,f
  3750  09CD  0CBB               	rrf	___lmul@multiplier,f
  3751  09CE  3EFF               	addlw	-1
  3752  09CF  1D03               	skipz
  3753  09D0  29C9               	goto	u3075
  3754  09D1  083E               	movf	___lmul@multiplier+3,w
  3755  09D2  043D               	iorwf	___lmul@multiplier+2,w
  3756  09D3  043C               	iorwf	___lmul@multiplier+1,w
  3757  09D4  043B               	iorwf	___lmul@multiplier,w
  3758  09D5  1D03               	skipz
  3759  09D6  29A9               	goto	l3262
  3760  09D7  0847               	movf	___lmul@product+3,w
  3761  09D8  00BE               	movwf	?___lmul+3
  3762  09D9  0846               	movf	___lmul@product+2,w
  3763  09DA  00BD               	movwf	?___lmul+2
  3764  09DB  0845               	movf	___lmul@product+1,w
  3765  09DC  00BC               	movwf	?___lmul+1
  3766  09DD  0844               	movf	___lmul@product,w
  3767  09DE  00BB               	movwf	?___lmul
  3768  09DF  0008               	return
  3769  09E0                     __end_of___lmul:	
  3770                           
  3771                           	psect	text4
  3772  0BBD                     __ptext4:	
  3773 ;; *************** function _ADC_Start_Conv *****************
  3774 ;; Defined at:
  3775 ;;		line 62 in file "adc.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  set_adc_para    1    wreg     PTR struct .
  3778 ;;		 -> adc_cur_parameters(10), 
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;  set_adc_para    1   11[BANK3 ] PTR struct .
  3781 ;;		 -> adc_cur_parameters(10), 
  3782 ;;  adc_value_mo    2    9[BANK3 ] unsigned int 
  3783 ;;  adc_value_le    2    7[BANK3 ] unsigned int 
  3784 ;;  rcvd_status     1    6[BANK3 ] unsigned char 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3794 ;;      Params:         0       0       0       0       0
  3795 ;;      Locals:         0       0       0       6       0
  3796 ;;      Temps:          0       0       0       6       0
  3797 ;;      Totals:         0       0       0      12       0
  3798 ;;Total ram usage:       12 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    4
  3801 ;; This function calls:
  3802 ;;		_Is_ADC_Converting
  3803 ;;		_UART_Transmit_Char
  3804 ;;		_UART_Transmit_Num
  3805 ;;		_UART_Transmit_Str
  3806 ;; This function is called by:
  3807 ;;		_main
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           
  3812                           ;psect for function _ADC_Start_Conv
  3813  0BBD                     _ADC_Start_Conv:	
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _ADC_Start_Conv: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3817                           ;ADC_Start_Conv@set_adc_parameters stored from wreg
  3818  0BBD  1683               	bsf	3,5	;RP0=1, select bank3
  3819  0BBE  1703               	bsf	3,6	;RP1=1, select bank3
  3820  0BBF  00D1               	movwf	ADC_Start_Conv@set_adc_parameters^(0+384)
  3821                           
  3822                           ;adc.c: 64: char rcvd_status;
  3823                           ;adc.c: 65: unsigned adc_value_least_byte, adc_value_most_byte;
  3824                           ;adc.c: 67: rcvd_status = Is_ADC_Converting();
  3825  0BC0  120A  158A  2103  120A  158A  	fcall	_Is_ADC_Converting
  3826  0BC5  1683               	bsf	3,5	;RP0=1, select bank3
  3827  0BC6  1703               	bsf	3,6	;RP1=1, select bank3
  3828  0BC7  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  3829  0BC8  0846               	movf	??_ADC_Start_Conv^(0+384),w
  3830  0BC9  00CC               	movwf	ADC_Start_Conv@rcvd_status^(0+384)
  3831                           
  3832                           ;adc.c: 68: switch(rcvd_status)
  3833  0BCA  2D4D               	goto	l3356
  3834  0BCB                     l3304:	
  3835                           ;adc.c: 69: {
  3836                           ;adc.c: 71: case ('n'):
  3837                           
  3838                           
  3839                           ;adc.c: 73: if(adc_cur_channel != ADC_INVALID_CH_14 )
  3840  0BCB  300E               	movlw	14
  3841  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
  3842  0BCD  1303               	bcf	3,6	;RP1=0, select bank0
  3843  0BCE  0661               	xorwf	_adc_cur_channel,w
  3844  0BCF  1903               	btfsc	3,2
  3845  0BD0  2D1E               	goto	l3352
  3846                           
  3847                           ;adc.c: 74: {
  3848                           ;adc.c: 75: if(adc_cur_channel < 14)
  3849  0BD1  300E               	movlw	14
  3850  0BD2  0261               	subwf	_adc_cur_channel,w
  3851  0BD3  1803               	skipnc
  3852  0BD4  2CE5               	goto	l3344
  3853                           
  3854                           ;adc.c: 76: {
  3855                           ;adc.c: 77: ADCON0 = (set_adc_parameters->adc_clk_src_type <<6) | (adc_cur_channel << 2)
      +                           ;
  3856  0BD5  0861               	movf	_adc_cur_channel,w
  3857  0BD6  1683               	bsf	3,5	;RP0=1, select bank3
  3858  0BD7  1703               	bsf	3,6	;RP1=1, select bank3
  3859  0BD8  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  3860  0BD9  3002               	movlw	2
  3861  0BDA                     u3145:	
  3862  0BDA  1003               	clrc
  3863  0BDB  0DC6               	rlf	??_ADC_Start_Conv^(0+384),f
  3864  0BDC  3EFF               	addlw	-1
  3865  0BDD  1D03               	skipz
  3866  0BDE  2BDA               	goto	u3145
  3867  0BDF  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  3868  0BE0  3E04               	addlw	4
  3869  0BE1  0084               	movwf	4
  3870  0BE2  1783               	bsf	3,7	;select IRP bank2
  3871  0BE3  0C00               	rrf	0,w
  3872  0BE4  00C7               	movwf	(??_ADC_Start_Conv+1)^(0+384)
  3873  0BE5  0C47               	rrf	(??_ADC_Start_Conv+1)^(0+384),w
  3874  0BE6  3903               	andlw	3
  3875  0BE7  00C8               	movwf	(??_ADC_Start_Conv+2)^(0+384)
  3876  0BE8  3005               	movlw	5
  3877  0BE9                     u3155:	
  3878  0BE9  1003               	clrc
  3879  0BEA  0DC8               	rlf	(??_ADC_Start_Conv+2)^(0+384),f
  3880  0BEB  3EFF               	addlw	-1
  3881  0BEC  1D03               	skipz
  3882  0BED  2BE9               	goto	u3155
  3883  0BEE  1003               	clrc
  3884  0BEF  0D48               	rlf	(??_ADC_Start_Conv+2)^(0+384),w
  3885  0BF0  0446               	iorwf	??_ADC_Start_Conv^(0+384),w
  3886  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  3887  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  3888  0BF3  009F               	movwf	31	;volatile
  3889                           
  3890                           ;adc.c: 78: ADCON1 = (set_adc_parameters->adc_result_format_justfied_type<<7) | (set_adc
      +                          _parameters->adc_vref_neg_src_type << 5) | (set_adc_parameters->adc_vref_plus_src_type<<
      +                          4);
  3891  0BF4  1683               	bsf	3,5	;RP0=1, select bank3
  3892  0BF5  1703               	bsf	3,6	;RP1=1, select bank3
  3893  0BF6  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  3894  0BF7  3E04               	addlw	4
  3895  0BF8  0084               	movwf	4
  3896  0BF9  0D00               	rlf	0,w
  3897  0BFA  0D00               	rlf	0,w
  3898  0BFB  3901               	andlw	1
  3899  0BFC  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  3900  0BFD  3004               	movlw	4
  3901  0BFE                     u3165:	
  3902  0BFE  1003               	clrc
  3903  0BFF  0DC6               	rlf	??_ADC_Start_Conv^(0+384),f
  3904  0C00  3EFF               	addlw	-1
  3905  0C01  1D03               	skipz
  3906  0C02  2BFE               	goto	u3165
  3907  0C03  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  3908  0C04  3E04               	addlw	4
  3909  0C05  0084               	movwf	4
  3910  0C06  0E00               	swapf	0,w
  3911  0C07  00C7               	movwf	(??_ADC_Start_Conv+1)^(0+384)
  3912  0C08  0CC7               	rrf	(??_ADC_Start_Conv+1)^(0+384),f
  3913  0C09  0C47               	rrf	(??_ADC_Start_Conv+1)^(0+384),w
  3914  0C0A  3901               	andlw	1
  3915  0C0B  00C8               	movwf	(??_ADC_Start_Conv+2)^(0+384)
  3916  0C0C  3005               	movlw	5
  3917  0C0D                     u3175:	
  3918  0C0D  1003               	clrc
  3919  0C0E  0DC8               	rlf	(??_ADC_Start_Conv+2)^(0+384),f
  3920  0C0F  3EFF               	addlw	-1
  3921  0C10  1D03               	skipz
  3922  0C11  2C0D               	goto	u3175
  3923  0C12  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  3924  0C13  3E04               	addlw	4
  3925  0C14  0084               	movwf	4
  3926  0C15  0E00               	swapf	0,w
  3927  0C16  00C9               	movwf	(??_ADC_Start_Conv+3)^(0+384)
  3928  0C17  0C49               	rrf	(??_ADC_Start_Conv+3)^(0+384),w
  3929  0C18  3901               	andlw	1
  3930  0C19  00CA               	movwf	(??_ADC_Start_Conv+4)^(0+384)
  3931  0C1A  3006               	movlw	6
  3932  0C1B                     u3185:	
  3933  0C1B  1003               	clrc
  3934  0C1C  0DCA               	rlf	(??_ADC_Start_Conv+4)^(0+384),f
  3935  0C1D  3EFF               	addlw	-1
  3936  0C1E  1D03               	skipz
  3937  0C1F  2C1B               	goto	u3185
  3938  0C20  1003               	clrc
  3939  0C21  0D4A               	rlf	(??_ADC_Start_Conv+4)^(0+384),w
  3940  0C22  0448               	iorwf	(??_ADC_Start_Conv+2)^(0+384),w
  3941  0C23  0446               	iorwf	??_ADC_Start_Conv^(0+384),w
  3942  0C24  1683               	bsf	3,5	;RP0=1, select bank1
  3943  0C25  1303               	bcf	3,6	;RP1=0, select bank1
  3944  0C26  009F               	movwf	31	;volatile
  3945                           
  3946                           ;adc.c: 80: ADCON0bits.ADON = 1;
  3947  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  3948  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  3949  0C29  141F               	bsf	31,0	;volatile
  3950                           
  3951                           ;adc.c: 81: ADIF = 0;
  3952  0C2A  130C               	bcf	12,6	;volatile
  3953                           
  3954                           ;adc.c: 82: switch(set_adc_parameters->adc_cur_service_type)
  3955  0C2B  2C36               	goto	l3316
  3956  0C2C                     l50:	
  3957                           ;adc.c: 83: {
  3958                           ;adc.c: 84: case (0x01):
  3959                           
  3960                           
  3961                           ;adc.c: 85: PIE1bits.ADIE = 1;
  3962  0C2C  1683               	bsf	3,5	;RP0=1, select bank1
  3963  0C2D  1303               	bcf	3,6	;RP1=0, select bank1
  3964  0C2E  170C               	bsf	12,6	;volatile
  3965                           
  3966                           ;adc.c: 86: INTCONbits.PEIE = 1;
  3967  0C2F  170B               	bsf	11,6	;volatile
  3968                           
  3969                           ;adc.c: 87: INTCONbits.GIE = 1;
  3970  0C30  178B               	bsf	11,7	;volatile
  3971                           
  3972                           ;adc.c: 93: break;
  3973  0C31  2C44               	goto	l3318
  3974  0C32                     l52:	
  3975                           ;adc.c: 94: case (0x00):
  3976                           
  3977                           
  3978                           ;adc.c: 95: PIE1bits.ADIE = 0;
  3979  0C32  1683               	bsf	3,5	;RP0=1, select bank1
  3980  0C33  1303               	bcf	3,6	;RP1=0, select bank1
  3981  0C34  130C               	bcf	12,6	;volatile
  3982                           
  3983                           ;adc.c: 101: }
  3984                           
  3985                           ;adc.c: 100: break;
  3986  0C35  2C44               	goto	l3318
  3987  0C36                     l3316:	
  3988  0C36  1683               	bsf	3,5	;RP0=1, select bank3
  3989  0C37  1703               	bsf	3,6	;RP1=1, select bank3
  3990  0C38  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  3991  0C39  3E04               	addlw	4
  3992  0C3A  0084               	movwf	4
  3993  0C3B  0800               	movf	0,w
  3994  0C3C  3903               	andlw	3
  3995                           
  3996                           ; Switch size 1, requested type "space"
  3997                           ; Number of cases is 2, Range of values is 0 to 1
  3998                           ; switch strategies available:
  3999                           ; Name         Instructions Cycles
  4000                           ; simple_byte            7     4 (average)
  4001                           ; direct_byte           14     8 (fixed)
  4002                           ; jumptable            260     6 (fixed)
  4003                           ;	Chosen strategy is simple_byte
  4004  0C3D  3A00               	xorlw	0	; case 0
  4005  0C3E  1903               	skipnz
  4006  0C3F  2C32               	goto	l52
  4007  0C40  3A01               	xorlw	1	; case 1
  4008  0C41  1903               	skipnz
  4009  0C42  2C2C               	goto	l50
  4010  0C43  2C44               	goto	l3318
  4011  0C44                     l3318:	
  4012                           
  4013                           ;adc.c: 121: _delay((unsigned long)((20)*((20000000)/4000000.0)));
  4014  0C44  3020               	movlw	32
  4015  0C45  1683               	bsf	3,5	;RP0=1, select bank3
  4016  0C46  1703               	bsf	3,6	;RP1=1, select bank3
  4017  0C47  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4018  0C48                     u3777:	
  4019  0C48  0BC6               	decfsz	??_ADC_Start_Conv^(0+384),f
  4020  0C49  2C48               	goto	u3777
  4021  0C4A  0000               	nop
  4022                           
  4023                           ;adc.c: 124: ADCON0bits.GO = 1;
  4024  0C4B  1283               	bcf	3,5	;RP0=0, select bank0
  4025  0C4C  1303               	bcf	3,6	;RP1=0, select bank0
  4026  0C4D  149F               	bsf	31,1	;volatile
  4027                           
  4028                           ;adc.c: 125: switch(set_adc_parameters->adc_cur_service_type)
  4029  0C4E  2CD8               	goto	l3342
  4030  0C4F                     l55:	
  4031                           ;adc.c: 128: while(GO == 1);
  4032                           
  4033                           ;adc.c: 126: {
  4034                           ;adc.c: 127: case (0x00):
  4035                           
  4036  0C4F  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0C50  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0C51  189F               	btfsc	31,1	;volatile
  4039  0C52  2C4F               	goto	l55
  4040                           
  4041                           ;adc.c: 130: ADIF = 0;
  4042  0C53  130C               	bcf	12,6	;volatile
  4043                           
  4044                           ;adc.c: 132: if(ADFM == 1)
  4045  0C54  1683               	bsf	3,5	;RP0=1, select bank1
  4046  0C55  1303               	bcf	3,6	;RP1=0, select bank1
  4047  0C56  1F9F               	btfss	31,7	;volatile
  4048  0C57  2C8F               	goto	l3330
  4049                           
  4050                           ;adc.c: 133: {
  4051                           ;adc.c: 134: adc_value_least_byte = ADRESL;
  4052  0C58  081E               	movf	30,w	;volatile
  4053  0C59  1683               	bsf	3,5	;RP0=1, select bank3
  4054  0C5A  1703               	bsf	3,6	;RP1=1, select bank3
  4055  0C5B  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4056  0C5C  01C7               	clrf	(??_ADC_Start_Conv^(0+384)+1)
  4057  0C5D  0846               	movf	??_ADC_Start_Conv^(0+384),w
  4058  0C5E  00CD               	movwf	ADC_Start_Conv@adc_value_least_byte^(0+384)
  4059  0C5F  0847               	movf	(??_ADC_Start_Conv+1)^(0+384),w
  4060  0C60  00CE               	movwf	(ADC_Start_Conv@adc_value_least_byte+1)^(0+384)
  4061                           
  4062                           ;adc.c: 135: adc_value_most_byte = ADRESH & 0x03u;
  4063  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  4064  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  4065  0C63  081E               	movf	30,w	;volatile
  4066  0C64  3903               	andlw	3
  4067  0C65  1683               	bsf	3,5	;RP0=1, select bank3
  4068  0C66  1703               	bsf	3,6	;RP1=1, select bank3
  4069  0C67  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4070  0C68  01C7               	clrf	(??_ADC_Start_Conv^(0+384)+1)
  4071  0C69  0846               	movf	??_ADC_Start_Conv^(0+384),w
  4072  0C6A  00CF               	movwf	ADC_Start_Conv@adc_value_most_byte^(0+384)
  4073  0C6B  0847               	movf	(??_ADC_Start_Conv+1)^(0+384),w
  4074  0C6C  00D0               	movwf	(ADC_Start_Conv@adc_value_most_byte+1)^(0+384)
  4075                           
  4076                           ;adc.c: 136: adc_value_most_byte <<= 8;
  4077  0C6D  3008               	movlw	8
  4078  0C6E                     u3215:	
  4079  0C6E  1003               	clrc
  4080  0C6F  0DCF               	rlf	ADC_Start_Conv@adc_value_most_byte^(0+384),f
  4081  0C70  0DD0               	rlf	(ADC_Start_Conv@adc_value_most_byte+1)^(0+384),f
  4082  0C71  3EFF               	addlw	-1
  4083  0C72  1D03               	skipz
  4084  0C73  2C6E               	goto	u3215
  4085                           
  4086                           ;adc.c: 137: set_adc_parameters->adc_value_channel = (adc_value_most_byte) | adc_value_l
      +                          east_byte;
  4087  0C74  084D               	movf	ADC_Start_Conv@adc_value_least_byte^(0+384),w
  4088  0C75  044F               	iorwf	ADC_Start_Conv@adc_value_most_byte^(0+384),w
  4089  0C76  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4090  0C77  084E               	movf	(ADC_Start_Conv@adc_value_least_byte+1)^(0+384),w
  4091  0C78  0450               	iorwf	(ADC_Start_Conv@adc_value_most_byte+1)^(0+384),w
  4092  0C79  00C7               	movwf	(??_ADC_Start_Conv+1)^(0+384)
  4093  0C7A  0846               	movf	??_ADC_Start_Conv^(0+384),w
  4094  0C7B  00C8               	movwf	(??_ADC_Start_Conv+2)^(0+384)
  4095  0C7C  0847               	movf	(??_ADC_Start_Conv+1)^(0+384),w
  4096  0C7D  00C9               	movwf	((??_ADC_Start_Conv+2)^(0+384)+1)
  4097  0C7E  01CA               	clrf	((??_ADC_Start_Conv+2)^(0+384)+2)
  4098  0C7F  01CB               	clrf	((??_ADC_Start_Conv+2)^(0+384)+3)
  4099  0C80  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  4100  0C81  0084               	movwf	4
  4101  0C82  0848               	movf	(??_ADC_Start_Conv+2)^(0+384),w
  4102  0C83  1783               	bsf	3,7	;select IRP bank2
  4103  0C84  0080               	movwf	0
  4104  0C85  0A84               	incf	4,f
  4105  0C86  0849               	movf	(??_ADC_Start_Conv+3)^(0+384),w
  4106  0C87  0080               	movwf	0
  4107  0C88  0A84               	incf	4,f
  4108  0C89  084A               	movf	(??_ADC_Start_Conv+4)^(0+384),w
  4109  0C8A  0080               	movwf	0
  4110  0C8B  0A84               	incf	4,f
  4111  0C8C  084B               	movf	(??_ADC_Start_Conv+5)^(0+384),w
  4112  0C8D  0080               	movwf	0
  4113                           
  4114                           ;adc.c: 138: }
  4115  0C8E  0008               	return
  4116  0C8F                     l3330:	
  4117                           
  4118                           ;adc.c: 139: else
  4119                           ;adc.c: 140: {
  4120                           ;adc.c: 141: adc_value_least_byte = ADRESL & 0xC0;
  4121  0C8F  1303               	bcf	3,6	;RP1=0, select bank1
  4122  0C90  081E               	movf	30,w	;volatile
  4123  0C91  39C0               	andlw	192
  4124  0C92  1683               	bsf	3,5	;RP0=1, select bank3
  4125  0C93  1703               	bsf	3,6	;RP1=1, select bank3
  4126  0C94  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4127  0C95  01C7               	clrf	(??_ADC_Start_Conv^(0+384)+1)
  4128  0C96  0846               	movf	??_ADC_Start_Conv^(0+384),w
  4129  0C97  00CD               	movwf	ADC_Start_Conv@adc_value_least_byte^(0+384)
  4130  0C98  0847               	movf	(??_ADC_Start_Conv+1)^(0+384),w
  4131  0C99  00CE               	movwf	(ADC_Start_Conv@adc_value_least_byte+1)^(0+384)
  4132                           
  4133                           ;adc.c: 142: adc_value_most_byte = ADRESH ;
  4134  0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  4135  0C9B  1303               	bcf	3,6	;RP1=0, select bank0
  4136  0C9C  081E               	movf	30,w	;volatile
  4137  0C9D  1683               	bsf	3,5	;RP0=1, select bank3
  4138  0C9E  1703               	bsf	3,6	;RP1=1, select bank3
  4139  0C9F  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4140  0CA0  01C7               	clrf	(??_ADC_Start_Conv^(0+384)+1)
  4141  0CA1  0846               	movf	??_ADC_Start_Conv^(0+384),w
  4142  0CA2  00CF               	movwf	ADC_Start_Conv@adc_value_most_byte^(0+384)
  4143  0CA3  0847               	movf	(??_ADC_Start_Conv+1)^(0+384),w
  4144  0CA4  00D0               	movwf	(ADC_Start_Conv@adc_value_most_byte+1)^(0+384)
  4145                           
  4146                           ;adc.c: 143: adc_value_most_byte <<= 8;
  4147  0CA5  3008               	movlw	8
  4148  0CA6                     u3225:	
  4149  0CA6  1003               	clrc
  4150  0CA7  0DCF               	rlf	ADC_Start_Conv@adc_value_most_byte^(0+384),f
  4151  0CA8  0DD0               	rlf	(ADC_Start_Conv@adc_value_most_byte+1)^(0+384),f
  4152  0CA9  3EFF               	addlw	-1
  4153  0CAA  1D03               	skipz
  4154  0CAB  2CA6               	goto	u3225
  4155                           
  4156                           ;adc.c: 144: set_adc_parameters->adc_value_channel = adc_value_most_byte | adc_value_lea
      +                          st_byte;
  4157  0CAC  084D               	movf	ADC_Start_Conv@adc_value_least_byte^(0+384),w
  4158  0CAD  044F               	iorwf	ADC_Start_Conv@adc_value_most_byte^(0+384),w
  4159  0CAE  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4160  0CAF  084E               	movf	(ADC_Start_Conv@adc_value_least_byte+1)^(0+384),w
  4161  0CB0  0450               	iorwf	(ADC_Start_Conv@adc_value_most_byte+1)^(0+384),w
  4162  0CB1  00C7               	movwf	(??_ADC_Start_Conv+1)^(0+384)
  4163  0CB2  0846               	movf	??_ADC_Start_Conv^(0+384),w
  4164  0CB3  00C8               	movwf	(??_ADC_Start_Conv+2)^(0+384)
  4165  0CB4  0847               	movf	(??_ADC_Start_Conv+1)^(0+384),w
  4166  0CB5  00C9               	movwf	((??_ADC_Start_Conv+2)^(0+384)+1)
  4167  0CB6  01CA               	clrf	((??_ADC_Start_Conv+2)^(0+384)+2)
  4168  0CB7  01CB               	clrf	((??_ADC_Start_Conv+2)^(0+384)+3)
  4169  0CB8  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  4170  0CB9  0084               	movwf	4
  4171  0CBA  0848               	movf	(??_ADC_Start_Conv+2)^(0+384),w
  4172  0CBB  1783               	bsf	3,7	;select IRP bank2
  4173  0CBC  0080               	movwf	0
  4174  0CBD  0A84               	incf	4,f
  4175  0CBE  0849               	movf	(??_ADC_Start_Conv+3)^(0+384),w
  4176  0CBF  0080               	movwf	0
  4177  0CC0  0A84               	incf	4,f
  4178  0CC1  084A               	movf	(??_ADC_Start_Conv+4)^(0+384),w
  4179  0CC2  0080               	movwf	0
  4180  0CC3  0A84               	incf	4,f
  4181  0CC4  084B               	movf	(??_ADC_Start_Conv+5)^(0+384),w
  4182  0CC5  0080               	movwf	0
  4183                           
  4184                           ;adc.c: 145: set_adc_parameters->adc_value_channel >>= 6;
  4185  0CC6  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  4186  0CC7  0084               	movwf	4
  4187  0CC8  3006               	movlw	6
  4188  0CC9                     u3235:	
  4189  0CC9  0A84               	incf	4,f
  4190  0CCA  0A84               	incf	4,f
  4191  0CCB  0A84               	incf	4,f
  4192  0CCC  1003               	clrc
  4193  0CCD  0C80               	rrf	0,f
  4194  0CCE  0384               	decf	4,f
  4195  0CCF  0C80               	rrf	0,f
  4196  0CD0  0384               	decf	4,f
  4197  0CD1  0C80               	rrf	0,f
  4198  0CD2  0384               	decf	4,f
  4199  0CD3  0C80               	rrf	0,f
  4200  0CD4  3EFF               	addlw	-1
  4201  0CD5  1903               	btfsc	3,2
  4202                           
  4203                           ;adc.c: 151: }
  4204                           
  4205                           ;adc.c: 146: }
  4206                           ;adc.c: 150: break;
  4207  0CD6  0008               	return
  4208  0CD7  2CC9               	goto	u3235
  4209  0CD8                     l3342:	
  4210  0CD8  1683               	bsf	3,5	;RP0=1, select bank3
  4211  0CD9  1703               	bsf	3,6	;RP1=1, select bank3
  4212  0CDA  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  4213  0CDB  3E04               	addlw	4
  4214  0CDC  0084               	movwf	4
  4215  0CDD  1783               	bsf	3,7	;select IRP bank2
  4216  0CDE  0800               	movf	0,w
  4217  0CDF  3903               	andlw	3
  4218                           
  4219                           ; Switch size 1, requested type "space"
  4220                           ; Number of cases is 1, Range of values is 0 to 0
  4221                           ; switch strategies available:
  4222                           ; Name         Instructions Cycles
  4223                           ; simple_byte            4     3 (average)
  4224                           ; direct_byte           11     8 (fixed)
  4225                           ; jumptable            260     6 (fixed)
  4226                           ;	Chosen strategy is simple_byte
  4227  0CE0  3A00               	xorlw	0	; case 0
  4228  0CE1  1903               	skipnz
  4229  0CE2  2C4F               	goto	l55
  4230  0CE3  2D54               	goto	l65
  4231                           
  4232                           ;adc.c: 152: }
  4233  0CE4  0008               	return
  4234  0CE5                     l3344:	
  4235                           
  4236                           ;adc.c: 153: else
  4237                           ;adc.c: 154: {
  4238                           ;adc.c: 156: to_disp.signed_val.val_in_bytes.value_byte[0] = adc_cur_channel;
  4239  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  4240  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  4241  0CE7  0861               	movf	_adc_cur_channel,w
  4242  0CE8  1683               	bsf	3,5	;RP0=1, select bank3
  4243  0CE9  1703               	bsf	3,6	;RP1=1, select bank3
  4244  0CEA  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4245  0CEB  01C7               	clrf	(??_ADC_Start_Conv^(0+384)+1)
  4246  0CEC  0846               	movf	??_ADC_Start_Conv^(0+384),w
  4247  0CED  00B8               	movwf	_to_disp^(0+384)
  4248  0CEE  0847               	movf	(??_ADC_Start_Conv+1)^(0+384),w
  4249  0CEF  00B9               	movwf	(_to_disp+1)^(0+384)
  4250                           
  4251                           ;adc.c: 157: UART_Transmit_Str("ERR: invalid ADC channel select : ");
  4252  0CF0  3010               	movlw	low (STR_1| (0+32768))
  4253  0CF1  1283               	bcf	3,5	;RP0=0, select bank0
  4254  0CF2  1303               	bcf	3,6	;RP1=0, select bank0
  4255  0CF3  00AE               	movwf	UART_Transmit_Str@transmit_str
  4256  0CF4  3091               	movlw	high (STR_1| (0+32768))
  4257  0CF5  00AF               	movwf	UART_Transmit_Str@transmit_str+1
  4258  0CF6  120A  158A  217A  120A  158A  	fcall	_UART_Transmit_Str
  4259                           
  4260                           ;adc.c: 158: UART_Transmit_Num(DISP_SIGN_NUM_DIGIT2, to_disp );
  4261  0CFB  1683               	bsf	3,5	;RP0=1, select bank3
  4262  0CFC  1703               	bsf	3,6	;RP1=1, select bank3
  4263  0CFD  083B               	movf	(_to_disp+3)^(0+384),w
  4264  0CFE  1683               	bsf	3,5	;RP0=1, select bank1
  4265  0CFF  1303               	bcf	3,6	;RP1=0, select bank1
  4266  0D00  00A3               	movwf	(UART_Transmit_Num@uart_disp_data_int+3)^(0+128)
  4267  0D01  1683               	bsf	3,5	;RP0=1, select bank3
  4268  0D02  1703               	bsf	3,6	;RP1=1, select bank3
  4269  0D03  083A               	movf	(_to_disp+2)^(0+384),w
  4270  0D04  1683               	bsf	3,5	;RP0=1, select bank1
  4271  0D05  1303               	bcf	3,6	;RP1=0, select bank1
  4272  0D06  00A2               	movwf	(UART_Transmit_Num@uart_disp_data_int+2)^(0+128)
  4273  0D07  1683               	bsf	3,5	;RP0=1, select bank3
  4274  0D08  1703               	bsf	3,6	;RP1=1, select bank3
  4275  0D09  0839               	movf	(_to_disp+1)^(0+384),w
  4276  0D0A  1683               	bsf	3,5	;RP0=1, select bank1
  4277  0D0B  1303               	bcf	3,6	;RP1=0, select bank1
  4278  0D0C  00A1               	movwf	(UART_Transmit_Num@uart_disp_data_int+1)^(0+128)
  4279  0D0D  1683               	bsf	3,5	;RP0=1, select bank3
  4280  0D0E  1703               	bsf	3,6	;RP1=1, select bank3
  4281  0D0F  0838               	movf	_to_disp^(0+384),w
  4282  0D10  1683               	bsf	3,5	;RP0=1, select bank1
  4283  0D11  1303               	bcf	3,6	;RP1=0, select bank1
  4284  0D12  00A0               	movwf	UART_Transmit_Num@uart_disp_data_int^(0+128)
  4285  0D13  3012               	movlw	18
  4286  0D14  120A  118A  23EB  120A  158A  	fcall	_UART_Transmit_Num
  4287                           
  4288                           ;adc.c: 159: UART_Transmit_Char(('\r'));
  4289  0D19  300D               	movlw	13
  4290  0D1A  120A  118A  27F4   	fcall	_UART_Transmit_Char
  4291                           
  4292                           ;adc.c: 161: }
  4293                           ;adc.c: 162: }
  4294  0D1D  0008               	return
  4295  0D1E                     l3352:	
  4296                           
  4297                           ;adc.c: 163: else
  4298                           ;adc.c: 164: {
  4299                           ;adc.c: 165: ADCON0 = (set_adc_parameters->adc_clk_src_type << 6)| (7 << 3) | (set_adc_p
      +                          arameters->volt_ref << 2) ;
  4300  0D1E  1683               	bsf	3,5	;RP0=1, select bank3
  4301  0D1F  1703               	bsf	3,6	;RP1=1, select bank3
  4302  0D20  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  4303  0D21  3E04               	addlw	4
  4304  0D22  0084               	movwf	4
  4305  0D23  1783               	bsf	3,7	;select IRP bank2
  4306  0D24  0E00               	swapf	0,w
  4307  0D25  3901               	andlw	1
  4308  0D26  00C6               	movwf	??_ADC_Start_Conv^(0+384)
  4309  0D27  3002               	movlw	2
  4310  0D28                     u3245:	
  4311  0D28  1003               	clrc
  4312  0D29  0DC6               	rlf	??_ADC_Start_Conv^(0+384),f
  4313  0D2A  3EFF               	addlw	-1
  4314  0D2B  1D03               	skipz
  4315  0D2C  2D28               	goto	u3245
  4316  0D2D  0851               	movf	ADC_Start_Conv@set_adc_parameters^(0+384),w
  4317  0D2E  3E04               	addlw	4
  4318  0D2F  0084               	movwf	4
  4319  0D30  0C00               	rrf	0,w
  4320  0D31  00C7               	movwf	(??_ADC_Start_Conv+1)^(0+384)
  4321  0D32  0C47               	rrf	(??_ADC_Start_Conv+1)^(0+384),w
  4322  0D33  3903               	andlw	3
  4323  0D34  00C8               	movwf	(??_ADC_Start_Conv+2)^(0+384)
  4324  0D35  3005               	movlw	5
  4325  0D36                     u3255:	
  4326  0D36  1003               	clrc
  4327  0D37  0DC8               	rlf	(??_ADC_Start_Conv+2)^(0+384),f
  4328  0D38  3EFF               	addlw	-1
  4329  0D39  1D03               	skipz
  4330  0D3A  2D36               	goto	u3255
  4331  0D3B  1003               	clrc
  4332  0D3C  0D48               	rlf	(??_ADC_Start_Conv+2)^(0+384),w
  4333  0D3D  0446               	iorwf	??_ADC_Start_Conv^(0+384),w
  4334  0D3E  3838               	iorlw	56
  4335  0D3F  1283               	bcf	3,5	;RP0=0, select bank0
  4336  0D40  1303               	bcf	3,6	;RP1=0, select bank0
  4337  0D41  009F               	movwf	31	;volatile
  4338                           
  4339                           ;adc.c: 166: }
  4340                           ;adc.c: 167: break;
  4341  0D42  0008               	return
  4342  0D43                     l3354:	
  4343                           ;adc.c: 168: default:
  4344                           
  4345                           
  4346                           ;adc.c: 171: UART_Transmit_Str("ERR: try to start ADC while ADC Converting \r");
  4347  0D43  30E3               	movlw	low (STR_2| (0+32768))
  4348  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  4349  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  4350  0D46  00AE               	movwf	UART_Transmit_Str@transmit_str
  4351  0D47  3090               	movlw	high (STR_2| (0+32768))
  4352  0D48  00AF               	movwf	UART_Transmit_Str@transmit_str+1
  4353  0D49  120A  158A  217A   	fcall	_UART_Transmit_Str
  4354                           
  4355                           ;adc.c: 173: }
  4356  0D4C  0008               	return
  4357  0D4D                     l3356:	
  4358  0D4D  1683               	bsf	3,5	;RP0=1, select bank3
  4359  0D4E  1703               	bsf	3,6	;RP1=1, select bank3
  4360  0D4F  084C               	movf	ADC_Start_Conv@rcvd_status^(0+384),w
  4361                           
  4362                           ; Switch size 1, requested type "space"
  4363                           ; Number of cases is 1, Range of values is 110 to 110
  4364                           ; switch strategies available:
  4365                           ; Name         Instructions Cycles
  4366                           ; simple_byte            4     3 (average)
  4367                           ; direct_byte           14    11 (fixed)
  4368                           ; jumptable            263     9 (fixed)
  4369                           ;	Chosen strategy is simple_byte
  4370  0D50  3A6E               	xorlw	110	; case 110
  4371  0D51  1903               	skipnz
  4372  0D52  2BCB               	goto	l3304
  4373  0D53  2D43               	goto	l3354
  4374  0D54                     l65:	
  4375  0D54  0008               	return
  4376  0D55                     __end_of_ADC_Start_Conv:	
  4377                           
  4378                           	psect	text5
  4379  097A                     __ptext5:	
  4380 ;; *************** function _UART_Transmit_Str *****************
  4381 ;; Defined at:
  4382 ;;		line 83 in file "uart.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  transmit_str    2   14[BANK0 ] PTR const unsigned char 
  4385 ;;		 -> STR_11(54), STR_10(46), STR_9(52), STR_8(13), 
  4386 ;;		 -> STR_7(13), STR_6(29), STR_5(33), STR_4(33), 
  4387 ;;		 -> STR_3(47), STR_2(45), STR_1(35), 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4399 ;;      Params:         0       2       0       0       0
  4400 ;;      Locals:         0       0       0       0       0
  4401 ;;      Temps:          0       0       0       0       0
  4402 ;;      Totals:         0       2       0       0       0
  4403 ;;Total ram usage:        2 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    3
  4406 ;; This function calls:
  4407 ;;		_UART_Transmit_Char
  4408 ;; This function is called by:
  4409 ;;		_ADC_Start_Conv
  4410 ;;		_main
  4411 ;;		_ADC_Disable
  4412 ;;		_UART_Receive_Char
  4413 ;;		_Timer1_Run
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function _UART_Transmit_Str
  4419  097A                     _UART_Transmit_Str:	
  4420  097A                     l3192:	
  4421                           ;uart.c: 85: while(*transmit_str)
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _UART_Transmit_Str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4425                           
  4426  097A  1283               	bcf	3,5	;RP0=0, select bank0
  4427  097B  1303               	bcf	3,6	;RP1=0, select bank0
  4428  097C  082F               	movf	UART_Transmit_Str@transmit_str+1,w
  4429  097D  00FF               	movwf	127
  4430  097E  082E               	movf	UART_Transmit_Str@transmit_str,w
  4431  097F  0084               	movwf	4
  4432  0980  160A  118A  2000  120A  158A  	fcall	stringtab
  4433  0985  3A00               	xorlw	0
  4434  0986  1903               	btfsc	3,2
  4435  0987  0008               	return
  4436                           
  4437                           ;uart.c: 86: {
  4438                           ;uart.c: 87: UART_Transmit_Char(*transmit_str);
  4439  0988  1283               	bcf	3,5	;RP0=0, select bank0
  4440  0989  1303               	bcf	3,6	;RP1=0, select bank0
  4441  098A  082F               	movf	UART_Transmit_Str@transmit_str+1,w
  4442  098B  00FF               	movwf	127
  4443  098C  082E               	movf	UART_Transmit_Str@transmit_str,w
  4444  098D  0084               	movwf	4
  4445  098E  160A  118A  2000  120A  158A  	fcall	stringtab
  4446  0993  120A  118A  27F4  120A  158A  	fcall	_UART_Transmit_Char
  4447                           
  4448                           ;uart.c: 88: ++transmit_str;
  4449  0998  3001               	movlw	1
  4450  0999  1283               	bcf	3,5	;RP0=0, select bank0
  4451  099A  1303               	bcf	3,6	;RP1=0, select bank0
  4452  099B  07AE               	addwf	UART_Transmit_Str@transmit_str,f
  4453  099C  1803               	skipnc
  4454  099D  0AAF               	incf	UART_Transmit_Str@transmit_str+1,f
  4455  099E  297A               	goto	l3192
  4456  099F                     __end_of_UART_Transmit_Str:	
  4457                           
  4458                           	psect	text6
  4459  03EB                     __ptext6:	
  4460 ;; *************** function _UART_Transmit_Num *****************
  4461 ;; Defined at:
  4462 ;;		line 370 in file "uart.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  uart_datanum    1    wreg     const enum E1694
  4465 ;;  uart_disp_da    4    0[BANK1 ] const struct .
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  uart_datanum    1   36[BANK1 ] const enum E1694
  4468 ;;  hex_data       16    8[BANK1 ] unsigned char [16]
  4469 ;;  num_data       10   24[BANK1 ] unsigned char [10]
  4470 ;;  disp_num        4   49[BANK1 ] unsigned long 
  4471 ;;  num             4   45[BANK1 ] unsigned long 
  4472 ;;  unit_digit      2   43[BANK1 ] unsigned int 
  4473 ;;  tens_digit      2   41[BANK1 ] unsigned int 
  4474 ;;  hundreds_dig    2   39[BANK1 ] unsigned int 
  4475 ;;  thousands_di    2   37[BANK1 ] unsigned int 
  4476 ;;  tens_thousan    2   34[BANK1 ] unsigned int 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4486 ;;      Params:         0       0       4       0       0
  4487 ;;      Locals:         0       0      45       0       0
  4488 ;;      Temps:          0       0       4       0       0
  4489 ;;      Totals:         0       0      53       0       0
  4490 ;;Total ram usage:       53 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    3
  4493 ;; This function calls:
  4494 ;;		_UART_Transmit_Char
  4495 ;;		___lldiv
  4496 ;;		___llmod
  4497 ;; This function is called by:
  4498 ;;		_ADC_Start_Conv
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           
  4503                           ;psect for function _UART_Transmit_Num
  4504  03EB                     _UART_Transmit_Num:	
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _UART_Transmit_Num: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4508                           ;UART_Transmit_Num@uart_datanum_disp_format stored from wreg
  4509  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  4510  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  4511  03ED  00C4               	movwf	UART_Transmit_Num@uart_datanum_disp_format^(0+128)
  4512                           
  4513                           ;uart.c: 372: unsigned int tens_thousand_digit,thousands_digit, hundreds_digit,tens_digi
      +                          t, unit_digit;
  4514                           ;uart.c: 373: unsigned long disp_num, num ;
  4515                           ;uart.c: 374: char num_data[] ={'0','1','2','3','4','5','6','7','8','9'};
  4516  03EE  30B8               	movlw	UART_Transmit_Num@num_data& (0+255)
  4517  03EF  0084               	movwf	4
  4518  03F0  3030               	movlw	low UART_Transmit_Num@F1843
  4519  03F1  00A4               	movwf	??_UART_Transmit_Num^(0+128)
  4520  03F2  0804               	movf	4,w
  4521  03F3  00A5               	movwf	(??_UART_Transmit_Num^(0+128)+1)
  4522  03F4  300A               	movlw	10
  4523  03F5  00A6               	movwf	(??_UART_Transmit_Num^(0+128)+2)
  4524  03F6                     u2970:	
  4525  03F6  0824               	movf	??_UART_Transmit_Num^(0+128),w
  4526  03F7  0084               	movwf	4
  4527  03F8  1783               	bsf	3,7	;select IRP bank2
  4528  03F9  0800               	movf	0,w
  4529  03FA  00A7               	movwf	(??_UART_Transmit_Num^(0+128)+3)
  4530  03FB  0AA4               	incf	??_UART_Transmit_Num^(0+128),f
  4531  03FC  0825               	movf	(??_UART_Transmit_Num^(0+128)+1),w
  4532  03FD  0084               	movwf	4
  4533  03FE  1383               	bcf	3,7	;select IRP bank1
  4534  03FF  0827               	movf	(??_UART_Transmit_Num^(0+128)+3),w
  4535  0400  0080               	movwf	0
  4536  0401  0AA5               	incf	(??_UART_Transmit_Num^(0+128)+1),f
  4537  0402  0BA6               	decfsz	(??_UART_Transmit_Num^(0+128)+2),f
  4538  0403  2BF6               	goto	u2970
  4539                           
  4540                           ;uart.c: 375: char hex_data[] ={'0','1','2','3','4','5','6','7','8','9','A','B','C','D',
      +                          'E','F'};
  4541  0404  30A8               	movlw	UART_Transmit_Num@hex_data& (0+255)
  4542  0405  0084               	movwf	4
  4543  0406  3010               	movlw	low UART_Transmit_Num@F1845
  4544  0407  00A4               	movwf	??_UART_Transmit_Num^(0+128)
  4545  0408  0804               	movf	4,w
  4546  0409  00A5               	movwf	(??_UART_Transmit_Num^(0+128)+1)
  4547  040A  3010               	movlw	16
  4548  040B  00A6               	movwf	(??_UART_Transmit_Num^(0+128)+2)
  4549  040C                     u2980:	
  4550  040C  0824               	movf	??_UART_Transmit_Num^(0+128),w
  4551  040D  0084               	movwf	4
  4552  040E  1783               	bsf	3,7	;select IRP bank2
  4553  040F  0800               	movf	0,w
  4554  0410  00A7               	movwf	(??_UART_Transmit_Num^(0+128)+3)
  4555  0411  0AA4               	incf	??_UART_Transmit_Num^(0+128),f
  4556  0412  0825               	movf	(??_UART_Transmit_Num^(0+128)+1),w
  4557  0413  0084               	movwf	4
  4558  0414  1383               	bcf	3,7	;select IRP bank1
  4559  0415  0827               	movf	(??_UART_Transmit_Num^(0+128)+3),w
  4560  0416  0080               	movwf	0
  4561  0417  0AA5               	incf	(??_UART_Transmit_Num^(0+128)+1),f
  4562  0418  0BA6               	decfsz	(??_UART_Transmit_Num^(0+128)+2),f
  4563  0419  2C0C               	goto	u2980
  4564                           
  4565                           ;uart.c: 378: if(uart_datanum_disp_format & 0x10 )
  4566  041A  1E44               	btfss	UART_Transmit_Num@uart_datanum_disp_format^(0+128),4
  4567  041B  2C3E               	goto	l3208
  4568                           
  4569                           ;uart.c: 379: {
  4570                           ;uart.c: 380: if(uart_disp_data_int.signed_val.value_long < 0 )
  4571  041C  1FA3               	btfss	(UART_Transmit_Num@uart_disp_data_int+3)^(0+128),7
  4572  041D  2C36               	goto	l3204
  4573                           
  4574                           ;uart.c: 381: {
  4575                           ;uart.c: 382: UART_Transmit_Char('-');
  4576  041E  302D               	movlw	45
  4577  041F  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  4578                           
  4579                           ;uart.c: 383: disp_num = -uart_disp_data_int.signed_val.value_long;
  4580  0424  1683               	bsf	3,5	;RP0=1, select bank1
  4581  0425  1303               	bcf	3,6	;RP1=0, select bank1
  4582  0426  0920               	comf	UART_Transmit_Num@uart_disp_data_int^(0+128),w
  4583  0427  00D1               	movwf	UART_Transmit_Num@disp_num^(0+128)
  4584  0428  0921               	comf	(UART_Transmit_Num@uart_disp_data_int^(0+128)+1),w
  4585  0429  00D2               	movwf	(UART_Transmit_Num@disp_num+1)^(0+128)
  4586  042A  0922               	comf	(UART_Transmit_Num@uart_disp_data_int^(0+128)+2),w
  4587  042B  00D3               	movwf	(UART_Transmit_Num@disp_num+2)^(0+128)
  4588  042C  0923               	comf	(UART_Transmit_Num@uart_disp_data_int^(0+128)+3),w
  4589  042D  00D4               	movwf	(UART_Transmit_Num@disp_num+3)^(0+128)
  4590  042E  0AD1               	incf	UART_Transmit_Num@disp_num^(0+128),f
  4591  042F  1903               	skipnz
  4592  0430  0AD2               	incf	(UART_Transmit_Num@disp_num+1)^(0+128),f
  4593  0431  1903               	skipnz
  4594  0432  0AD3               	incf	(UART_Transmit_Num@disp_num+2)^(0+128),f
  4595  0433  1903               	skipnz
  4596  0434  0AD4               	incf	(UART_Transmit_Num@disp_num+3)^(0+128),f
  4597                           
  4598                           ;uart.c: 384: }
  4599  0435  2C46               	goto	l384
  4600  0436                     l3204:	
  4601                           
  4602                           ;uart.c: 385: else
  4603                           ;uart.c: 386: {
  4604                           ;uart.c: 387: UART_Transmit_Char('+');
  4605  0436  302B               	movlw	43
  4606  0437  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  4607                           
  4608                           ;uart.c: 388: disp_num = uart_disp_data_int.signed_val.value_long;
  4609  043C  1683               	bsf	3,5	;RP0=1, select bank1
  4610  043D  1303               	bcf	3,6	;RP1=0, select bank1
  4611  043E                     l3208:	
  4612                           ;uart.c: 389: }
  4613                           ;uart.c: 391: }
  4614                           
  4615                           
  4616                           ;uart.c: 392: else
  4617                           ;uart.c: 393: {
  4618                           ;uart.c: 394: disp_num = uart_disp_data_int.unsigned_val.value_long;
  4619  043E  0823               	movf	(UART_Transmit_Num@uart_disp_data_int+3)^(0+128),w
  4620  043F  00D4               	movwf	(UART_Transmit_Num@disp_num+3)^(0+128)
  4621  0440  0822               	movf	(UART_Transmit_Num@uart_disp_data_int+2)^(0+128),w
  4622  0441  00D3               	movwf	(UART_Transmit_Num@disp_num+2)^(0+128)
  4623  0442  0821               	movf	(UART_Transmit_Num@uart_disp_data_int+1)^(0+128),w
  4624  0443  00D2               	movwf	(UART_Transmit_Num@disp_num+1)^(0+128)
  4625  0444  0820               	movf	UART_Transmit_Num@uart_disp_data_int^(0+128),w
  4626  0445  00D1               	movwf	UART_Transmit_Num@disp_num^(0+128)
  4627  0446                     l384:	
  4628                           
  4629                           ;uart.c: 395: }
  4630                           ;uart.c: 396: num = disp_num ;
  4631  0446  0854               	movf	(UART_Transmit_Num@disp_num+3)^(0+128),w
  4632  0447  00D0               	movwf	(UART_Transmit_Num@num+3)^(0+128)
  4633  0448  0853               	movf	(UART_Transmit_Num@disp_num+2)^(0+128),w
  4634  0449  00CF               	movwf	(UART_Transmit_Num@num+2)^(0+128)
  4635  044A  0852               	movf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  4636  044B  00CE               	movwf	(UART_Transmit_Num@num+1)^(0+128)
  4637  044C  0851               	movf	UART_Transmit_Num@disp_num^(0+128),w
  4638  044D  00CD               	movwf	UART_Transmit_Num@num^(0+128)
  4639                           
  4640                           ;uart.c: 398: switch(uart_datanum_disp_format)
  4641  044E  2ED0               	goto	l3258
  4642  044F                     l3210:	
  4643                           ;uart.c: 399: {
  4644                           ;uart.c: 400: case DISP_UNSIGN_NUM_DIGIT5:
  4645                           
  4646                           
  4647                           ;uart.c: 401: case DISP_SIGN_NUM_DIGIT5:
  4648                           ;uart.c: 402: num = disp_num ;
  4649  044F  0854               	movf	(UART_Transmit_Num@disp_num+3)^(0+128),w
  4650  0450  00D0               	movwf	(UART_Transmit_Num@num+3)^(0+128)
  4651  0451  0853               	movf	(UART_Transmit_Num@disp_num+2)^(0+128),w
  4652  0452  00CF               	movwf	(UART_Transmit_Num@num+2)^(0+128)
  4653  0453  0852               	movf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  4654  0454  00CE               	movwf	(UART_Transmit_Num@num+1)^(0+128)
  4655  0455  0851               	movf	UART_Transmit_Num@disp_num^(0+128),w
  4656  0456  00CD               	movwf	UART_Transmit_Num@num^(0+128)
  4657                           
  4658                           ;uart.c: 403: tens_thousand_digit = (unsigned int)(num / (unsigned long)(10000UL));
  4659  0457  3000               	movlw	0
  4660  0458  1283               	bcf	3,5	;RP0=0, select bank0
  4661  0459  1303               	bcf	3,6	;RP1=0, select bank0
  4662  045A  00B0               	movwf	___lldiv@divisor+3
  4663  045B  3000               	movlw	0
  4664  045C  00AF               	movwf	___lldiv@divisor+2
  4665  045D  3027               	movlw	39
  4666  045E  00AE               	movwf	___lldiv@divisor+1
  4667  045F  3010               	movlw	16
  4668  0460  00AD               	movwf	___lldiv@divisor
  4669  0461  1683               	bsf	3,5	;RP0=1, select bank1
  4670  0462  1303               	bcf	3,6	;RP1=0, select bank1
  4671  0463  0850               	movf	(UART_Transmit_Num@num+3)^(0+128),w
  4672  0464  1283               	bcf	3,5	;RP0=0, select bank0
  4673  0465  1303               	bcf	3,6	;RP1=0, select bank0
  4674  0466  00B4               	movwf	___lldiv@dividend+3
  4675  0467  1683               	bsf	3,5	;RP0=1, select bank1
  4676  0468  1303               	bcf	3,6	;RP1=0, select bank1
  4677  0469  084F               	movf	(UART_Transmit_Num@num+2)^(0+128),w
  4678  046A  1283               	bcf	3,5	;RP0=0, select bank0
  4679  046B  1303               	bcf	3,6	;RP1=0, select bank0
  4680  046C  00B3               	movwf	___lldiv@dividend+2
  4681  046D  1683               	bsf	3,5	;RP0=1, select bank1
  4682  046E  1303               	bcf	3,6	;RP1=0, select bank1
  4683  046F  084E               	movf	(UART_Transmit_Num@num+1)^(0+128),w
  4684  0470  1283               	bcf	3,5	;RP0=0, select bank0
  4685  0471  1303               	bcf	3,6	;RP1=0, select bank0
  4686  0472  00B2               	movwf	___lldiv@dividend+1
  4687  0473  1683               	bsf	3,5	;RP0=1, select bank1
  4688  0474  1303               	bcf	3,6	;RP1=0, select bank1
  4689  0475  084D               	movf	UART_Transmit_Num@num^(0+128),w
  4690  0476  1283               	bcf	3,5	;RP0=0, select bank0
  4691  0477  1303               	bcf	3,6	;RP1=0, select bank0
  4692  0478  00B1               	movwf	___lldiv@dividend
  4693  0479  120A  118A  2760  120A  118A  	fcall	___lldiv
  4694  047E  1283               	bcf	3,5	;RP0=0, select bank0
  4695  047F  1303               	bcf	3,6	;RP1=0, select bank0
  4696  0480  082E               	movf	?___lldiv+1,w
  4697  0481  1683               	bsf	3,5	;RP0=1, select bank1
  4698  0482  1303               	bcf	3,6	;RP1=0, select bank1
  4699  0483  00C3               	movwf	(UART_Transmit_Num@tens_thousand_digit+1)^(0+128)
  4700  0484  1283               	bcf	3,5	;RP0=0, select bank0
  4701  0485  1303               	bcf	3,6	;RP1=0, select bank0
  4702  0486  082D               	movf	?___lldiv,w
  4703  0487  1683               	bsf	3,5	;RP0=1, select bank1
  4704  0488  1303               	bcf	3,6	;RP1=0, select bank1
  4705  0489  00C2               	movwf	UART_Transmit_Num@tens_thousand_digit^(0+128)
  4706                           
  4707                           ;uart.c: 404: UART_Transmit_Char(num_data[tens_thousand_digit]);
  4708  048A  0842               	movf	UART_Transmit_Num@tens_thousand_digit^(0+128),w
  4709  048B  3EB8               	addlw	(low (UART_Transmit_Num@num_data| 0))& (0+255)
  4710  048C  0084               	movwf	4
  4711  048D  1383               	bcf	3,7	;select IRP bank1
  4712  048E  0800               	movf	0,w
  4713  048F  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  4714  0494                     l3216:	
  4715                           ;uart.c: 405: case DISP_UNSIGN_NUM_DIGIT4:
  4716                           
  4717                           
  4718                           ;uart.c: 406: case DISP_SIGN_NUM_DIGIT4:
  4719                           ;uart.c: 407: num = disp_num % 10000UL;
  4720  0494  3000               	movlw	0
  4721  0495  1283               	bcf	3,5	;RP0=0, select bank0
  4722  0496  1303               	bcf	3,6	;RP1=0, select bank0
  4723  0497  00CB               	movwf	___llmod@divisor+3
  4724  0498  3000               	movlw	0
  4725  0499  00CA               	movwf	___llmod@divisor+2
  4726  049A  3027               	movlw	39
  4727  049B  00C9               	movwf	___llmod@divisor+1
  4728  049C  3010               	movlw	16
  4729  049D  00C8               	movwf	___llmod@divisor
  4730  049E  1683               	bsf	3,5	;RP0=1, select bank1
  4731  049F  1303               	bcf	3,6	;RP1=0, select bank1
  4732  04A0  0854               	movf	(UART_Transmit_Num@disp_num+3)^(0+128),w
  4733  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  4734  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  4735  04A3  00CF               	movwf	___llmod@dividend+3
  4736  04A4  1683               	bsf	3,5	;RP0=1, select bank1
  4737  04A5  1303               	bcf	3,6	;RP1=0, select bank1
  4738  04A6  0853               	movf	(UART_Transmit_Num@disp_num+2)^(0+128),w
  4739  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  4740  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  4741  04A9  00CE               	movwf	___llmod@dividend+2
  4742  04AA  1683               	bsf	3,5	;RP0=1, select bank1
  4743  04AB  1303               	bcf	3,6	;RP1=0, select bank1
  4744  04AC  0852               	movf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  4745  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  4746  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  4747  04AF  00CD               	movwf	___llmod@dividend+1
  4748  04B0  1683               	bsf	3,5	;RP0=1, select bank1
  4749  04B1  1303               	bcf	3,6	;RP1=0, select bank1
  4750  04B2  0851               	movf	UART_Transmit_Num@disp_num^(0+128),w
  4751  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  4752  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  4753  04B5  00CC               	movwf	___llmod@dividend
  4754  04B6  120A  158A  21E0  120A  118A  	fcall	___llmod
  4755  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  4756  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  4757  04BD  084B               	movf	?___llmod+3,w
  4758  04BE  1683               	bsf	3,5	;RP0=1, select bank1
  4759  04BF  1303               	bcf	3,6	;RP1=0, select bank1
  4760  04C0  00D0               	movwf	(UART_Transmit_Num@num+3)^(0+128)
  4761  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  4762  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  4763  04C3  084A               	movf	?___llmod+2,w
  4764  04C4  1683               	bsf	3,5	;RP0=1, select bank1
  4765  04C5  1303               	bcf	3,6	;RP1=0, select bank1
  4766  04C6  00CF               	movwf	(UART_Transmit_Num@num+2)^(0+128)
  4767  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  4768  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  4769  04C9  0849               	movf	?___llmod+1,w
  4770  04CA  1683               	bsf	3,5	;RP0=1, select bank1
  4771  04CB  1303               	bcf	3,6	;RP1=0, select bank1
  4772  04CC  00CE               	movwf	(UART_Transmit_Num@num+1)^(0+128)
  4773  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  4774  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  4775  04CF  0848               	movf	?___llmod,w
  4776  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  4777  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  4778  04D2  00CD               	movwf	UART_Transmit_Num@num^(0+128)
  4779                           
  4780                           ;uart.c: 408: thousands_digit = (unsigned int)(num / (unsigned long)(1000UL));
  4781  04D3  3000               	movlw	0
  4782  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  4783  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  4784  04D6  00B0               	movwf	___lldiv@divisor+3
  4785  04D7  3000               	movlw	0
  4786  04D8  00AF               	movwf	___lldiv@divisor+2
  4787  04D9  3003               	movlw	3
  4788  04DA  00AE               	movwf	___lldiv@divisor+1
  4789  04DB  30E8               	movlw	232
  4790  04DC  00AD               	movwf	___lldiv@divisor
  4791  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  4792  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  4793  04DF  0850               	movf	(UART_Transmit_Num@num+3)^(0+128),w
  4794  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  4795  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  4796  04E2  00B4               	movwf	___lldiv@dividend+3
  4797  04E3  1683               	bsf	3,5	;RP0=1, select bank1
  4798  04E4  1303               	bcf	3,6	;RP1=0, select bank1
  4799  04E5  084F               	movf	(UART_Transmit_Num@num+2)^(0+128),w
  4800  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  4801  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  4802  04E8  00B3               	movwf	___lldiv@dividend+2
  4803  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  4804  04EA  1303               	bcf	3,6	;RP1=0, select bank1
  4805  04EB  084E               	movf	(UART_Transmit_Num@num+1)^(0+128),w
  4806  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  4807  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  4808  04EE  00B2               	movwf	___lldiv@dividend+1
  4809  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  4810  04F0  1303               	bcf	3,6	;RP1=0, select bank1
  4811  04F1  084D               	movf	UART_Transmit_Num@num^(0+128),w
  4812  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  4813  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  4814  04F4  00B1               	movwf	___lldiv@dividend
  4815  04F5  120A  118A  2760  120A  118A  	fcall	___lldiv
  4816  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  4817  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  4818  04FC  082E               	movf	?___lldiv+1,w
  4819  04FD  1683               	bsf	3,5	;RP0=1, select bank1
  4820  04FE  1303               	bcf	3,6	;RP1=0, select bank1
  4821  04FF  00C6               	movwf	(UART_Transmit_Num@thousands_digit+1)^(0+128)
  4822  0500  1283               	bcf	3,5	;RP0=0, select bank0
  4823  0501  1303               	bcf	3,6	;RP1=0, select bank0
  4824  0502  082D               	movf	?___lldiv,w
  4825  0503  1683               	bsf	3,5	;RP0=1, select bank1
  4826  0504  1303               	bcf	3,6	;RP1=0, select bank1
  4827  0505  00C5               	movwf	UART_Transmit_Num@thousands_digit^(0+128)
  4828                           
  4829                           ;uart.c: 409: UART_Transmit_Char(num_data[thousands_digit]);
  4830  0506  0845               	movf	UART_Transmit_Num@thousands_digit^(0+128),w
  4831  0507  3EB8               	addlw	(low (UART_Transmit_Num@num_data| 0))& (0+255)
  4832  0508  0084               	movwf	4
  4833  0509  1383               	bcf	3,7	;select IRP bank1
  4834  050A  0800               	movf	0,w
  4835  050B  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  4836  0510                     l3222:	
  4837                           ;uart.c: 410: case DISP_UNSIGN_NUM_DIGIT3:
  4838                           
  4839                           
  4840                           ;uart.c: 411: case DISP_SIGN_NUM_DIGIT3:
  4841                           ;uart.c: 412: num = disp_num % 1000UL;
  4842  0510  3000               	movlw	0
  4843  0511  1283               	bcf	3,5	;RP0=0, select bank0
  4844  0512  1303               	bcf	3,6	;RP1=0, select bank0
  4845  0513  00CB               	movwf	___llmod@divisor+3
  4846  0514  3000               	movlw	0
  4847  0515  00CA               	movwf	___llmod@divisor+2
  4848  0516  3003               	movlw	3
  4849  0517  00C9               	movwf	___llmod@divisor+1
  4850  0518  30E8               	movlw	232
  4851  0519  00C8               	movwf	___llmod@divisor
  4852  051A  1683               	bsf	3,5	;RP0=1, select bank1
  4853  051B  1303               	bcf	3,6	;RP1=0, select bank1
  4854  051C  0854               	movf	(UART_Transmit_Num@disp_num+3)^(0+128),w
  4855  051D  1283               	bcf	3,5	;RP0=0, select bank0
  4856  051E  1303               	bcf	3,6	;RP1=0, select bank0
  4857  051F  00CF               	movwf	___llmod@dividend+3
  4858  0520  1683               	bsf	3,5	;RP0=1, select bank1
  4859  0521  1303               	bcf	3,6	;RP1=0, select bank1
  4860  0522  0853               	movf	(UART_Transmit_Num@disp_num+2)^(0+128),w
  4861  0523  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0524  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0525  00CE               	movwf	___llmod@dividend+2
  4864  0526  1683               	bsf	3,5	;RP0=1, select bank1
  4865  0527  1303               	bcf	3,6	;RP1=0, select bank1
  4866  0528  0852               	movf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  4867  0529  1283               	bcf	3,5	;RP0=0, select bank0
  4868  052A  1303               	bcf	3,6	;RP1=0, select bank0
  4869  052B  00CD               	movwf	___llmod@dividend+1
  4870  052C  1683               	bsf	3,5	;RP0=1, select bank1
  4871  052D  1303               	bcf	3,6	;RP1=0, select bank1
  4872  052E  0851               	movf	UART_Transmit_Num@disp_num^(0+128),w
  4873  052F  1283               	bcf	3,5	;RP0=0, select bank0
  4874  0530  1303               	bcf	3,6	;RP1=0, select bank0
  4875  0531  00CC               	movwf	___llmod@dividend
  4876  0532  120A  158A  21E0  120A  118A  	fcall	___llmod
  4877  0537  1283               	bcf	3,5	;RP0=0, select bank0
  4878  0538  1303               	bcf	3,6	;RP1=0, select bank0
  4879  0539  084B               	movf	?___llmod+3,w
  4880  053A  1683               	bsf	3,5	;RP0=1, select bank1
  4881  053B  1303               	bcf	3,6	;RP1=0, select bank1
  4882  053C  00D0               	movwf	(UART_Transmit_Num@num+3)^(0+128)
  4883  053D  1283               	bcf	3,5	;RP0=0, select bank0
  4884  053E  1303               	bcf	3,6	;RP1=0, select bank0
  4885  053F  084A               	movf	?___llmod+2,w
  4886  0540  1683               	bsf	3,5	;RP0=1, select bank1
  4887  0541  1303               	bcf	3,6	;RP1=0, select bank1
  4888  0542  00CF               	movwf	(UART_Transmit_Num@num+2)^(0+128)
  4889  0543  1283               	bcf	3,5	;RP0=0, select bank0
  4890  0544  1303               	bcf	3,6	;RP1=0, select bank0
  4891  0545  0849               	movf	?___llmod+1,w
  4892  0546  1683               	bsf	3,5	;RP0=1, select bank1
  4893  0547  1303               	bcf	3,6	;RP1=0, select bank1
  4894  0548  00CE               	movwf	(UART_Transmit_Num@num+1)^(0+128)
  4895  0549  1283               	bcf	3,5	;RP0=0, select bank0
  4896  054A  1303               	bcf	3,6	;RP1=0, select bank0
  4897  054B  0848               	movf	?___llmod,w
  4898  054C  1683               	bsf	3,5	;RP0=1, select bank1
  4899  054D  1303               	bcf	3,6	;RP1=0, select bank1
  4900  054E  00CD               	movwf	UART_Transmit_Num@num^(0+128)
  4901                           
  4902                           ;uart.c: 413: hundreds_digit = (unsigned int) (num / (unsigned long) (100));
  4903  054F  3000               	movlw	0
  4904  0550  1283               	bcf	3,5	;RP0=0, select bank0
  4905  0551  1303               	bcf	3,6	;RP1=0, select bank0
  4906  0552  00B0               	movwf	___lldiv@divisor+3
  4907  0553  3000               	movlw	0
  4908  0554  00AF               	movwf	___lldiv@divisor+2
  4909  0555  3000               	movlw	0
  4910  0556  00AE               	movwf	___lldiv@divisor+1
  4911  0557  3064               	movlw	100
  4912  0558  00AD               	movwf	___lldiv@divisor
  4913  0559  1683               	bsf	3,5	;RP0=1, select bank1
  4914  055A  1303               	bcf	3,6	;RP1=0, select bank1
  4915  055B  0850               	movf	(UART_Transmit_Num@num+3)^(0+128),w
  4916  055C  1283               	bcf	3,5	;RP0=0, select bank0
  4917  055D  1303               	bcf	3,6	;RP1=0, select bank0
  4918  055E  00B4               	movwf	___lldiv@dividend+3
  4919  055F  1683               	bsf	3,5	;RP0=1, select bank1
  4920  0560  1303               	bcf	3,6	;RP1=0, select bank1
  4921  0561  084F               	movf	(UART_Transmit_Num@num+2)^(0+128),w
  4922  0562  1283               	bcf	3,5	;RP0=0, select bank0
  4923  0563  1303               	bcf	3,6	;RP1=0, select bank0
  4924  0564  00B3               	movwf	___lldiv@dividend+2
  4925  0565  1683               	bsf	3,5	;RP0=1, select bank1
  4926  0566  1303               	bcf	3,6	;RP1=0, select bank1
  4927  0567  084E               	movf	(UART_Transmit_Num@num+1)^(0+128),w
  4928  0568  1283               	bcf	3,5	;RP0=0, select bank0
  4929  0569  1303               	bcf	3,6	;RP1=0, select bank0
  4930  056A  00B2               	movwf	___lldiv@dividend+1
  4931  056B  1683               	bsf	3,5	;RP0=1, select bank1
  4932  056C  1303               	bcf	3,6	;RP1=0, select bank1
  4933  056D  084D               	movf	UART_Transmit_Num@num^(0+128),w
  4934  056E  1283               	bcf	3,5	;RP0=0, select bank0
  4935  056F  1303               	bcf	3,6	;RP1=0, select bank0
  4936  0570  00B1               	movwf	___lldiv@dividend
  4937  0571  120A  118A  2760  120A  118A  	fcall	___lldiv
  4938  0576  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0577  1303               	bcf	3,6	;RP1=0, select bank0
  4940  0578  082E               	movf	?___lldiv+1,w
  4941  0579  1683               	bsf	3,5	;RP0=1, select bank1
  4942  057A  1303               	bcf	3,6	;RP1=0, select bank1
  4943  057B  00C8               	movwf	(UART_Transmit_Num@hundreds_digit+1)^(0+128)
  4944  057C  1283               	bcf	3,5	;RP0=0, select bank0
  4945  057D  1303               	bcf	3,6	;RP1=0, select bank0
  4946  057E  082D               	movf	?___lldiv,w
  4947  057F  1683               	bsf	3,5	;RP0=1, select bank1
  4948  0580  1303               	bcf	3,6	;RP1=0, select bank1
  4949  0581  00C7               	movwf	UART_Transmit_Num@hundreds_digit^(0+128)
  4950                           
  4951                           ;uart.c: 414: UART_Transmit_Char(num_data[hundreds_digit]);
  4952  0582  0847               	movf	UART_Transmit_Num@hundreds_digit^(0+128),w
  4953  0583  3EB8               	addlw	(low (UART_Transmit_Num@num_data| 0))& (0+255)
  4954  0584  0084               	movwf	4
  4955  0585  1383               	bcf	3,7	;select IRP bank1
  4956  0586  0800               	movf	0,w
  4957  0587  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  4958  058C                     l3228:	
  4959                           ;uart.c: 415: case DISP_UNSIGN_NUM_DIGIT2:
  4960                           
  4961                           
  4962                           ;uart.c: 416: case DISP_SIGN_NUM_DIGIT2:
  4963                           ;uart.c: 417: num = disp_num % 100;
  4964  058C  3000               	movlw	0
  4965  058D  1283               	bcf	3,5	;RP0=0, select bank0
  4966  058E  1303               	bcf	3,6	;RP1=0, select bank0
  4967  058F  00CB               	movwf	___llmod@divisor+3
  4968  0590  3000               	movlw	0
  4969  0591  00CA               	movwf	___llmod@divisor+2
  4970  0592  3000               	movlw	0
  4971  0593  00C9               	movwf	___llmod@divisor+1
  4972  0594  3064               	movlw	100
  4973  0595  00C8               	movwf	___llmod@divisor
  4974  0596  1683               	bsf	3,5	;RP0=1, select bank1
  4975  0597  1303               	bcf	3,6	;RP1=0, select bank1
  4976  0598  0854               	movf	(UART_Transmit_Num@disp_num+3)^(0+128),w
  4977  0599  1283               	bcf	3,5	;RP0=0, select bank0
  4978  059A  1303               	bcf	3,6	;RP1=0, select bank0
  4979  059B  00CF               	movwf	___llmod@dividend+3
  4980  059C  1683               	bsf	3,5	;RP0=1, select bank1
  4981  059D  1303               	bcf	3,6	;RP1=0, select bank1
  4982  059E  0853               	movf	(UART_Transmit_Num@disp_num+2)^(0+128),w
  4983  059F  1283               	bcf	3,5	;RP0=0, select bank0
  4984  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  4985  05A1  00CE               	movwf	___llmod@dividend+2
  4986  05A2  1683               	bsf	3,5	;RP0=1, select bank1
  4987  05A3  1303               	bcf	3,6	;RP1=0, select bank1
  4988  05A4  0852               	movf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  4989  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  4990  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  4991  05A7  00CD               	movwf	___llmod@dividend+1
  4992  05A8  1683               	bsf	3,5	;RP0=1, select bank1
  4993  05A9  1303               	bcf	3,6	;RP1=0, select bank1
  4994  05AA  0851               	movf	UART_Transmit_Num@disp_num^(0+128),w
  4995  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  4996  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  4997  05AD  00CC               	movwf	___llmod@dividend
  4998  05AE  120A  158A  21E0  120A  118A  	fcall	___llmod
  4999  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  5000  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  5001  05B5  084B               	movf	?___llmod+3,w
  5002  05B6  1683               	bsf	3,5	;RP0=1, select bank1
  5003  05B7  1303               	bcf	3,6	;RP1=0, select bank1
  5004  05B8  00D0               	movwf	(UART_Transmit_Num@num+3)^(0+128)
  5005  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  5006  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  5007  05BB  084A               	movf	?___llmod+2,w
  5008  05BC  1683               	bsf	3,5	;RP0=1, select bank1
  5009  05BD  1303               	bcf	3,6	;RP1=0, select bank1
  5010  05BE  00CF               	movwf	(UART_Transmit_Num@num+2)^(0+128)
  5011  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  5012  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  5013  05C1  0849               	movf	?___llmod+1,w
  5014  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  5015  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  5016  05C4  00CE               	movwf	(UART_Transmit_Num@num+1)^(0+128)
  5017  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  5018  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  5019  05C7  0848               	movf	?___llmod,w
  5020  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  5021  05C9  1303               	bcf	3,6	;RP1=0, select bank1
  5022  05CA  00CD               	movwf	UART_Transmit_Num@num^(0+128)
  5023                           
  5024                           ;uart.c: 418: tens_digit = (unsigned int) (num / 10);
  5025  05CB  3000               	movlw	0
  5026  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  5027  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  5028  05CE  00B0               	movwf	___lldiv@divisor+3
  5029  05CF  3000               	movlw	0
  5030  05D0  00AF               	movwf	___lldiv@divisor+2
  5031  05D1  3000               	movlw	0
  5032  05D2  00AE               	movwf	___lldiv@divisor+1
  5033  05D3  300A               	movlw	10
  5034  05D4  00AD               	movwf	___lldiv@divisor
  5035  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  5036  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  5037  05D7  0850               	movf	(UART_Transmit_Num@num+3)^(0+128),w
  5038  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  5039  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  5040  05DA  00B4               	movwf	___lldiv@dividend+3
  5041  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  5042  05DC  1303               	bcf	3,6	;RP1=0, select bank1
  5043  05DD  084F               	movf	(UART_Transmit_Num@num+2)^(0+128),w
  5044  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  5045  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  5046  05E0  00B3               	movwf	___lldiv@dividend+2
  5047  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  5048  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  5049  05E3  084E               	movf	(UART_Transmit_Num@num+1)^(0+128),w
  5050  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  5051  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  5052  05E6  00B2               	movwf	___lldiv@dividend+1
  5053  05E7  1683               	bsf	3,5	;RP0=1, select bank1
  5054  05E8  1303               	bcf	3,6	;RP1=0, select bank1
  5055  05E9  084D               	movf	UART_Transmit_Num@num^(0+128),w
  5056  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  5057  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  5058  05EC  00B1               	movwf	___lldiv@dividend
  5059  05ED  120A  118A  2760  120A  118A  	fcall	___lldiv
  5060  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  5061  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  5062  05F4  082E               	movf	?___lldiv+1,w
  5063  05F5  1683               	bsf	3,5	;RP0=1, select bank1
  5064  05F6  1303               	bcf	3,6	;RP1=0, select bank1
  5065  05F7  00CA               	movwf	(UART_Transmit_Num@tens_digit+1)^(0+128)
  5066  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  5067  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  5068  05FA  082D               	movf	?___lldiv,w
  5069  05FB  1683               	bsf	3,5	;RP0=1, select bank1
  5070  05FC  1303               	bcf	3,6	;RP1=0, select bank1
  5071  05FD  00C9               	movwf	UART_Transmit_Num@tens_digit^(0+128)
  5072                           
  5073                           ;uart.c: 419: UART_Transmit_Char(num_data[tens_digit]);
  5074  05FE  0849               	movf	UART_Transmit_Num@tens_digit^(0+128),w
  5075  05FF  3EB8               	addlw	(low (UART_Transmit_Num@num_data| 0))& (0+255)
  5076  0600  0084               	movwf	4
  5077  0601  1383               	bcf	3,7	;select IRP bank1
  5078  0602  0800               	movf	0,w
  5079  0603  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  5080  0608                     l3234:	
  5081                           ;uart.c: 420: case DISP_UNSIGN_NUM_DIGIT1:
  5082                           
  5083                           
  5084                           ;uart.c: 421: case DISP_SIGN_NUM_DIGIT1:
  5085                           ;uart.c: 422: unit_digit = (unsigned int) (disp_num % 10);
  5086  0608  3000               	movlw	0
  5087  0609  1283               	bcf	3,5	;RP0=0, select bank0
  5088  060A  1303               	bcf	3,6	;RP1=0, select bank0
  5089  060B  00CB               	movwf	___llmod@divisor+3
  5090  060C  3000               	movlw	0
  5091  060D  00CA               	movwf	___llmod@divisor+2
  5092  060E  3000               	movlw	0
  5093  060F  00C9               	movwf	___llmod@divisor+1
  5094  0610  300A               	movlw	10
  5095  0611  00C8               	movwf	___llmod@divisor
  5096  0612  1683               	bsf	3,5	;RP0=1, select bank1
  5097  0613  1303               	bcf	3,6	;RP1=0, select bank1
  5098  0614  0854               	movf	(UART_Transmit_Num@disp_num+3)^(0+128),w
  5099  0615  1283               	bcf	3,5	;RP0=0, select bank0
  5100  0616  1303               	bcf	3,6	;RP1=0, select bank0
  5101  0617  00CF               	movwf	___llmod@dividend+3
  5102  0618  1683               	bsf	3,5	;RP0=1, select bank1
  5103  0619  1303               	bcf	3,6	;RP1=0, select bank1
  5104  061A  0853               	movf	(UART_Transmit_Num@disp_num+2)^(0+128),w
  5105  061B  1283               	bcf	3,5	;RP0=0, select bank0
  5106  061C  1303               	bcf	3,6	;RP1=0, select bank0
  5107  061D  00CE               	movwf	___llmod@dividend+2
  5108  061E  1683               	bsf	3,5	;RP0=1, select bank1
  5109  061F  1303               	bcf	3,6	;RP1=0, select bank1
  5110  0620  0852               	movf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  5111  0621  1283               	bcf	3,5	;RP0=0, select bank0
  5112  0622  1303               	bcf	3,6	;RP1=0, select bank0
  5113  0623  00CD               	movwf	___llmod@dividend+1
  5114  0624  1683               	bsf	3,5	;RP0=1, select bank1
  5115  0625  1303               	bcf	3,6	;RP1=0, select bank1
  5116  0626  0851               	movf	UART_Transmit_Num@disp_num^(0+128),w
  5117  0627  1283               	bcf	3,5	;RP0=0, select bank0
  5118  0628  1303               	bcf	3,6	;RP1=0, select bank0
  5119  0629  00CC               	movwf	___llmod@dividend
  5120  062A  120A  158A  21E0  120A  118A  	fcall	___llmod
  5121  062F  1283               	bcf	3,5	;RP0=0, select bank0
  5122  0630  1303               	bcf	3,6	;RP1=0, select bank0
  5123  0631  0849               	movf	?___llmod+1,w
  5124  0632  1683               	bsf	3,5	;RP0=1, select bank1
  5125  0633  1303               	bcf	3,6	;RP1=0, select bank1
  5126  0634  00CC               	movwf	(UART_Transmit_Num@unit_digit+1)^(0+128)
  5127  0635  1283               	bcf	3,5	;RP0=0, select bank0
  5128  0636  1303               	bcf	3,6	;RP1=0, select bank0
  5129  0637  0848               	movf	?___llmod,w
  5130  0638  1683               	bsf	3,5	;RP0=1, select bank1
  5131  0639  1303               	bcf	3,6	;RP1=0, select bank1
  5132  063A  00CB               	movwf	UART_Transmit_Num@unit_digit^(0+128)
  5133                           
  5134                           ;uart.c: 423: UART_Transmit_Char(num_data[unit_digit]);
  5135  063B  084B               	movf	UART_Transmit_Num@unit_digit^(0+128),w
  5136  063C  3EB8               	addlw	(low (UART_Transmit_Num@num_data| 0))& (0+255)
  5137  063D  0084               	movwf	4
  5138  063E  1383               	bcf	3,7	;select IRP bank1
  5139  063F  0800               	movf	0,w
  5140  0640  120A  118A  27F4   	fcall	_UART_Transmit_Char
  5141                           
  5142                           ;uart.c: 424: break;
  5143  0643  0008               	return
  5144  0644                     l3238:	
  5145                           ;uart.c: 425: case DISP_HEX_DIGIT4:
  5146                           
  5147                           
  5148                           ;uart.c: 428: thousands_digit = (num / (unsigned long) (16 * 16 * 16));
  5149  0644  1683               	bsf	3,5	;RP0=1, select bank1
  5150  0645  1303               	bcf	3,6	;RP1=0, select bank1
  5151  0646  084D               	movf	UART_Transmit_Num@num^(0+128),w
  5152  0647  00A4               	movwf	??_UART_Transmit_Num^(0+128)
  5153  0648  084E               	movf	(UART_Transmit_Num@num+1)^(0+128),w
  5154  0649  00A5               	movwf	(??_UART_Transmit_Num^(0+128)+1)
  5155  064A  084F               	movf	(UART_Transmit_Num@num+2)^(0+128),w
  5156  064B  00A6               	movwf	(??_UART_Transmit_Num^(0+128)+2)
  5157  064C  0850               	movf	(UART_Transmit_Num@num+3)^(0+128),w
  5158  064D  00A7               	movwf	(??_UART_Transmit_Num^(0+128)+3)
  5159  064E  300C               	movlw	12
  5160  064F                     u3015:	
  5161  064F  1003               	clrc
  5162  0650  0CA7               	rrf	(??_UART_Transmit_Num^(0+128)+3),f
  5163  0651  0CA6               	rrf	(??_UART_Transmit_Num^(0+128)+2),f
  5164  0652  0CA5               	rrf	(??_UART_Transmit_Num^(0+128)+1),f
  5165  0653  0CA4               	rrf	??_UART_Transmit_Num^(0+128),f
  5166  0654  3EFF               	addlw	-1
  5167  0655  1D03               	skipz
  5168  0656  2E4F               	goto	u3015
  5169  0657  0825               	movf	(??_UART_Transmit_Num+1)^(0+128),w
  5170  0658  00C6               	movwf	(UART_Transmit_Num@thousands_digit+1)^(0+128)
  5171  0659  0824               	movf	??_UART_Transmit_Num^(0+128),w
  5172  065A  00C5               	movwf	UART_Transmit_Num@thousands_digit^(0+128)
  5173                           
  5174                           ;uart.c: 429: UART_Transmit_Char(hex_data[thousands_digit]);
  5175  065B  0845               	movf	UART_Transmit_Num@thousands_digit^(0+128),w
  5176  065C  3EA8               	addlw	(low (UART_Transmit_Num@hex_data| 0))& (0+255)
  5177  065D  0084               	movwf	4
  5178  065E  1383               	bcf	3,7	;select IRP bank1
  5179  065F  0800               	movf	0,w
  5180  0660  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  5181  0665                     l3242:	
  5182                           ;uart.c: 430: case DISP_HEX_DIGIT3:
  5183                           
  5184                           
  5185                           ;uart.c: 431: num = disp_num %(unsigned long)(16 * 16 * 16);
  5186  0665  30FF               	movlw	255
  5187  0666  1683               	bsf	3,5	;RP0=1, select bank1
  5188  0667  1303               	bcf	3,6	;RP1=0, select bank1
  5189  0668  0551               	andwf	UART_Transmit_Num@disp_num^(0+128),w
  5190  0669  00CD               	movwf	UART_Transmit_Num@num^(0+128)
  5191  066A  300F               	movlw	15
  5192  066B  0552               	andwf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  5193  066C  00CE               	movwf	(UART_Transmit_Num@num+1)^(0+128)
  5194  066D  3000               	movlw	0
  5195  066E  0553               	andwf	(UART_Transmit_Num@disp_num+2)^(0+128),w
  5196  066F  00CF               	movwf	(UART_Transmit_Num@num+2)^(0+128)
  5197  0670  3000               	movlw	0
  5198  0671  0554               	andwf	(UART_Transmit_Num@disp_num+3)^(0+128),w
  5199  0672  00D0               	movwf	(UART_Transmit_Num@num+3)^(0+128)
  5200                           
  5201                           ;uart.c: 432: hundreds_digit = (unsigned int) (num / (unsigned long) (16 * 16));
  5202  0673  084D               	movf	UART_Transmit_Num@num^(0+128),w
  5203  0674  00A4               	movwf	??_UART_Transmit_Num^(0+128)
  5204  0675  084E               	movf	(UART_Transmit_Num@num+1)^(0+128),w
  5205  0676  00A5               	movwf	(??_UART_Transmit_Num^(0+128)+1)
  5206  0677  084F               	movf	(UART_Transmit_Num@num+2)^(0+128),w
  5207  0678  00A6               	movwf	(??_UART_Transmit_Num^(0+128)+2)
  5208  0679  0850               	movf	(UART_Transmit_Num@num+3)^(0+128),w
  5209  067A  00A7               	movwf	(??_UART_Transmit_Num^(0+128)+3)
  5210  067B  3008               	movlw	8
  5211  067C                     u3025:	
  5212  067C  1003               	clrc
  5213  067D  0CA7               	rrf	(??_UART_Transmit_Num^(0+128)+3),f
  5214  067E  0CA6               	rrf	(??_UART_Transmit_Num^(0+128)+2),f
  5215  067F  0CA5               	rrf	(??_UART_Transmit_Num^(0+128)+1),f
  5216  0680  0CA4               	rrf	??_UART_Transmit_Num^(0+128),f
  5217  0681  3EFF               	addlw	-1
  5218  0682  1D03               	skipz
  5219  0683  2E7C               	goto	u3025
  5220  0684  0825               	movf	(??_UART_Transmit_Num+1)^(0+128),w
  5221  0685  00C8               	movwf	(UART_Transmit_Num@hundreds_digit+1)^(0+128)
  5222  0686  0824               	movf	??_UART_Transmit_Num^(0+128),w
  5223  0687  00C7               	movwf	UART_Transmit_Num@hundreds_digit^(0+128)
  5224                           
  5225                           ;uart.c: 433: UART_Transmit_Char(hex_data[hundreds_digit]);
  5226  0688  0847               	movf	UART_Transmit_Num@hundreds_digit^(0+128),w
  5227  0689  3EA8               	addlw	(low (UART_Transmit_Num@hex_data| 0))& (0+255)
  5228  068A  0084               	movwf	4
  5229  068B  1383               	bcf	3,7	;select IRP bank1
  5230  068C  0800               	movf	0,w
  5231  068D  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  5232  0692                     l399:	
  5233                           ;uart.c: 434: case DISP_HEX_DIGIT2:
  5234                           
  5235                           
  5236                           ;uart.c: 435: num = disp_num %(unsigned long)(16 * 16);
  5237  0692  30FF               	movlw	255
  5238  0693  1683               	bsf	3,5	;RP0=1, select bank1
  5239  0694  1303               	bcf	3,6	;RP1=0, select bank1
  5240  0695  0551               	andwf	UART_Transmit_Num@disp_num^(0+128),w
  5241  0696  00CD               	movwf	UART_Transmit_Num@num^(0+128)
  5242  0697  3000               	movlw	0
  5243  0698  0552               	andwf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  5244  0699  00CE               	movwf	(UART_Transmit_Num@num+1)^(0+128)
  5245  069A  3000               	movlw	0
  5246  069B  0553               	andwf	(UART_Transmit_Num@disp_num+2)^(0+128),w
  5247  069C  00CF               	movwf	(UART_Transmit_Num@num+2)^(0+128)
  5248  069D  3000               	movlw	0
  5249  069E  0554               	andwf	(UART_Transmit_Num@disp_num+3)^(0+128),w
  5250  069F  00D0               	movwf	(UART_Transmit_Num@num+3)^(0+128)
  5251                           
  5252                           ;uart.c: 436: tens_digit = (unsigned int) (num / 16);
  5253  06A0  084D               	movf	UART_Transmit_Num@num^(0+128),w
  5254  06A1  00A4               	movwf	??_UART_Transmit_Num^(0+128)
  5255  06A2  084E               	movf	(UART_Transmit_Num@num+1)^(0+128),w
  5256  06A3  00A5               	movwf	(??_UART_Transmit_Num^(0+128)+1)
  5257  06A4  084F               	movf	(UART_Transmit_Num@num+2)^(0+128),w
  5258  06A5  00A6               	movwf	(??_UART_Transmit_Num^(0+128)+2)
  5259  06A6  0850               	movf	(UART_Transmit_Num@num+3)^(0+128),w
  5260  06A7  00A7               	movwf	(??_UART_Transmit_Num^(0+128)+3)
  5261  06A8  3004               	movlw	4
  5262  06A9                     u3035:	
  5263  06A9  1003               	clrc
  5264  06AA  0CA7               	rrf	(??_UART_Transmit_Num^(0+128)+3),f
  5265  06AB  0CA6               	rrf	(??_UART_Transmit_Num^(0+128)+2),f
  5266  06AC  0CA5               	rrf	(??_UART_Transmit_Num^(0+128)+1),f
  5267  06AD  0CA4               	rrf	??_UART_Transmit_Num^(0+128),f
  5268  06AE  3EFF               	addlw	-1
  5269  06AF  1D03               	skipz
  5270  06B0  2EA9               	goto	u3035
  5271  06B1  0825               	movf	(??_UART_Transmit_Num+1)^(0+128),w
  5272  06B2  00CA               	movwf	(UART_Transmit_Num@tens_digit+1)^(0+128)
  5273  06B3  0824               	movf	??_UART_Transmit_Num^(0+128),w
  5274  06B4  00C9               	movwf	UART_Transmit_Num@tens_digit^(0+128)
  5275                           
  5276                           ;uart.c: 437: UART_Transmit_Char(hex_data[tens_digit]);
  5277  06B5  0849               	movf	UART_Transmit_Num@tens_digit^(0+128),w
  5278  06B6  3EA8               	addlw	(low (UART_Transmit_Num@hex_data| 0))& (0+255)
  5279  06B7  0084               	movwf	4
  5280  06B8  1383               	bcf	3,7	;select IRP bank1
  5281  06B9  0800               	movf	0,w
  5282  06BA  120A  118A  27F4  120A  118A  	fcall	_UART_Transmit_Char
  5283  06BF                     l3252:	
  5284                           ;uart.c: 438: case DISP_HEX_DIGIT1:
  5285                           
  5286                           
  5287                           ;uart.c: 439: unit_digit = (unsigned int) (disp_num % 16);
  5288  06BF  300F               	movlw	15
  5289  06C0  1683               	bsf	3,5	;RP0=1, select bank1
  5290  06C1  1303               	bcf	3,6	;RP1=0, select bank1
  5291  06C2  0551               	andwf	UART_Transmit_Num@disp_num^(0+128),w
  5292  06C3  00CB               	movwf	UART_Transmit_Num@unit_digit^(0+128)
  5293  06C4  3000               	movlw	0
  5294  06C5  0552               	andwf	(UART_Transmit_Num@disp_num+1)^(0+128),w
  5295  06C6  00CC               	movwf	(UART_Transmit_Num@unit_digit+1)^(0+128)
  5296                           
  5297                           ;uart.c: 440: UART_Transmit_Char(hex_data[unit_digit]);
  5298  06C7  084B               	movf	UART_Transmit_Num@unit_digit^(0+128),w
  5299  06C8  3EA8               	addlw	(low (UART_Transmit_Num@hex_data| 0))& (0+255)
  5300  06C9  0084               	movwf	4
  5301  06CA  1383               	bcf	3,7	;select IRP bank1
  5302  06CB  0800               	movf	0,w
  5303  06CC  120A  118A  27F4   	fcall	_UART_Transmit_Char
  5304                           
  5305                           ;uart.c: 443: }
  5306                           
  5307                           ;uart.c: 441: break;
  5308  06CF  0008               	return
  5309  06D0                     l3258:	
  5310  06D0  1683               	bsf	3,5	;RP0=1, select bank1
  5311  06D1  1303               	bcf	3,6	;RP1=0, select bank1
  5312  06D2  0844               	movf	UART_Transmit_Num@uart_datanum_disp_format^(0+128),w
  5313                           
  5314                           ; Switch size 1, requested type "space"
  5315                           ; Number of cases is 14, Range of values is 1 to 36
  5316                           ; switch strategies available:
  5317                           ; Name         Instructions Cycles
  5318                           ; simple_byte           43    22 (average)
  5319                           ; direct_byte          119    11 (fixed)
  5320                           ; jumptable            263     9 (fixed)
  5321                           ;	Chosen strategy is simple_byte
  5322  06D3  3A01               	xorlw	1	; case 1
  5323  06D4  1903               	skipnz
  5324  06D5  2E08               	goto	l3234
  5325  06D6  3A03               	xorlw	3	; case 2
  5326  06D7  1903               	skipnz
  5327  06D8  2D8C               	goto	l3228
  5328  06D9  3A01               	xorlw	1	; case 3
  5329  06DA  1903               	skipnz
  5330  06DB  2D10               	goto	l3222
  5331  06DC  3A07               	xorlw	7	; case 4
  5332  06DD  1903               	skipnz
  5333  06DE  2C94               	goto	l3216
  5334  06DF  3A01               	xorlw	1	; case 5
  5335  06E0  1903               	skipnz
  5336  06E1  2C4F               	goto	l3210
  5337  06E2  3A14               	xorlw	20	; case 17
  5338  06E3  1903               	skipnz
  5339  06E4  2E08               	goto	l3234
  5340  06E5  3A03               	xorlw	3	; case 18
  5341  06E6  1903               	skipnz
  5342  06E7  2D8C               	goto	l3228
  5343  06E8  3A01               	xorlw	1	; case 19
  5344  06E9  1903               	skipnz
  5345  06EA  2D10               	goto	l3222
  5346  06EB  3A07               	xorlw	7	; case 20
  5347  06EC  1903               	skipnz
  5348  06ED  2C94               	goto	l3216
  5349  06EE  3A01               	xorlw	1	; case 21
  5350  06EF  1903               	skipnz
  5351  06F0  2C4F               	goto	l3210
  5352  06F1  3A34               	xorlw	52	; case 33
  5353  06F2  1903               	skipnz
  5354  06F3  2EBF               	goto	l3252
  5355  06F4  3A03               	xorlw	3	; case 34
  5356  06F5  1903               	skipnz
  5357  06F6  2E92               	goto	l399
  5358  06F7  3A01               	xorlw	1	; case 35
  5359  06F8  1903               	skipnz
  5360  06F9  2E65               	goto	l3242
  5361  06FA  3A07               	xorlw	7	; case 36
  5362  06FB  1903               	skipnz
  5363  06FC  2E44               	goto	l3238
  5364  06FD  2EFE               	goto	l401
  5365  06FE                     l401:	
  5366  06FE  0008               	return
  5367  06FF                     __end_of_UART_Transmit_Num:	
  5368                           
  5369                           	psect	text7
  5370  09E0                     __ptext7:	
  5371 ;; *************** function ___llmod *****************
  5372 ;; Defined at:
  5373 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\llmod.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  divisor         4   40[BANK0 ] unsigned long 
  5376 ;;  dividend        4   44[BANK0 ] unsigned long 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  counter         1   49[BANK0 ] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  4   40[BANK0 ] unsigned long 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5388 ;;      Params:         0       8       0       0       0
  5389 ;;      Locals:         0       1       0       0       0
  5390 ;;      Temps:          0       1       0       0       0
  5391 ;;      Totals:         0      10       0       0       0
  5392 ;;Total ram usage:       10 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    2
  5395 ;; This function calls:
  5396 ;;		Nothing
  5397 ;; This function is called by:
  5398 ;;		_Encoded_To_Actual_Analog_Val_Calc
  5399 ;;		_UART_Transmit_Num
  5400 ;;		_Encoded_To_Percent_Calc
  5401 ;;		_LCD_Disp_Num
  5402 ;;		_Timer1_Load_Init_Val_Calc
  5403 ;;		_Timer2_Load_Init_Val_Calc
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           
  5408                           ;psect for function ___llmod
  5409  09E0                     ___llmod:	
  5410                           
  5411                           ;incstack = 0
  5412                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5413  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  5414  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  5415  09E2  084B               	movf	___llmod@divisor+3,w
  5416  09E3  044A               	iorwf	___llmod@divisor+2,w
  5417  09E4  0449               	iorwf	___llmod@divisor+1,w
  5418  09E5  0448               	iorwf	___llmod@divisor,w
  5419  09E6  1903               	skipnz
  5420  09E7  2A25               	goto	l3172
  5421  09E8  01D1               	clrf	___llmod@counter
  5422  09E9  0AD1               	incf	___llmod@counter,f
  5423  09EA                     l3162:	
  5424  09EA  1BCB               	btfsc	___llmod@divisor+3,7
  5425  09EB  29FA               	goto	l3164
  5426  09EC  3001               	movlw	1
  5427  09ED  00D0               	movwf	??___llmod
  5428  09EE                     u2905:	
  5429  09EE  1003               	clrc
  5430  09EF  0DC8               	rlf	___llmod@divisor,f
  5431  09F0  0DC9               	rlf	___llmod@divisor+1,f
  5432  09F1  0DCA               	rlf	___llmod@divisor+2,f
  5433  09F2  0DCB               	rlf	___llmod@divisor+3,f
  5434  09F3  0BD0               	decfsz	??___llmod,f
  5435  09F4  29EE               	goto	u2905
  5436  09F5  3001               	movlw	1
  5437  09F6  00D0               	movwf	??___llmod
  5438  09F7  0850               	movf	??___llmod,w
  5439  09F8  07D1               	addwf	___llmod@counter,f
  5440  09F9  29EA               	goto	l3162
  5441  09FA                     l3164:	
  5442  09FA  084B               	movf	___llmod@divisor+3,w
  5443  09FB  024F               	subwf	___llmod@dividend+3,w
  5444  09FC  1D03               	skipz
  5445  09FD  2A08               	goto	u2925
  5446  09FE  084A               	movf	___llmod@divisor+2,w
  5447  09FF  024E               	subwf	___llmod@dividend+2,w
  5448  0A00  1D03               	skipz
  5449  0A01  2A08               	goto	u2925
  5450  0A02  0849               	movf	___llmod@divisor+1,w
  5451  0A03  024D               	subwf	___llmod@dividend+1,w
  5452  0A04  1D03               	skipz
  5453  0A05  2A08               	goto	u2925
  5454  0A06  0848               	movf	___llmod@divisor,w
  5455  0A07  024C               	subwf	___llmod@dividend,w
  5456  0A08                     u2925:	
  5457  0A08  1C03               	skipc
  5458  0A09  2A18               	goto	l3168
  5459  0A0A  0848               	movf	___llmod@divisor,w
  5460  0A0B  02CC               	subwf	___llmod@dividend,f
  5461  0A0C  0849               	movf	___llmod@divisor+1,w
  5462  0A0D  1C03               	skipc
  5463  0A0E  0F49               	incfsz	___llmod@divisor+1,w
  5464  0A0F  02CD               	subwf	___llmod@dividend+1,f
  5465  0A10  084A               	movf	___llmod@divisor+2,w
  5466  0A11  1C03               	skipc
  5467  0A12  0F4A               	incfsz	___llmod@divisor+2,w
  5468  0A13  02CE               	subwf	___llmod@dividend+2,f
  5469  0A14  084B               	movf	___llmod@divisor+3,w
  5470  0A15  1C03               	skipc
  5471  0A16  0F4B               	incfsz	___llmod@divisor+3,w
  5472  0A17  02CF               	subwf	___llmod@dividend+3,f
  5473  0A18                     l3168:	
  5474  0A18  3001               	movlw	1
  5475  0A19                     u2935:	
  5476  0A19  1003               	clrc
  5477  0A1A  0CCB               	rrf	___llmod@divisor+3,f
  5478  0A1B  0CCA               	rrf	___llmod@divisor+2,f
  5479  0A1C  0CC9               	rrf	___llmod@divisor+1,f
  5480  0A1D  0CC8               	rrf	___llmod@divisor,f
  5481  0A1E  3EFF               	addlw	-1
  5482  0A1F  1D03               	skipz
  5483  0A20  2A19               	goto	u2935
  5484  0A21  3001               	movlw	1
  5485  0A22  02D1               	subwf	___llmod@counter,f
  5486  0A23  1D03               	btfss	3,2
  5487  0A24  29FA               	goto	l3164
  5488  0A25                     l3172:	
  5489  0A25  084F               	movf	___llmod@dividend+3,w
  5490  0A26  00CB               	movwf	?___llmod+3
  5491  0A27  084E               	movf	___llmod@dividend+2,w
  5492  0A28  00CA               	movwf	?___llmod+2
  5493  0A29  084D               	movf	___llmod@dividend+1,w
  5494  0A2A  00C9               	movwf	?___llmod+1
  5495  0A2B  084C               	movf	___llmod@dividend,w
  5496  0A2C  00C8               	movwf	?___llmod
  5497  0A2D  0008               	return
  5498  0A2E                     __end_of___llmod:	
  5499                           
  5500                           	psect	text8
  5501  0760                     __ptext8:	
  5502 ;; *************** function ___lldiv *****************
  5503 ;; Defined at:
  5504 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lldiv.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  divisor         4   13[BANK0 ] unsigned long 
  5507 ;;  dividend        4   17[BANK0 ] unsigned long 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  quotient        4   22[BANK0 ] unsigned long 
  5510 ;;  counter         1   26[BANK0 ] unsigned char 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  4   13[BANK0 ] unsigned long 
  5513 ;; Registers used:
  5514 ;;		wreg, status,2, status,0
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5520 ;;      Params:         0       8       0       0       0
  5521 ;;      Locals:         0       5       0       0       0
  5522 ;;      Temps:          0       1       0       0       0
  5523 ;;      Totals:         0      14       0       0       0
  5524 ;;Total ram usage:       14 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    2
  5527 ;; This function calls:
  5528 ;;		Nothing
  5529 ;; This function is called by:
  5530 ;;		_Encoded_To_Actual_Analog_Val_Calc
  5531 ;;		_main
  5532 ;;		_UART_Transmit_Num
  5533 ;;		_Encoded_To_Percent_Calc
  5534 ;;		_Actual_Analog_Val_To_Encoded_Calc
  5535 ;;		_LCD_Disp_Num
  5536 ;;		_Timer1_Load_Init_Val_Calc
  5537 ;;		_Timer2_Load_Init_Val_Calc
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           
  5542                           ;psect for function ___lldiv
  5543  0760                     ___lldiv:	
  5544                           
  5545                           ;incstack = 0
  5546                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5547  0760  3000               	movlw	0
  5548  0761  1283               	bcf	3,5	;RP0=0, select bank0
  5549  0762  1303               	bcf	3,6	;RP1=0, select bank0
  5550  0763  00B9               	movwf	___lldiv@quotient+3
  5551  0764  3000               	movlw	0
  5552  0765  00B8               	movwf	___lldiv@quotient+2
  5553  0766  3000               	movlw	0
  5554  0767  00B7               	movwf	___lldiv@quotient+1
  5555  0768  3000               	movlw	0
  5556  0769  00B6               	movwf	___lldiv@quotient
  5557  076A  0830               	movf	___lldiv@divisor+3,w
  5558  076B  042F               	iorwf	___lldiv@divisor+2,w
  5559  076C  042E               	iorwf	___lldiv@divisor+1,w
  5560  076D  042D               	iorwf	___lldiv@divisor,w
  5561  076E  1903               	skipnz
  5562  076F  2FB7               	goto	l3152
  5563  0770  01BA               	clrf	___lldiv@counter
  5564  0771  0ABA               	incf	___lldiv@counter,f
  5565  0772                     l3138:	
  5566  0772  1BB0               	btfsc	___lldiv@divisor+3,7
  5567  0773  2F82               	goto	l3140
  5568  0774  3001               	movlw	1
  5569  0775  00B5               	movwf	??___lldiv
  5570  0776                     u2835:	
  5571  0776  1003               	clrc
  5572  0777  0DAD               	rlf	___lldiv@divisor,f
  5573  0778  0DAE               	rlf	___lldiv@divisor+1,f
  5574  0779  0DAF               	rlf	___lldiv@divisor+2,f
  5575  077A  0DB0               	rlf	___lldiv@divisor+3,f
  5576  077B  0BB5               	decfsz	??___lldiv,f
  5577  077C  2F76               	goto	u2835
  5578  077D  3001               	movlw	1
  5579  077E  00B5               	movwf	??___lldiv
  5580  077F  0835               	movf	??___lldiv,w
  5581  0780  07BA               	addwf	___lldiv@counter,f
  5582  0781  2F72               	goto	l3138
  5583  0782                     l3140:	
  5584  0782  3001               	movlw	1
  5585  0783  00B5               	movwf	??___lldiv
  5586  0784                     u2855:	
  5587  0784  1003               	clrc
  5588  0785  0DB6               	rlf	___lldiv@quotient,f
  5589  0786  0DB7               	rlf	___lldiv@quotient+1,f
  5590  0787  0DB8               	rlf	___lldiv@quotient+2,f
  5591  0788  0DB9               	rlf	___lldiv@quotient+3,f
  5592  0789  0BB5               	decfsz	??___lldiv,f
  5593  078A  2F84               	goto	u2855
  5594  078B  0830               	movf	___lldiv@divisor+3,w
  5595  078C  0234               	subwf	___lldiv@dividend+3,w
  5596  078D  1D03               	skipz
  5597  078E  2F99               	goto	u2865
  5598  078F  082F               	movf	___lldiv@divisor+2,w
  5599  0790  0233               	subwf	___lldiv@dividend+2,w
  5600  0791  1D03               	skipz
  5601  0792  2F99               	goto	u2865
  5602  0793  082E               	movf	___lldiv@divisor+1,w
  5603  0794  0232               	subwf	___lldiv@dividend+1,w
  5604  0795  1D03               	skipz
  5605  0796  2F99               	goto	u2865
  5606  0797  082D               	movf	___lldiv@divisor,w
  5607  0798  0231               	subwf	___lldiv@dividend,w
  5608  0799                     u2865:	
  5609  0799  1C03               	skipc
  5610  079A  2FAA               	goto	l3148
  5611  079B  082D               	movf	___lldiv@divisor,w
  5612  079C  02B1               	subwf	___lldiv@dividend,f
  5613  079D  082E               	movf	___lldiv@divisor+1,w
  5614  079E  1C03               	skipc
  5615  079F  0F2E               	incfsz	___lldiv@divisor+1,w
  5616  07A0  02B2               	subwf	___lldiv@dividend+1,f
  5617  07A1  082F               	movf	___lldiv@divisor+2,w
  5618  07A2  1C03               	skipc
  5619  07A3  0F2F               	incfsz	___lldiv@divisor+2,w
  5620  07A4  02B3               	subwf	___lldiv@dividend+2,f
  5621  07A5  0830               	movf	___lldiv@divisor+3,w
  5622  07A6  1C03               	skipc
  5623  07A7  0F30               	incfsz	___lldiv@divisor+3,w
  5624  07A8  02B4               	subwf	___lldiv@dividend+3,f
  5625  07A9  1436               	bsf	___lldiv@quotient,0
  5626  07AA                     l3148:	
  5627  07AA  3001               	movlw	1
  5628  07AB                     u2875:	
  5629  07AB  1003               	clrc
  5630  07AC  0CB0               	rrf	___lldiv@divisor+3,f
  5631  07AD  0CAF               	rrf	___lldiv@divisor+2,f
  5632  07AE  0CAE               	rrf	___lldiv@divisor+1,f
  5633  07AF  0CAD               	rrf	___lldiv@divisor,f
  5634  07B0  3EFF               	addlw	-1
  5635  07B1  1D03               	skipz
  5636  07B2  2FAB               	goto	u2875
  5637  07B3  3001               	movlw	1
  5638  07B4  02BA               	subwf	___lldiv@counter,f
  5639  07B5  1D03               	btfss	3,2
  5640  07B6  2F82               	goto	l3140
  5641  07B7                     l3152:	
  5642  07B7  0839               	movf	___lldiv@quotient+3,w
  5643  07B8  00B0               	movwf	?___lldiv+3
  5644  07B9  0838               	movf	___lldiv@quotient+2,w
  5645  07BA  00AF               	movwf	?___lldiv+2
  5646  07BB  0837               	movf	___lldiv@quotient+1,w
  5647  07BC  00AE               	movwf	?___lldiv+1
  5648  07BD  0836               	movf	___lldiv@quotient,w
  5649  07BE  00AD               	movwf	?___lldiv
  5650  07BF  0008               	return
  5651  07C0                     __end_of___lldiv:	
  5652                           
  5653                           	psect	text9
  5654  07F4                     __ptext9:	
  5655 ;; *************** function _UART_Transmit_Char *****************
  5656 ;; Defined at:
  5657 ;;		line 65 in file "uart.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  transmit_cha    1    wreg     const unsigned char 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  transmit_cha    1   13[BANK0 ] const unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5671 ;;      Params:         0       0       0       0       0
  5672 ;;      Locals:         0       1       0       0       0
  5673 ;;      Temps:          0       0       0       0       0
  5674 ;;      Totals:         0       1       0       0       0
  5675 ;;Total ram usage:        1 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    2
  5678 ;; This function calls:
  5679 ;;		Nothing
  5680 ;; This function is called by:
  5681 ;;		_ADC_Start_Conv
  5682 ;;		_UART_Transmit_Str
  5683 ;;		_UART_Transmit_Num
  5684 ;;		_LCD_Disp_Str
  5685 ;;		_UART_Receive_Char
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _UART_Transmit_Char
  5691  07F4                     _UART_Transmit_Char:	
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _UART_Transmit_Char: [wreg]
  5695                           ;UART_Transmit_Char@transmit_char stored from wreg
  5696  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  5697  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  5698  07F6  00AD               	movwf	UART_Transmit_Char@transmit_char
  5699                           
  5700                           ;uart.c: 67: TXREG = transmit_char;
  5701  07F7  082D               	movf	UART_Transmit_Char@transmit_char,w
  5702  07F8  0099               	movwf	25	;volatile
  5703  07F9                     l353:	
  5704                           ;uart.c: 68: while(TRMT == 0);
  5705                           
  5706  07F9  1683               	bsf	3,5	;RP0=1, select bank1
  5707  07FA  1303               	bcf	3,6	;RP1=0, select bank1
  5708  07FB  1898               	btfsc	24,1	;volatile
  5709  07FC  0008               	return
  5710  07FD  2FF9               	goto	l353
  5711  07FE                     __end_of_UART_Transmit_Char:	
  5712                           
  5713                           	psect	text10
  5714  0903                     __ptext10:	
  5715 ;; *************** function _Is_ADC_Converting *****************
  5716 ;; Defined at:
  5717 ;;		line 229 in file "adc.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;		None
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;		None
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  1    wreg      unsigned char 
  5724 ;; Registers used:
  5725 ;;		wreg
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5731 ;;      Params:         0       0       0       0       0
  5732 ;;      Locals:         0       0       0       0       0
  5733 ;;      Temps:          0       0       0       0       0
  5734 ;;      Totals:         0       0       0       0       0
  5735 ;;Total ram usage:        0 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    2
  5738 ;; This function calls:
  5739 ;;		Nothing
  5740 ;; This function is called by:
  5741 ;;		_ADC_Start_Conv
  5742 ;;		_ADC_Disable
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           
  5747                           ;psect for function _Is_ADC_Converting
  5748  0903                     _Is_ADC_Converting:	
  5749                           
  5750                           ;adc.c: 232: if(ADCON0bits.GO == 0)
  5751                           
  5752                           ;incstack = 0
  5753                           ; Regs used in _Is_ADC_Converting: [wreg]
  5754  0903  1283               	bcf	3,5	;RP0=0, select bank0
  5755  0904  1303               	bcf	3,6	;RP1=0, select bank0
  5756  0905  189F               	btfsc	31,1	;volatile
  5757  0906  2909               	goto	l3182
  5758                           
  5759                           ;adc.c: 233: return ('n');
  5760  0907  306E               	movlw	110
  5761  0908  0008               	return
  5762  0909                     l3182:	
  5763                           
  5764                           ;adc.c: 235: return ('y');
  5765  0909  3079               	movlw	121
  5766  090A  0008               	return
  5767  090B                     __end_of_Is_ADC_Converting:	
  5768                           
  5769                           	psect	text11
  5770  06FF                     __ptext11:	
  5771 ;; *************** function _ADC_Conf_Channel *****************
  5772 ;; Defined at:
  5773 ;;		line 37 in file "adc.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  set_adc_cur_    1    wreg     const enum E1739
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;  set_adc_cur_    1   18[BANK0 ] const enum E1739
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5787 ;;      Params:         0       0       0       0       0
  5788 ;;      Locals:         0       1       0       0       0
  5789 ;;      Temps:          0       1       0       0       0
  5790 ;;      Totals:         0       2       0       0       0
  5791 ;;Total ram usage:        2 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    3
  5794 ;; This function calls:
  5795 ;;		___bmul
  5796 ;; This function is called by:
  5797 ;;		_main
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _ADC_Conf_Channel
  5803  06FF                     _ADC_Conf_Channel:	
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in _ADC_Conf_Channel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5807                           ;ADC_Conf_Channel@set_adc_cur_channel stored from wreg
  5808  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  5809  0700  1303               	bcf	3,6	;RP1=0, select bank0
  5810  0701  00B2               	movwf	ADC_Conf_Channel@set_adc_cur_channel
  5811                           
  5812                           ;adc.c: 39: if(set_adc_cur_channel <= ADC_CH_13)
  5813  0702  300E               	movlw	14
  5814  0703  0232               	subwf	ADC_Conf_Channel@set_adc_cur_channel,w
  5815  0704  1803               	skipnc
  5816  0705  0008               	return
  5817                           
  5818                           ;adc.c: 40: {
  5819                           ;adc.c: 41: adc_cur_channel = set_adc_cur_channel;
  5820  0706  0832               	movf	ADC_Conf_Channel@set_adc_cur_channel,w
  5821  0707  00B1               	movwf	??_ADC_Conf_Channel
  5822  0708  0831               	movf	??_ADC_Conf_Channel,w
  5823  0709  00E1               	movwf	_adc_cur_channel
  5824                           
  5825                           ;adc.c: 42: adc_cur_parameters[adc_cur_channel].adc_cur_service_type = (0x00);
  5826  070A  3005               	movlw	5
  5827  070B  00B1               	movwf	??_ADC_Conf_Channel
  5828  070C  0831               	movf	??_ADC_Conf_Channel,w
  5829  070D  00AD               	movwf	___bmul@multiplicand
  5830  070E  0861               	movf	_adc_cur_channel,w
  5831  070F  120A  158A  2144  120A  118A  	fcall	___bmul
  5832  0714  3E04               	addlw	4
  5833  0715  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  5834  0716  0084               	movwf	4
  5835  0717  30FC               	movlw	-4
  5836  0718  1783               	bsf	3,7	;select IRP bank3
  5837  0719  0580               	andwf	0,f
  5838                           
  5839                           ;adc.c: 43: adc_cur_parameters[adc_cur_channel].adc_clk_src_type = (2u);
  5840  071A  3005               	movlw	5
  5841  071B  1283               	bcf	3,5	;RP0=0, select bank0
  5842  071C  1303               	bcf	3,6	;RP1=0, select bank0
  5843  071D  00B1               	movwf	??_ADC_Conf_Channel
  5844  071E  0831               	movf	??_ADC_Conf_Channel,w
  5845  071F  00AD               	movwf	___bmul@multiplicand
  5846  0720  0861               	movf	_adc_cur_channel,w
  5847  0721  120A  158A  2144  120A  118A  	fcall	___bmul
  5848  0726  3E04               	addlw	4
  5849  0727  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  5850  0728  0084               	movwf	4
  5851  0729  1783               	bsf	3,7	;select IRP bank3
  5852  072A  0800               	movf	0,w
  5853  072B  39F3               	andlw	-13
  5854  072C  3808               	iorlw	8
  5855  072D  0080               	movwf	0
  5856                           
  5857                           ;adc.c: 44: adc_cur_parameters[adc_cur_channel].adc_result_format_justfied_type = (1u);
  5858  072E  3005               	movlw	5
  5859  072F  1283               	bcf	3,5	;RP0=0, select bank0
  5860  0730  1303               	bcf	3,6	;RP1=0, select bank0
  5861  0731  00B1               	movwf	??_ADC_Conf_Channel
  5862  0732  0831               	movf	??_ADC_Conf_Channel,w
  5863  0733  00AD               	movwf	___bmul@multiplicand
  5864  0734  0861               	movf	_adc_cur_channel,w
  5865  0735  120A  158A  2144  120A  118A  	fcall	___bmul
  5866  073A  3E04               	addlw	4
  5867  073B  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  5868  073C  0084               	movwf	4
  5869  073D  1783               	bsf	3,7	;select IRP bank3
  5870  073E  1680               	bsf	0,5
  5871                           
  5872                           ;adc.c: 45: adc_cur_parameters[adc_cur_channel].adc_vref_neg_src_type = (0u);
  5873  073F  3005               	movlw	5
  5874  0740  1283               	bcf	3,5	;RP0=0, select bank0
  5875  0741  1303               	bcf	3,6	;RP1=0, select bank0
  5876  0742  00B1               	movwf	??_ADC_Conf_Channel
  5877  0743  0831               	movf	??_ADC_Conf_Channel,w
  5878  0744  00AD               	movwf	___bmul@multiplicand
  5879  0745  0861               	movf	_adc_cur_channel,w
  5880  0746  120A  158A  2144  120A  118A  	fcall	___bmul
  5881  074B  3E04               	addlw	4
  5882  074C  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  5883  074D  0084               	movwf	4
  5884  074E  1783               	bsf	3,7	;select IRP bank3
  5885  074F  1300               	bcf	0,6
  5886                           
  5887                           ;adc.c: 46: adc_cur_parameters[adc_cur_channel].adc_vref_plus_src_type = (0u);
  5888  0750  3005               	movlw	5
  5889  0751  1283               	bcf	3,5	;RP0=0, select bank0
  5890  0752  1303               	bcf	3,6	;RP1=0, select bank0
  5891  0753  00B1               	movwf	??_ADC_Conf_Channel
  5892  0754  0831               	movf	??_ADC_Conf_Channel,w
  5893  0755  00AD               	movwf	___bmul@multiplicand
  5894  0756  0861               	movf	_adc_cur_channel,w
  5895  0757  120A  158A  2144   	fcall	___bmul
  5896  075A  3E04               	addlw	4
  5897  075B  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  5898  075C  0084               	movwf	4
  5899  075D  1783               	bsf	3,7	;select IRP bank3
  5900  075E  1380               	bcf	0,7
  5901  075F  0008               	return
  5902  0760                     __end_of_ADC_Conf_Channel:	
  5903                           
  5904                           	psect	text12
  5905  0944                     __ptext12:	
  5906 ;; *************** function ___bmul *****************
  5907 ;; Defined at:
  5908 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul8.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  multiplier      1    wreg     unsigned char 
  5911 ;;  multiplicand    1   13[BANK0 ] unsigned char 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  multiplier      1   16[BANK0 ] unsigned char 
  5914 ;;  product         1   15[BANK0 ] unsigned char 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  1    wreg      unsigned char 
  5917 ;; Registers used:
  5918 ;;		wreg, status,2, status,0
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5924 ;;      Params:         0       1       0       0       0
  5925 ;;      Locals:         0       2       0       0       0
  5926 ;;      Temps:          0       1       0       0       0
  5927 ;;      Totals:         0       4       0       0       0
  5928 ;;Total ram usage:        4 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    2
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		_ADC_Conf_Channel
  5935 ;;		_main
  5936 ;;		_Interrupt_ISR
  5937 ;;		_ADC_Disable
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           
  5942                           ;psect for function ___bmul
  5943  0944                     ___bmul:	
  5944                           
  5945                           ;incstack = 0
  5946                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5947                           ;___bmul@multiplier stored from wreg
  5948  0944  1283               	bcf	3,5	;RP0=0, select bank0
  5949  0945  1303               	bcf	3,6	;RP1=0, select bank0
  5950  0946  00B0               	movwf	___bmul@multiplier
  5951  0947  01AF               	clrf	___bmul@product
  5952  0948                     l3276:	
  5953  0948  1C30               	btfss	___bmul@multiplier,0
  5954  0949  294E               	goto	l3280
  5955  094A  082D               	movf	___bmul@multiplicand,w
  5956  094B  00AE               	movwf	??___bmul
  5957  094C  082E               	movf	??___bmul,w
  5958  094D  07AF               	addwf	___bmul@product,f
  5959  094E                     l3280:	
  5960  094E  1003               	clrc
  5961  094F  0DAD               	rlf	___bmul@multiplicand,f
  5962  0950  1003               	clrc
  5963  0951  0CB0               	rrf	___bmul@multiplier,f
  5964  0952  0830               	movf	___bmul@multiplier,w
  5965  0953  1D03               	btfss	3,2
  5966  0954  2948               	goto	l3276
  5967  0955  082F               	movf	___bmul@product,w
  5968  0956  0008               	return
  5969  0957                     __end_of___bmul:	
  5970                           
  5971                           	psect	text13
  5972  0A2E                     __ptext13:	
  5973 ;; *************** function _Interrupt_ISR *****************
  5974 ;; Defined at:
  5975 ;;		line 37 in file "isr.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;		None
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;  adc_value_mo    2    6[COMMON] unsigned int 
  5980 ;;  adc_value_le    2    4[COMMON] unsigned int 
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5990 ;;      Params:         0       0       0       0       0
  5991 ;;      Locals:         4       0       0       0       0
  5992 ;;      Temps:          0      13       0       0       0
  5993 ;;      Totals:         4      13       0       0       0
  5994 ;;Total ram usage:       17 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    1
  5997 ;; This function calls:
  5998 ;;		_ADC_Conv_Over_Appl_Proc
  5999 ;;		_External_Interrupt_Occured_Appl_Proc
  6000 ;;		_Timer1_Req_Time_Expiry_Appl_Proc
  6001 ;;		_Timer1_Stop
  6002 ;;		i1___bmul
  6003 ;; This function is called by:
  6004 ;;		Interrupt level 1
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           
  6009                           ;psect for function _Interrupt_ISR
  6010  0A2E                     _Interrupt_ISR:	
  6011                           
  6012                           ;isr.c: 39: unsigned int adc_value_least_byte, adc_value_most_byte;
  6013                           ;isr.c: 41: if(INTE == 1 && INTF == 1)
  6014  0A2E  1A0B               	btfsc	11,4	;volatile
  6015  0A2F  1C8B               	btfss	11,1	;volatile
  6016  0A30  2A38               	goto	i1l3626
  6017                           
  6018                           ;isr.c: 42: {
  6019                           ;isr.c: 43: INTF = 0;
  6020  0A31  108B               	bcf	11,1	;volatile
  6021                           
  6022                           ;isr.c: 44: INTE = 0;
  6023  0A32  120B               	bcf	11,4	;volatile
  6024                           
  6025                           ;isr.c: 55: External_Interrupt_Occured_Appl_Proc();
  6026  0A33  120A  118A  27FF  120A  158A  	fcall	_External_Interrupt_Occured_Appl_Proc
  6027  0A38                     i1l3626:	
  6028                           
  6029                           ;isr.c: 57: }
  6030                           ;isr.c: 58: if(ADIF == 1)
  6031  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  6032  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  6033  0A3A  1F0C               	btfss	12,6	;volatile
  6034  0A3B  2B17               	goto	i1l3652
  6035                           
  6036                           ;isr.c: 59: {
  6037                           ;isr.c: 60: PIE1bits.ADIE = 0;
  6038  0A3C  1683               	bsf	3,5	;RP0=1, select bank1
  6039  0A3D  1303               	bcf	3,6	;RP1=0, select bank1
  6040  0A3E  130C               	bcf	12,6	;volatile
  6041                           
  6042                           ;isr.c: 62: adc_cur_parameters[adc_cur_channel].adc_cur_service_type = (0x02);
  6043  0A3F  3005               	movlw	5
  6044  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  6045  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  6046  0A42  00A0               	movwf	??_Interrupt_ISR
  6047  0A43  0820               	movf	??_Interrupt_ISR,w
  6048  0A44  00F0               	movwf	i1___bmul@multiplicand
  6049  0A45  0861               	movf	_adc_cur_channel,w
  6050  0A46  120A  158A  2122  120A  158A  	fcall	i1___bmul
  6051  0A4B  3E04               	addlw	4
  6052  0A4C  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  6053  0A4D  0084               	movwf	4
  6054  0A4E  1783               	bsf	3,7	;select IRP bank3
  6055  0A4F  0800               	movf	0,w
  6056  0A50  39FC               	andlw	-4
  6057  0A51  3802               	iorlw	2
  6058  0A52  0080               	movwf	0
  6059                           
  6060                           ;isr.c: 64: if(ADFM == 1)
  6061  0A53  1683               	bsf	3,5	;RP0=1, select bank1
  6062  0A54  1303               	bcf	3,6	;RP1=0, select bank1
  6063  0A55  1F9F               	btfss	31,7	;volatile
  6064  0A56  2A93               	goto	i1l3640
  6065                           
  6066                           ;isr.c: 65: {
  6067                           ;isr.c: 66: adc_value_least_byte = ADRESL;
  6068  0A57  081E               	movf	30,w	;volatile
  6069  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  6070  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  6071  0A5A  00A0               	movwf	??_Interrupt_ISR
  6072  0A5B  01A1               	clrf	??_Interrupt_ISR+1
  6073  0A5C  0820               	movf	??_Interrupt_ISR,w
  6074  0A5D  00F4               	movwf	Interrupt_ISR@adc_value_least_byte
  6075  0A5E  0821               	movf	??_Interrupt_ISR+1,w
  6076  0A5F  00F5               	movwf	Interrupt_ISR@adc_value_least_byte+1
  6077                           
  6078                           ;isr.c: 67: adc_value_most_byte = ADRESH & 0x03u;
  6079  0A60  081E               	movf	30,w	;volatile
  6080  0A61  3903               	andlw	3
  6081  0A62  00A0               	movwf	??_Interrupt_ISR
  6082  0A63  01A1               	clrf	??_Interrupt_ISR+1
  6083  0A64  0820               	movf	??_Interrupt_ISR,w
  6084  0A65  00F6               	movwf	Interrupt_ISR@adc_value_most_byte
  6085  0A66  0821               	movf	??_Interrupt_ISR+1,w
  6086  0A67  00F7               	movwf	Interrupt_ISR@adc_value_most_byte+1
  6087                           
  6088                           ;isr.c: 68: adc_cur_parameters[adc_cur_channel].adc_value_channel = (adc_value_most_byte
      +                           << 8) + adc_value_least_byte;
  6089  0A68  0876               	movf	Interrupt_ISR@adc_value_most_byte,w
  6090  0A69  00A1               	movwf	??_Interrupt_ISR+1
  6091  0A6A  01A0               	clrf	??_Interrupt_ISR
  6092  0A6B  0874               	movf	Interrupt_ISR@adc_value_least_byte,w
  6093  0A6C  0720               	addwf	??_Interrupt_ISR,w
  6094  0A6D  00A2               	movwf	??_Interrupt_ISR+2
  6095  0A6E  0875               	movf	Interrupt_ISR@adc_value_least_byte+1,w
  6096  0A6F  1803               	skipnc
  6097  0A70  0A75               	incf	Interrupt_ISR@adc_value_least_byte+1,w
  6098  0A71  0721               	addwf	??_Interrupt_ISR+1,w
  6099  0A72  00A3               	movwf	??_Interrupt_ISR+3
  6100  0A73  0822               	movf	??_Interrupt_ISR+2,w
  6101  0A74  00A4               	movwf	??_Interrupt_ISR+4
  6102  0A75  0823               	movf	??_Interrupt_ISR+3,w
  6103  0A76  00A5               	movwf	??_Interrupt_ISR+5
  6104  0A77  01A6               	clrf	??_Interrupt_ISR+6
  6105  0A78  01A7               	clrf	??_Interrupt_ISR+7
  6106  0A79  3005               	movlw	5
  6107  0A7A  00A8               	movwf	??_Interrupt_ISR+8
  6108  0A7B  0828               	movf	??_Interrupt_ISR+8,w
  6109  0A7C  00F0               	movwf	i1___bmul@multiplicand
  6110  0A7D  0861               	movf	_adc_cur_channel,w
  6111  0A7E  120A  158A  2122  120A  158A  	fcall	i1___bmul
  6112  0A83  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  6113  0A84  0084               	movwf	4
  6114  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  6115  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  6116  0A87  0824               	movf	??_Interrupt_ISR+4,w
  6117  0A88  1783               	bsf	3,7	;select IRP bank3
  6118  0A89  0080               	movwf	0
  6119  0A8A  0A84               	incf	4,f
  6120  0A8B  0825               	movf	??_Interrupt_ISR+5,w
  6121  0A8C  0080               	movwf	0
  6122  0A8D  0A84               	incf	4,f
  6123  0A8E  0826               	movf	??_Interrupt_ISR+6,w
  6124  0A8F  0080               	movwf	0
  6125  0A90  0A84               	incf	4,f
  6126  0A91  0827               	movf	??_Interrupt_ISR+7,w
  6127  0A92  2B0D               	goto	L3
  6128  0A93                     i1l3640:	
  6129                           ;isr.c: 69: }
  6130                           
  6131                           
  6132                           ;isr.c: 70: else
  6133                           ;isr.c: 71: {
  6134                           ;isr.c: 72: adc_value_least_byte = ADRESL & 0xC0;
  6135  0A93  1683               	bsf	3,5	;RP0=1, select bank1
  6136  0A94  1303               	bcf	3,6	;RP1=0, select bank1
  6137  0A95  081E               	movf	30,w	;volatile
  6138  0A96  39C0               	andlw	192
  6139  0A97  1283               	bcf	3,5	;RP0=0, select bank0
  6140  0A98  1303               	bcf	3,6	;RP1=0, select bank0
  6141  0A99  00A0               	movwf	??_Interrupt_ISR
  6142  0A9A  01A1               	clrf	??_Interrupt_ISR+1
  6143  0A9B  0820               	movf	??_Interrupt_ISR,w
  6144  0A9C  00F4               	movwf	Interrupt_ISR@adc_value_least_byte
  6145  0A9D  0821               	movf	??_Interrupt_ISR+1,w
  6146  0A9E  00F5               	movwf	Interrupt_ISR@adc_value_least_byte+1
  6147                           
  6148                           ;isr.c: 73: adc_value_most_byte = ADRESH ;
  6149  0A9F  081E               	movf	30,w	;volatile
  6150  0AA0  00A0               	movwf	??_Interrupt_ISR
  6151  0AA1  01A1               	clrf	??_Interrupt_ISR+1
  6152  0AA2  0820               	movf	??_Interrupt_ISR,w
  6153  0AA3  00F6               	movwf	Interrupt_ISR@adc_value_most_byte
  6154  0AA4  0821               	movf	??_Interrupt_ISR+1,w
  6155  0AA5  00F7               	movwf	Interrupt_ISR@adc_value_most_byte+1
  6156                           
  6157                           ;isr.c: 74: adc_cur_parameters[adc_cur_channel].adc_value_channel = (adc_value_most_byte
      +                           << 8) + adc_value_least_byte;
  6158  0AA6  0876               	movf	Interrupt_ISR@adc_value_most_byte,w
  6159  0AA7  00A1               	movwf	??_Interrupt_ISR+1
  6160  0AA8  01A0               	clrf	??_Interrupt_ISR
  6161  0AA9  0874               	movf	Interrupt_ISR@adc_value_least_byte,w
  6162  0AAA  0720               	addwf	??_Interrupt_ISR,w
  6163  0AAB  00A2               	movwf	??_Interrupt_ISR+2
  6164  0AAC  0875               	movf	Interrupt_ISR@adc_value_least_byte+1,w
  6165  0AAD  1803               	skipnc
  6166  0AAE  0A75               	incf	Interrupt_ISR@adc_value_least_byte+1,w
  6167  0AAF  0721               	addwf	??_Interrupt_ISR+1,w
  6168  0AB0  00A3               	movwf	??_Interrupt_ISR+3
  6169  0AB1  0822               	movf	??_Interrupt_ISR+2,w
  6170  0AB2  00A4               	movwf	??_Interrupt_ISR+4
  6171  0AB3  0823               	movf	??_Interrupt_ISR+3,w
  6172  0AB4  00A5               	movwf	??_Interrupt_ISR+5
  6173  0AB5  01A6               	clrf	??_Interrupt_ISR+6
  6174  0AB6  01A7               	clrf	??_Interrupt_ISR+7
  6175  0AB7  3005               	movlw	5
  6176  0AB8  00A8               	movwf	??_Interrupt_ISR+8
  6177  0AB9  0828               	movf	??_Interrupt_ISR+8,w
  6178  0ABA  00F0               	movwf	i1___bmul@multiplicand
  6179  0ABB  0861               	movf	_adc_cur_channel,w
  6180  0ABC  120A  158A  2122  120A  158A  	fcall	i1___bmul
  6181  0AC1  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  6182  0AC2  0084               	movwf	4
  6183  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  6184  0AC4  1303               	bcf	3,6	;RP1=0, select bank0
  6185  0AC5  0824               	movf	??_Interrupt_ISR+4,w
  6186  0AC6  1783               	bsf	3,7	;select IRP bank3
  6187  0AC7  0080               	movwf	0
  6188  0AC8  0A84               	incf	4,f
  6189  0AC9  0825               	movf	??_Interrupt_ISR+5,w
  6190  0ACA  0080               	movwf	0
  6191  0ACB  0A84               	incf	4,f
  6192  0ACC  0826               	movf	??_Interrupt_ISR+6,w
  6193  0ACD  0080               	movwf	0
  6194  0ACE  0A84               	incf	4,f
  6195  0ACF  0827               	movf	??_Interrupt_ISR+7,w
  6196  0AD0  0080               	movwf	0
  6197                           
  6198                           ;isr.c: 75: adc_cur_parameters[adc_cur_channel].adc_value_channel = adc_cur_parameters[a
      +                          dc_cur_channel].adc_value_channel >> 6;
  6199  0AD1  3005               	movlw	5
  6200  0AD2  00A0               	movwf	??_Interrupt_ISR
  6201  0AD3  0820               	movf	??_Interrupt_ISR,w
  6202  0AD4  00F0               	movwf	i1___bmul@multiplicand
  6203  0AD5  0861               	movf	_adc_cur_channel,w
  6204  0AD6  120A  158A  2122  120A  158A  	fcall	i1___bmul
  6205  0ADB  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  6206  0ADC  0084               	movwf	4
  6207  0ADD  1783               	bsf	3,7	;select IRP bank3
  6208  0ADE  0800               	movf	0,w
  6209  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
  6210  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
  6211  0AE1  00A1               	movwf	??_Interrupt_ISR+1
  6212  0AE2  0A84               	incf	4,f
  6213  0AE3  0800               	movf	0,w
  6214  0AE4  00A2               	movwf	??_Interrupt_ISR+2
  6215  0AE5  0A84               	incf	4,f
  6216  0AE6  0800               	movf	0,w
  6217  0AE7  00A3               	movwf	??_Interrupt_ISR+3
  6218  0AE8  0A84               	incf	4,f
  6219  0AE9  0800               	movf	0,w
  6220  0AEA  00A4               	movwf	??_Interrupt_ISR+4
  6221  0AEB  3006               	movlw	6
  6222  0AEC                     u355_25:	
  6223  0AEC  1003               	clrc
  6224  0AED  0CA4               	rrf	??_Interrupt_ISR+4,f
  6225  0AEE  0CA3               	rrf	??_Interrupt_ISR+3,f
  6226  0AEF  0CA2               	rrf	??_Interrupt_ISR+2,f
  6227  0AF0  0CA1               	rrf	??_Interrupt_ISR+1,f
  6228  0AF1  3EFF               	addlw	-1
  6229  0AF2  1D03               	skipz
  6230  0AF3  2AEC               	goto	u355_25
  6231  0AF4  3005               	movlw	5
  6232  0AF5  00A5               	movwf	??_Interrupt_ISR+5
  6233  0AF6  0825               	movf	??_Interrupt_ISR+5,w
  6234  0AF7  00F0               	movwf	i1___bmul@multiplicand
  6235  0AF8  0861               	movf	_adc_cur_channel,w
  6236  0AF9  120A  158A  2122  120A  158A  	fcall	i1___bmul
  6237  0AFE  3EBC               	addlw	(low (_adc_cur_parameters| (0+256)))& (0+255)
  6238  0AFF  0084               	movwf	4
  6239  0B00  1283               	bcf	3,5	;RP0=0, select bank0
  6240  0B01  1303               	bcf	3,6	;RP1=0, select bank0
  6241  0B02  0821               	movf	??_Interrupt_ISR+1,w
  6242  0B03  1783               	bsf	3,7	;select IRP bank3
  6243  0B04  0080               	movwf	0
  6244  0B05  0A84               	incf	4,f
  6245  0B06  0822               	movf	??_Interrupt_ISR+2,w
  6246  0B07  0080               	movwf	0
  6247  0B08  0A84               	incf	4,f
  6248  0B09  0823               	movf	??_Interrupt_ISR+3,w
  6249  0B0A  0080               	movwf	0
  6250  0B0B  0A84               	incf	4,f
  6251  0B0C  0824               	movf	??_Interrupt_ISR+4,w
  6252  0B0D                     L3:	
  6253  0B0D  0080               	movwf	0
  6254                           
  6255                           ;isr.c: 76: }
  6256                           ;isr.c: 89: ADC_Conv_Over_Appl_Proc(adc_cur_channel);
  6257  0B0E  0861               	movf	_adc_cur_channel,w
  6258  0B0F  120A  118A  2003  120A  158A  	fcall	_ADC_Conv_Over_Appl_Proc
  6259                           
  6260                           ;isr.c: 90: ADIF = 0;
  6261  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  6262  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  6263  0B16  130C               	bcf	12,6	;volatile
  6264  0B17                     i1l3652:	
  6265                           
  6266                           ;isr.c: 91: }
  6267                           ;isr.c: 92: if(TMR1IF == 1)
  6268  0B17  1C0C               	btfss	12,0	;volatile
  6269  0B18  2BB1               	goto	i1l464
  6270                           
  6271                           ;isr.c: 93: {
  6272                           ;isr.c: 94: TMR1IF = 0;
  6273  0B19  100C               	bcf	12,0	;volatile
  6274                           
  6275                           ;isr.c: 95: TMR1H = timer1_init_val / 256UL;
  6276  0B1A  0858               	movf	_timer1_init_val,w
  6277  0B1B  00A0               	movwf	??_Interrupt_ISR
  6278  0B1C  0859               	movf	_timer1_init_val+1,w
  6279  0B1D  00A1               	movwf	??_Interrupt_ISR+1
  6280  0B1E  085A               	movf	_timer1_init_val+2,w
  6281  0B1F  00A2               	movwf	??_Interrupt_ISR+2
  6282  0B20  085B               	movf	_timer1_init_val+3,w
  6283  0B21  00A3               	movwf	??_Interrupt_ISR+3
  6284  0B22  3008               	movlw	8
  6285  0B23                     u357_25:	
  6286  0B23  1003               	clrc
  6287  0B24  0CA3               	rrf	??_Interrupt_ISR+3,f
  6288  0B25  0CA2               	rrf	??_Interrupt_ISR+2,f
  6289  0B26  0CA1               	rrf	??_Interrupt_ISR+1,f
  6290  0B27  0CA0               	rrf	??_Interrupt_ISR,f
  6291  0B28  3EFF               	addlw	-1
  6292  0B29  1D03               	skipz
  6293  0B2A  2B23               	goto	u357_25
  6294  0B2B  0820               	movf	??_Interrupt_ISR,w
  6295  0B2C  008F               	movwf	15	;volatile
  6296                           
  6297                           ;isr.c: 96: TMR1L = timer1_init_val % 256UL;
  6298  0B2D  0858               	movf	_timer1_init_val,w
  6299  0B2E  008E               	movwf	14	;volatile
  6300                           
  6301                           ;isr.c: 98: if(++timer1_elapsed_num_overflow_1_update >= timer1_1_update)
  6302  0B2F  3001               	movlw	1
  6303  0B30  1683               	bsf	3,5	;RP0=1, select bank1
  6304  0B31  1303               	bcf	3,6	;RP1=0, select bank1
  6305  0B32  07DD               	addwf	_timer1_elapsed_num_overflow_1_update^(0+128),f
  6306  0B33  3000               	movlw	0
  6307  0B34  1803               	skipnc
  6308  0B35  3001               	movlw	1
  6309  0B36  07DE               	addwf	(_timer1_elapsed_num_overflow_1_update+1)^(0+128),f
  6310  0B37  3000               	movlw	0
  6311  0B38  1803               	skipnc
  6312  0B39  3001               	movlw	1
  6313  0B3A  07DF               	addwf	(_timer1_elapsed_num_overflow_1_update+2)^(0+128),f
  6314  0B3B  3000               	movlw	0
  6315  0B3C  1803               	skipnc
  6316  0B3D  3001               	movlw	1
  6317  0B3E  07E0               	addwf	(_timer1_elapsed_num_overflow_1_update+3)^(0+128),f
  6318  0B3F  1683               	bsf	3,5	;RP0=1, select bank3
  6319  0B40  1703               	bsf	3,6	;RP1=1, select bank3
  6320  0B41  0833               	movf	(_timer1_1_update+3)^(0+384),w
  6321  0B42  1683               	bsf	3,5	;RP0=1, select bank1
  6322  0B43  1303               	bcf	3,6	;RP1=0, select bank1
  6323  0B44  0260               	subwf	(_timer1_elapsed_num_overflow_1_update+3)^(0+128),w
  6324  0B45  1D03               	skipz
  6325  0B46  2B5D               	goto	u358_25
  6326  0B47  1683               	bsf	3,5	;RP0=1, select bank3
  6327  0B48  1703               	bsf	3,6	;RP1=1, select bank3
  6328  0B49  0832               	movf	(_timer1_1_update+2)^(0+384),w
  6329  0B4A  1683               	bsf	3,5	;RP0=1, select bank1
  6330  0B4B  1303               	bcf	3,6	;RP1=0, select bank1
  6331  0B4C  025F               	subwf	(_timer1_elapsed_num_overflow_1_update+2)^(0+128),w
  6332  0B4D  1D03               	skipz
  6333  0B4E  2B5D               	goto	u358_25
  6334  0B4F  1683               	bsf	3,5	;RP0=1, select bank3
  6335  0B50  1703               	bsf	3,6	;RP1=1, select bank3
  6336  0B51  0831               	movf	(_timer1_1_update+1)^(0+384),w
  6337  0B52  1683               	bsf	3,5	;RP0=1, select bank1
  6338  0B53  1303               	bcf	3,6	;RP1=0, select bank1
  6339  0B54  025E               	subwf	(_timer1_elapsed_num_overflow_1_update+1)^(0+128),w
  6340  0B55  1D03               	skipz
  6341  0B56  2B5D               	goto	u358_25
  6342  0B57  1683               	bsf	3,5	;RP0=1, select bank3
  6343  0B58  1703               	bsf	3,6	;RP1=1, select bank3
  6344  0B59  0830               	movf	_timer1_1_update^(0+384),w
  6345  0B5A  1683               	bsf	3,5	;RP0=1, select bank1
  6346  0B5B  1303               	bcf	3,6	;RP1=0, select bank1
  6347  0B5C  025D               	subwf	_timer1_elapsed_num_overflow_1_update^(0+128),w
  6348  0B5D                     u358_25:	
  6349  0B5D  1C03               	skipc
  6350  0B5E  2BB1               	goto	i1l464
  6351                           
  6352                           ;isr.c: 99: {
  6353                           ;isr.c: 100: if(++timer1_elapsed_num_update >= timer1_req_time_max_update)
  6354  0B5F  3001               	movlw	1
  6355  0B60  07E7               	addwf	_timer1_elapsed_num_update^(0+128),f
  6356  0B61  1803               	skipnc
  6357  0B62  0AE8               	incf	(_timer1_elapsed_num_update+1)^(0+128),f
  6358  0B63  3000               	movlw	0
  6359  0B64  07E8               	addwf	(_timer1_elapsed_num_update+1)^(0+128),f
  6360  0B65  0867               	movf	_timer1_elapsed_num_update^(0+128),w
  6361  0B66  1283               	bcf	3,5	;RP0=0, select bank0
  6362  0B67  1303               	bcf	3,6	;RP1=0, select bank0
  6363  0B68  00A0               	movwf	??_Interrupt_ISR
  6364  0B69  1683               	bsf	3,5	;RP0=1, select bank1
  6365  0B6A  1303               	bcf	3,6	;RP1=0, select bank1
  6366  0B6B  0868               	movf	(_timer1_elapsed_num_update+1)^(0+128),w
  6367  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  6368  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  6369  0B6E  00A1               	movwf	??_Interrupt_ISR+1
  6370  0B6F  01A2               	clrf	??_Interrupt_ISR+2
  6371  0B70  01A3               	clrf	??_Interrupt_ISR+3
  6372  0B71  1683               	bsf	3,5	;RP0=1, select bank3
  6373  0B72  1703               	bsf	3,6	;RP1=1, select bank3
  6374  0B73  082F               	movf	(_timer1_req_time_max_update+3)^(0+384),w
  6375  0B74  1283               	bcf	3,5	;RP0=0, select bank0
  6376  0B75  1303               	bcf	3,6	;RP1=0, select bank0
  6377  0B76  0223               	subwf	??_Interrupt_ISR+3,w
  6378  0B77  1D03               	skipz
  6379  0B78  2B8F               	goto	u359_25
  6380  0B79  1683               	bsf	3,5	;RP0=1, select bank3
  6381  0B7A  1703               	bsf	3,6	;RP1=1, select bank3
  6382  0B7B  082E               	movf	(_timer1_req_time_max_update+2)^(0+384),w
  6383  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  6384  0B7D  1303               	bcf	3,6	;RP1=0, select bank0
  6385  0B7E  0222               	subwf	??_Interrupt_ISR+2,w
  6386  0B7F  1D03               	skipz
  6387  0B80  2B8F               	goto	u359_25
  6388  0B81  1683               	bsf	3,5	;RP0=1, select bank3
  6389  0B82  1703               	bsf	3,6	;RP1=1, select bank3
  6390  0B83  082D               	movf	(_timer1_req_time_max_update+1)^(0+384),w
  6391  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  6392  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  6393  0B86  0221               	subwf	??_Interrupt_ISR+1,w
  6394  0B87  1D03               	skipz
  6395  0B88  2B8F               	goto	u359_25
  6396  0B89  1683               	bsf	3,5	;RP0=1, select bank3
  6397  0B8A  1703               	bsf	3,6	;RP1=1, select bank3
  6398  0B8B  082C               	movf	_timer1_req_time_max_update^(0+384),w
  6399  0B8C  1283               	bcf	3,5	;RP0=0, select bank0
  6400  0B8D  1303               	bcf	3,6	;RP1=0, select bank0
  6401  0B8E  0220               	subwf	??_Interrupt_ISR,w
  6402  0B8F                     u359_25:	
  6403  0B8F  1C03               	skipc
  6404  0B90  2BA7               	goto	i1l3672
  6405                           
  6406                           ;isr.c: 101: {
  6407                           ;isr.c: 102: Timer1_Stop();
  6408  0B91  120A  158A  2113  120A  158A  	fcall	_Timer1_Stop
  6409                           
  6410                           ;isr.c: 107: timer1_elapsed_num_update = 0;
  6411  0B96  1683               	bsf	3,5	;RP0=1, select bank1
  6412  0B97  1303               	bcf	3,6	;RP1=0, select bank1
  6413  0B98  01E7               	clrf	_timer1_elapsed_num_update^(0+128)
  6414  0B99  01E8               	clrf	(_timer1_elapsed_num_update+1)^(0+128)
  6415                           
  6416                           ;isr.c: 108: timer1_elapsed_num_overflow_1_update = 0;
  6417  0B9A  3000               	movlw	0
  6418  0B9B  00E0               	movwf	(_timer1_elapsed_num_overflow_1_update+3)^(0+128)
  6419  0B9C  3000               	movlw	0
  6420  0B9D  00DF               	movwf	(_timer1_elapsed_num_overflow_1_update+2)^(0+128)
  6421  0B9E  3000               	movlw	0
  6422  0B9F  00DE               	movwf	(_timer1_elapsed_num_overflow_1_update+1)^(0+128)
  6423  0BA0  3000               	movlw	0
  6424  0BA1  00DD               	movwf	_timer1_elapsed_num_overflow_1_update^(0+128)
  6425                           
  6426                           ;isr.c: 109: Timer1_Req_Time_Expiry_Appl_Proc();
  6427  0BA2  120A  118A  27FE  120A  158A  	fcall	_Timer1_Req_Time_Expiry_Appl_Proc
  6428  0BA7                     i1l3672:	
  6429                           
  6430                           ;isr.c: 110: }
  6431                           ;isr.c: 111: timer1_elapsed_num_overflow_1_update = 0;
  6432  0BA7  3000               	movlw	0
  6433  0BA8  1683               	bsf	3,5	;RP0=1, select bank1
  6434  0BA9  1303               	bcf	3,6	;RP1=0, select bank1
  6435  0BAA  00E0               	movwf	(_timer1_elapsed_num_overflow_1_update+3)^(0+128)
  6436  0BAB  3000               	movlw	0
  6437  0BAC  00DF               	movwf	(_timer1_elapsed_num_overflow_1_update+2)^(0+128)
  6438  0BAD  3000               	movlw	0
  6439  0BAE  00DE               	movwf	(_timer1_elapsed_num_overflow_1_update+1)^(0+128)
  6440  0BAF  3000               	movlw	0
  6441  0BB0  00DD               	movwf	_timer1_elapsed_num_overflow_1_update^(0+128)
  6442  0BB1                     i1l464:	
  6443  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  6444  0BB2  082C               	movf	??_Interrupt_ISR+12,w
  6445  0BB3  00FF               	movwf	127
  6446  0BB4  082B               	movf	??_Interrupt_ISR+11,w
  6447  0BB5  008A               	movwf	10
  6448  0BB6  082A               	movf	??_Interrupt_ISR+10,w
  6449  0BB7  0084               	movwf	4
  6450  0BB8  0E29               	swapf	(??_Interrupt_ISR+9)^0,w
  6451  0BB9  0083               	movwf	3
  6452  0BBA  0EFE               	swapf	126,f
  6453  0BBB  0E7E               	swapf	126,w
  6454  0BBC  0009               	retfie
  6455  0BBD                     __end_of_Interrupt_ISR:	
  6456                           
  6457                           	psect	intentry
  6458  0004                     __pintentry:	
  6459                           ;incstack = 0
  6460                           ; Regs used in _Interrupt_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6461                           
  6462  0004                     interrupt_function:	
  6463  007E                     saved_w	set	btemp
  6464  0004  00FE               	movwf	btemp
  6465  0005  0E03               	swapf	3,w
  6466  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6467  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6468  0008  00A9               	movwf	??_Interrupt_ISR+9
  6469  0009  0804               	movf	4,w
  6470  000A  00AA               	movwf	??_Interrupt_ISR+10
  6471  000B  080A               	movf	10,w
  6472  000C  00AB               	movwf	??_Interrupt_ISR+11
  6473  000D  087F               	movf	btemp+1,w
  6474  000E  00AC               	movwf	??_Interrupt_ISR+12
  6475  000F  120A  158A  2A2E   	ljmp	_Interrupt_ISR
  6476                           
  6477                           	psect	text14
  6478  0922                     __ptext14:	
  6479 ;; *************** function i1___bmul *****************
  6480 ;; Defined at:
  6481 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul8.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  multiplier      1    wreg     unsigned char 
  6484 ;;  multiplicand    1    0[COMMON] unsigned char 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  multiplier      1    2[COMMON] unsigned char 
  6487 ;;  __bmul          1    3[COMMON] unsigned char 
  6488 ;; Return value:  Size  Location     Type
  6489 ;;                  1    wreg      unsigned char 
  6490 ;; Registers used:
  6491 ;;		wreg, status,2, status,0
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6497 ;;      Params:         1       0       0       0       0
  6498 ;;      Locals:         2       0       0       0       0
  6499 ;;      Temps:          1       0       0       0       0
  6500 ;;      Totals:         4       0       0       0       0
  6501 ;;Total ram usage:        4 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		_Interrupt_ISR
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           
  6511                           ;psect for function i1___bmul
  6512  0922                     i1___bmul:	
  6513                           
  6514                           ;incstack = 0
  6515                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  6516                           ;i1___bmul@multiplier stored from wreg
  6517  0922  00F2               	movwf	i1___bmul@multiplier
  6518  0923  01F3               	clrf	i1___bmul@product
  6519  0924                     i1l2572:	
  6520  0924  1C72               	btfss	i1___bmul@multiplier,0
  6521  0925  292A               	goto	i1l2576
  6522  0926  0870               	movf	i1___bmul@multiplicand,w
  6523  0927  00F1               	movwf	??i1___bmul
  6524  0928  0871               	movf	??i1___bmul,w
  6525  0929  07F3               	addwf	i1___bmul@product,f
  6526  092A                     i1l2576:	
  6527  092A  1003               	clrc
  6528  092B  0DF0               	rlf	i1___bmul@multiplicand,f
  6529  092C  1003               	clrc
  6530  092D  0CF2               	rrf	i1___bmul@multiplier,f
  6531  092E  0872               	movf	i1___bmul@multiplier,w
  6532  092F  1D03               	btfss	3,2
  6533  0930  2924               	goto	i1l2572
  6534  0931  0873               	movf	i1___bmul@product,w
  6535  0932  0008               	return
  6536  0933                     __end_ofi1___bmul:	
  6537                           
  6538                           	psect	text15
  6539  0913                     __ptext15:	
  6540 ;; *************** function _Timer1_Stop *****************
  6541 ;; Defined at:
  6542 ;;		line 169 in file "timer.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;		None
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      void 
  6549 ;; Registers used:
  6550 ;;		wreg, status,2
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6556 ;;      Params:         0       0       0       0       0
  6557 ;;      Locals:         0       0       0       0       0
  6558 ;;      Temps:          1       0       0       0       0
  6559 ;;      Totals:         1       0       0       0       0
  6560 ;;Total ram usage:        1 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; This function calls:
  6563 ;;		Nothing
  6564 ;; This function is called by:
  6565 ;;		_Interrupt_ISR
  6566 ;;		_Timer1_Run
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _Timer1_Stop
  6572  0913                     _Timer1_Stop:	
  6573                           
  6574                           ;timer.c: 172: {
  6575                           ;timer.c: 173: T1CONbits.TMR1ON = 0 ;
  6576                           
  6577                           ;incstack = 0
  6578                           ; Regs used in _Timer1_Stop: [wreg+status,2]
  6579  0913  1283               	bcf	3,5	;RP0=0, select bank0
  6580  0914  1303               	bcf	3,6	;RP1=0, select bank0
  6581  0915  1010               	bcf	16,0	;volatile
  6582                           
  6583                           ;timer.c: 174: PIE1bits.TMR1IE = 0;
  6584  0916  1683               	bsf	3,5	;RP0=1, select bank1
  6585  0917  1303               	bcf	3,6	;RP1=0, select bank1
  6586  0918  100C               	bcf	12,0	;volatile
  6587                           
  6588                           ;timer.c: 175: TMR1IF = 0;
  6589  0919  1283               	bcf	3,5	;RP0=0, select bank0
  6590  091A  1303               	bcf	3,6	;RP1=0, select bank0
  6591  091B  100C               	bcf	12,0	;volatile
  6592                           
  6593                           ;timer.c: 176: timer1_cur_run_state = TMR1_STOP_STATE;
  6594  091C  01E0               	clrf	_timer1_cur_run_state
  6595                           
  6596                           ;timer.c: 177: timer1_cur_service_type = TMR1_INVALID_SERVICE;
  6597  091D  3004               	movlw	4
  6598  091E  00F0               	movwf	??_Timer1_Stop
  6599  091F  0870               	movf	??_Timer1_Stop,w
  6600  0920  00DE               	movwf	_timer1_cur_service_type
  6601  0921  0008               	return
  6602  0922                     __end_of_Timer1_Stop:	
  6603                           
  6604                           	psect	text16
  6605  07FE                     __ptext16:	
  6606 ;; *************** function _Timer1_Req_Time_Expiry_Appl_Proc *****************
  6607 ;; Defined at:
  6608 ;;		line 56 in file "intp_event_handle.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;		None
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;		None
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  1    wreg      void 
  6615 ;; Registers used:
  6616 ;;		None
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6622 ;;      Params:         0       0       0       0       0
  6623 ;;      Locals:         0       0       0       0       0
  6624 ;;      Temps:          0       0       0       0       0
  6625 ;;      Totals:         0       0       0       0       0
  6626 ;;Total ram usage:        0 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_Interrupt_ISR
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           
  6636                           ;psect for function _Timer1_Req_Time_Expiry_Appl_Proc
  6637  07FE                     _Timer1_Req_Time_Expiry_Appl_Proc:	
  6638                           
  6639                           ;incstack = 0
  6640                           ; Regs used in _Timer1_Req_Time_Expiry_Appl_Proc: []
  6641  07FE  0008               	return
  6642  07FF                     __end_of_Timer1_Req_Time_Expiry_Appl_Proc:	
  6643                           
  6644                           	psect	text17
  6645  07FF                     __ptext17:	
  6646 ;; *************** function _External_Interrupt_Occured_Appl_Proc *****************
  6647 ;; Defined at:
  6648 ;;		line 38 in file "intp_event_handle.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		None
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6662 ;;      Params:         0       0       0       0       0
  6663 ;;      Locals:         0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0
  6665 ;;      Totals:         0       0       0       0       0
  6666 ;;Total ram usage:        0 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_Interrupt_ISR
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function _External_Interrupt_Occured_Appl_Proc
  6677  07FF                     _External_Interrupt_Occured_Appl_Proc:	
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _External_Interrupt_Occured_Appl_Proc: []
  6681  07FF  0008               	return
  6682  0800                     __end_of_External_Interrupt_Occured_Appl_Proc:	
  6683                           
  6684                           	psect	text18
  6685  0003                     __ptext18:	
  6686 ;; *************** function _ADC_Conv_Over_Appl_Proc *****************
  6687 ;; Defined at:
  6688 ;;		line 74 in file "intp_event_handle.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;  adc_cur_chan    1    wreg     enum E1834
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  adc_cur_chan    1    0[COMMON] enum E1834
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      void 
  6695 ;; Registers used:
  6696 ;;		wreg
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6702 ;;      Params:         0       0       0       0       0
  6703 ;;      Locals:         0       0       0       0       0
  6704 ;;      Temps:          0       0       0       0       0
  6705 ;;      Totals:         0       0       0       0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; This function calls:
  6709 ;;		Nothing
  6710 ;; This function is called by:
  6711 ;;		_Interrupt_ISR
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           
  6716                           ;psect for function _ADC_Conv_Over_Appl_Proc
  6717  0003                     _ADC_Conv_Over_Appl_Proc:	
  6718                           
  6719                           ;incstack = 0
  6720                           ; Regs used in _ADC_Conv_Over_Appl_Proc: [wreg]
  6721  0003  0008               	return
  6722  0004                     __end_of_ADC_Conv_Over_Appl_Proc:	
  6723  007E                     btemp	set	126	;btemp
  6724  007E                     wtemp0	set	126


Data Sizes:
    Strings     400
    Constant    10
    Data        61
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     50      66
    BANK1            80     57      79
    BANK3            96     41      95
    BANK2            96     10      70

Pointer List with Targets:

    UART_Transmit_Str@transmit_str	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_11(CODE[54]), STR_10(CODE[46]), STR_9(CODE[52]), STR_8(CODE[13]), 
		 -> STR_7(CODE[13]), STR_6(CODE[29]), STR_5(CODE[33]), STR_4(CODE[33]), 
		 -> STR_3(CODE[47]), STR_2(CODE[45]), STR_1(CODE[35]), 

    Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac	const PTR unsigned long  size(1) Largest target is 4
		 -> main@r_at_ch_peak_current_frac(BANK3[4]), 

    Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int	const PTR unsigned long  size(1) Largest target is 4
		 -> main@r_at_ch_peak_current_int(BANK3[4]), 

    ADC_Start_Conv@set_adc_parameters	PTR struct . size(1) Largest target is 10
		 -> adc_cur_parameters(BANK3[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupt_ISR in COMMON

    _Interrupt_ISR->i1___bmul

Critical Paths under _main in BANK0

    _Encoded_To_Actual_Analog_Val_Calc->___llmod
    ___lmul->___lldiv
    _UART_Transmit_Str->_UART_Transmit_Char
    _UART_Transmit_Num->___llmod
    ___llmod->___lmul
    _ADC_Conf_Channel->___bmul

Critical Paths under _Interrupt_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _ADC_Start_Conv->_UART_Transmit_Num

Critical Paths under _Interrupt_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_ADC_Start_Conv

Critical Paths under _Interrupt_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                43    43      0   27180
                                             53 BANK1      4     4      0
                                             12 BANK3     29    29      0
                                              0 BANK2     10    10      0
                   _ADC_Conf_Channel
                     _ADC_Start_Conv
  _Encoded_To_Actual_Analog_Val_Calc
                          _UART_Init
                  _UART_Transmit_Str
                             ___bmul
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Encoded_To_Actual_Analog_Val_Calc                   50    36     14    9359
                                              0 BANK1     38    24     14
                            ___lldiv
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8    2446
                                             27 BANK0     13     5      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Start_Conv                                      12    12      0    8979
                                              0 BANK3     12    12      0
                  _Is_ADC_Converting
                 _UART_Transmit_Char
                  _UART_Transmit_Num
                  _UART_Transmit_Str
 ---------------------------------------------------------------------------------
 (1) _UART_Transmit_Str                                    2     0      2     943
                                             14 BANK0      2     0      2
                 _UART_Transmit_Char
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit_Num                                   53    49      4    7455
                                              0 BANK1     53    49      4
                 _UART_Transmit_Char
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8    2234
                                             40 BANK0     10     2      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8    3783
                                             13 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit_Char                                   1     1      0      31
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Is_ADC_Converting                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Conf_Channel                                     2     2      0     483
                                             17 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     421
                                             13 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupt_ISR                                       17    17      0     299
                                              4 COMMON     4     4      0
                                              0 BANK0     13    13      0
            _ADC_Conv_Over_Appl_Proc
_External_Interrupt_Occured_Appl_Pro
   _Timer1_Req_Time_Expiry_Appl_Proc
                        _Timer1_Stop
                           i1___bmul
 ---------------------------------------------------------------------------------
 (5) i1___bmul                                             4     3      1     163
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _Timer1_Stop                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Timer1_Req_Time_Expiry_Appl_Proc                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _External_Interrupt_Occured_Appl_Proc                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_Conv_Over_Appl_Proc                              1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Conf_Channel
     ___bmul
   _ADC_Start_Conv
     _Is_ADC_Converting
     _UART_Transmit_Char
     _UART_Transmit_Num
       _UART_Transmit_Char
       ___lldiv
       ___llmod
         ___lmul (ARG)
           ___lldiv (ARG)
     _UART_Transmit_Str
       _UART_Transmit_Char
   _Encoded_To_Actual_Analog_Val_Calc
     ___lldiv
     ___llmod
       ___lmul (ARG)
         ___lldiv (ARG)
     ___lmul
       ___lldiv (ARG)
   _UART_Init
   _UART_Transmit_Str
     _UART_Transmit_Char
   ___bmul
   ___lldiv
   ___lmul
     ___lldiv (ARG)

 _Interrupt_ISR (ROOT)
   _ADC_Conv_Over_Appl_Proc
   _External_Interrupt_Occured_Appl_Proc
   _Timer1_Req_Time_Expiry_Appl_Proc
   _Timer1_Stop
   i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     29      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      A      46      11       72.9%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     39      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     32      42       5       82.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     144      12        0.0%
ABS                  0      0     144       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Mar 16 16:29:25 2018

                                                          pc 0002  
                                             ___bmul@product 002F  
                                                __CFG_CP$OFF 0000  
                                                         l50 0C2C  
                                                         l52 0C32  
                                                         l55 0C4F  
                                                         l65 0D54  
                                                         _GO 00F9  
                                  ??_ADC_Conv_Over_Appl_Proc 0070  
                                                         fsr 0004  
                                           ??_ADC_Start_Conv 01C6  
                                                        l401 06FE  
                                                        l353 07F9  
                                                        l292 00FD  
                                                        l384 0446  
                                                        l297 03CD  
                                                        l399 0692  
                                                        _RB1 0031  
                                                        _RB2 0032  
                                                        _RB3 0033  
                                                        _RE0 0048  
                                                        _RE1 0049  
                                                        _RE2 004A  
                                               __CFG_CPD$OFF 0000  
                                                        _RX9 00C6  
                                                        _TX9 04C6  
                                                        fsr0 0004  
                                                        indf 0000  
                                               __CFG_IESO$ON 0000  
                                               __CFG_LVP$OFF 0000  
                                                       l3210 044F  
                                                       l3140 0782  
                                                       l3204 0436  
                                                       l3222 0510  
                                                       l3152 07B7  
                                                       l3216 0494  
                                                       l3208 043E  
                                                       l3304 0BCB  
                                                       l3138 0772  
                                                       l3162 09EA  
                                                       l3242 0665  
                                                       l3234 0608  
                                                       l3330 0C8F  
                                                       l3148 07AA  
                                                       l3164 09FA  
                                                       l3172 0A25  
                                                       l3252 06BF  
                                                       l3228 058C  
                                                       l3316 0C36  
                                                       l3182 0909  
                                                       l3238 0644  
                                                       l3342 0CD8  
                                                       l3318 0C44  
                                                       l3262 09A9  
                                                       l3280 094E  
                                                       l3168 0A18  
                                                       l3192 097A  
                                                       l3344 0CE5  
                                                       l3352 0D1E  
                                                       l3520 0099  
                                                       l3258 06D0  
                                                       l3354 0D43  
                                                       l3266 09BF  
                                                       l3276 0948  
                                                       l3356 0D4D  
                                                       l3540 011B  
                                                       l3376 0FEC  
                                                       l3552 0253  
                                                       l3528 00BB  
                                                       l3570 039B  
                                                       l3572 03AD  
                                                       _ADIF 0066  
                                                       _ADFM 04FF  
                                                       STR_1 1110  
                                                       STR_2 10E3  
                                                       STR_3 1086  
                                                       STR_4 1133  
                                                       STR_5 1154  
                                                       STR_6 1175  
                                                       STR_7 119F  
                                                       STR_8 1192  
                                                       STR_9 1052  
                                                       _BRGH 04C2  
                                                       _CREN 00C4  
                                                       _FERR 00C2  
                                                       u3015 064F  
                                                       u3025 067C  
                                                       u3035 06A9  
                                                       u3215 0C6E  
                                                       u3225 0CA6  
                                                       u3145 0BDA  
                                                       u3065 09C1  
                                                       u3235 0CC9  
                                                       u3155 0BE9  
                                                       u3075 09C9  
                                                       u3403 0119  
                                                       u3420 024F  
                                                       u3245 0D28  
                                                       u3165 0BFE  
                                                       u3270 0FC8  
                                                       u3255 0D36  
                                                       u3175 0C0D  
                                                       u3271 0FCB  
                                                       u3263 0D64  
                                                       u3272 0FD2  
                                                       u3185 0C1B  
                                                       u3273 0FD5  
                                                       u3433 037A  
                                                       u3425 0238  
                                                       u3426 023B  
                                                       u3427 0242  
                                                       u3428 0245  
                                                       u3453 03AB  
                                                       u3429 024C  
                                                       u3383 00B9  
                                                       u2905 09EE  
                                                       u2835 0776  
                                                       u3395 00F3  
                                                       u2925 0A08  
                                                       _INTE 005C  
                                                       _INTF 0059  
                                                       u2855 0784  
                                                       u2935 0A19  
                                                       u2865 0799  
                                                       u2970 03F6  
                                                       u2875 07AB  
                                                       _RCIE 0465  
                                                       u2980 040C  
                                                       _RCIF 0065  
                                                       u3777 0C48  
                                                       _OERR 00C1  
                                                       _TMR1 000E  
                                                       _TMR2 0011  
                                                       _SPEN 00C7  
                                                       _SREN 00C5  
                                                       _TRMT 04C1  
                                                       _TXIE 0464  
                                                       _TXEN 04C5  
                                                       _SYNC 04C4  
                                               __CFG_WRT$OFF 0000  
                                              __CFG_FCMEN$ON 0000  
                                                       _main 0074  
                                                       btemp 007E  
                                                       start 0012  
                          _timer1_last_run_state_before_stop 005F  
                                          ___bmul@multiplier 0030  
                                              __CFG_MCLRE$ON 0000  
                                 __end_of_UART_Transmit_Char 07FE  
                                    _timer1_max_num_overflow 01A8  
                                                      ?_main 0070  
                                                      STR_10 10B5  
                                                      STR_11 101C  
                                                      _BRG16 0C3B  
                                              __CFG_WDTE$OFF 0000  
                                                      _ANSEL 0188  
                                            __end_of___lldiv 07C0  
                                      _timer1_prescale_shift 00E5  
                                                      _T1CON 0010  
                                            __end_of___llmod 0A2E  
                                                      _T2CON 0012  
                                                      i1l464 0BB1  
                                                      _RCREG 001A  
                                   _analog_val_in_digital_ch 01B4  
                                                      _TMR1H 000F  
                                                      _TMR1L 000E  
                                                      _SPBRG 0099  
                                                      _PORTD 0008  
                                                      _TRISD 0088  
                                                      _TXREG 0019  
                                            _timer1_init_val 0058  
                                        ___lmul@multiplicand 003F  
                                              __CFG_PWRTE$ON 0000  
                                         __size_of_UART_Init 0023  
                                            _timer2_init_val 019C  
                                               main@temp_int 0144  
                                                      main@i 01DF  
                                            _timer1_prescale 0078  
                                           __end_ofi1___bmul 0933  
                                             __CFG_BOREN$OFF 0000  
                                                      pclath 000A  
                                            _timer2_prescale 00EB  
                                                      status 0003  
                                                      wtemp0 007E  
                                            __initialization 0015  
                                           _cur_disp_lcd_loc 007A  
                                               __end_of_main 03EB  
                                                     ??_main 00D5  
                                         _adc_cur_parameters 01BC  
                                     main@fault_occured_flag 01D2  
                          ADC_Start_Conv@adc_value_most_byte 01CF  
                               main@r_at_ch_peak_current_int 01E7  
 Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_int 00AC  
                  UART_Transmit_Num@uart_datanum_disp_format 00C4  
                                                     _ADCON0 001F  
                                                     _ADCON1 009F  
                                           ___llmod@dividend 004C  
                                                     _ADRESH 001E  
                                                     _ADRESL 009E  
                                                     _ANSELH 0189  
                                   __end_of_ADC_Conf_Channel 0760  
                                                     i1l2572 0924  
                                                     i1l2576 092A  
                                                     i1l3640 0A93  
                                                     i1l3626 0A38  
                                                     i1l3652 0B17  
                                                     i1l3672 0BA7  
                                                     u355_25 0AEC  
                                                     u357_25 0B23  
                                                     u358_25 0B5D  
                                                     u359_25 0B8F  
                                                     _TMR1IF 0060  
                                                     _TMR2IF 0061  
                         _timer2_req_time_delay_in_milli_sec 0190  
                            UART_Transmit_Num@hundreds_digit 00C7  
                           Interrupt_ISR@adc_value_most_byte 0076  
                                              ??_Timer1_Stop 0070  
                                       _timer2_cur_run_state 005D  
                                          __end_of_UART_Init 097A  
                                                     ___bmul 0944  
                                                     ___lmul 099F  
                                                  ??___lldiv 0035  
                                                  ??___llmod 0050  
                                  ADC_Start_Conv@rcvd_status 01CC  
                                     __size_of_Interrupt_ISR 018F  
                                              main@temp_frac 0148  
                                               __pdataCOMMON 0078  
                 main@calc_r_source_rms_current_in_milli_amp 01DB  
                                                     saved_w 007E  
                         ADC_Start_Conv@adc_value_least_byte 01CD  
                                    _timer2_max_num_overflow 0152  
                       UART_Transmit_Num@tens_thousand_digit 00C2  
                       _timer2_elapsed_num_overflow_1_update 0198  
                                    __end_of__initialization 0070  
            Encoded_To_Actual_Analog_Val_Calc@min_analog_val 00A8  
                                        ___bmul@multiplicand 002D  
                                    _timer1_cur_service_type 005E  
                                             __pcstackCOMMON 0070  
                                               __pidataBANK1 08FA  
                                               __pidataBANK2 07C0  
                                        __end_of_Timer1_Stop 0922  
                                                  ?i1___bmul 0070  
                     main@r_at_ch_peak_current_encoded_value 01E3  
                                UART_Transmit_Num@tens_digit 00C9  
                                           i1___bmul@product 0073  
                                              _Interrupt_ISR 0A2E  
                                                 __pbssBANK0 0052  
                                                 __pbssBANK1 00D9  
                                                 __pbssBANK2 014E  
                                                 __pbssBANK3 0190  
                                 _timer2_req_time_max_update 014E  
                              main@r_at_ch_peak_current_frac 01EB  
     Encoded_To_Actual_Analog_Val_Calc@full_scale_analog_val 00A4  
Encoded_To_Actual_Analog_Val_Calc@analog_val_in_digital_frac 00AD  
                                                 __pmaintext 0074  
                                                    ?___bmul 002D  
                                                    ?___lmul 003B  
                                UART_Transmit_Num@unit_digit 00CB  
                                                 __pintentry 0004  
                                             ___lmul@product 0044  
                                                 ??i1___bmul 0071  
                                                    _T1CKPS0 0084  
                                                    _T1CKPS1 0085  
                                                    _T2CKPS0 0090  
                                                    _T2CKPS1 0091  
                                         _UART_Transmit_Char 07F4  
             Encoded_To_Actual_Analog_Val_Calc@remainder_val 00C2  
                                             ?_Interrupt_ISR 0070  
                                        ?_UART_Transmit_Char 0070  
                                                 __stringtab 1000  
                   __end_of_Timer1_Req_Time_Expiry_Appl_Proc 07FF  
                  __size_of_Timer1_Req_Time_Expiry_Appl_Proc 0001  
                         ??_Timer1_Req_Time_Expiry_Appl_Proc 0070  
                          ?_Timer1_Req_Time_Expiry_Appl_Proc 0070  
                           _Timer1_Req_Time_Expiry_Appl_Proc 07FE  
                 Encoded_To_Actual_Analog_Val_Calc@adc_value 00A0  
                       _timer1_elapsed_num_overflow_1_update 00DD  
                                                _Timer1_Stop 0913  
                                   ?_ADC_Conv_Over_Appl_Proc 0070  
                                            __size_of___bmul 0013  
                                            __size_of___lmul 0041  
                                                    ___lldiv 0760  
                                       ??_UART_Transmit_Char 002D  
                                                    ___llmod 09E0  
                                                    __ptext1 0957  
                                                    __ptext2 0D55  
                                                    __ptext3 099F  
                                                    __ptext4 0BBD  
                                                    __ptext5 097A  
                                                    __ptext6 03EB  
                                                    __ptext7 09E0  
                                                    __ptext8 0760  
                                                    __ptext9 07F4  
                                                  _T1CONbits 0010  
                                                  _T2CONbits 0012  
                                        i1___bmul@multiplier 0072  
                                    _timer2_cur_service_type 007D  
                                                    _to_disp 01B8  
                                                    clrloop0 090C  
                                       end_of_initialization 0070  
                                           _lcd_read_command 00E9  
                                    __size_of_ADC_Start_Conv 0198  
                                          ?_ADC_Conf_Channel 0070  
                                         ??_ADC_Conf_Channel 0031  
                                            ___lldiv@divisor 002D  
                                            ___lldiv@counter 003A  
                              UART_Transmit_Str@transmit_str 002E  
           Encoded_To_Actual_Analog_Val_Calc@remainder_val_1 00BA  
                                       UART_Transmit_Num@num 00CD  
                                               __pstringtext 1000  
                                                  _UART_Init 0957  
                        UART_Transmit_Num@uart_disp_data_int 00A0  
                                          LCD_Disp_Num@F1881 0120  
                                          LCD_Disp_Num@F1879 013A  
                                                  _TRISBbits 0086  
                                                  _TRISDbits 0088  
                                                  _TRISEbits 0089  
                                            ??_Interrupt_ISR 0020  
                            __end_of_ADC_Conv_Over_Appl_Proc 0004  
                           UART_Transmit_Num@thousands_digit 00C5  
                                             __end_of___bmul 0957  
                                             __end_of___lmul 09E0  
                                                 ?_UART_Init 0070  
                                              __pidataCOMMON 08FE  
            __end_ofUART_Receive_Char@overrun_error_msg_disp 1017  
                    UART_Receive_Char@overrun_error_msg_disp 1012  
                                          __size_ofi1___bmul 0011  
                                        start_initialization 0015  
                                  _timer2_elapsed_num_update 00E1  
                                            ___llmod@divisor 0048  
                                            ___llmod@counter 0051  
                                   __CFG_FOSC$INTRC_NOCLKOUT 0000  
                                                   ??___bmul 002E  
                                                   ??___lmul 0043  
                                                 init_fetch0 0933  
                                                __pdataBANK1 00EB  
                                                __pdataBANK2 0110  
                                                __pbssCOMMON 007D  
                                      _timer2_prescale_shift 00E3  
                                                  ___latbits 0002  
                                              __pcstackBANK0 0020  
                                              __pcstackBANK1 00A0  
                                              __pcstackBANK2 0144  
                                              __pcstackBANK3 01C6  
                                             _ADC_Start_Conv 0BBD  
                                  _measure_pulse_lower_count 00D9  
                                  UART_Transmit_Num@disp_num 00D1  
                                  UART_Transmit_Num@hex_data 00A8  
                                               ?_Timer1_Stop 0070  
                                                   ?___lldiv 002D  
                  __end_of_Encoded_To_Actual_Analog_Val_Calc 1000  
                 __size_of_Encoded_To_Actual_Analog_Val_Calc 02AB  
                        ??_Encoded_To_Actual_Analog_Val_Calc 00AE  
                         ?_Encoded_To_Actual_Analog_Val_Calc 00A0  
                          _Encoded_To_Actual_Analog_Val_Calc 0D55  
                                                   ?___llmod 0048  
                                  UART_Transmit_Num@num_data 00B8  
                                                ??_UART_Init 002D  
                                          _UART_Transmit_Num 03EB  
                                          _UART_Transmit_Str 097A  
                                         ?_UART_Transmit_Num 00A0  
                                         ?_UART_Transmit_Str 002E  
                           __size_of_ADC_Conv_Over_Appl_Proc 0001  
                                     __end_of_ADC_Start_Conv 0D55  
                                        ??_UART_Transmit_Num 00A4  
                                        ??_UART_Transmit_Str 0030  
        Encoded_To_Actual_Analog_Val_Calc@temp_remainder_val 00B6  
                                          interrupt_function 0004  
                         _timer1_req_time_delay_in_milli_sec 01A4  
                                                  clear_ram0 090B  
                                                   _PIE1bits 008C  
                                      i1___bmul@multiplicand 0070  
                                          _Is_ADC_Converting 0903  
                                  __end_of_UART_Transmit_Num 06FF  
                                  __end_of_UART_Transmit_Str 099F  
                                  __size_of_ADC_Conf_Channel 0061  
                                __size_of_UART_Transmit_Char 000A  
                                         main@cur_disp_block 014C  
                                         ?_Is_ADC_Converting 0070  
                                                   i1___bmul 0922  
                                                 _ADCON0bits 001F  
                                                __stringbase 1012  
                                            _adc_cur_channel 0061  
                                        ??_Is_ADC_Converting 002D  
                                            ?_ADC_Start_Conv 0070  
                                          ___lmul@multiplier 003B  
                                  _measure_pulse_upper_count 01A0  
                     ADC_Conv_Over_Appl_Proc@adc_cur_channel 0070  
                          _timer2_last_run_state_before_stop 005C  
                                  __end_of_Is_ADC_Converting 090B  
                                           __size_of___lldiv 0060  
                                           __size_of___llmod 004E  
                                         __end_of__stringtab 1012  
                                                   __ptext10 0903  
                                                   __ptext11 06FF  
                                                   __ptext12 0944  
                                                   __ptext13 0A2E  
                                                   __ptext14 0922  
                                                   __ptext15 0913  
                                                   __ptext16 07FE  
                                                   __ptext17 07FF  
                                                   __ptext18 0003  
                                          __CFG_BOR4V$BOR40V 0000  
                                      __end_of_Interrupt_ISR 0BBD  
                                          _cur_input_lcd_loc 00ED  
                                                   _lcd_unit 0052  
                           ADC_Start_Conv@set_adc_parameters 01D1  
               __end_of_External_Interrupt_Occured_Appl_Proc 0800  
              __size_of_External_Interrupt_Occured_Appl_Proc 0001  
                     ??_External_Interrupt_Occured_Appl_Proc 0070  
                      ?_External_Interrupt_Occured_Appl_Proc 0070  
                       _External_Interrupt_Occured_Appl_Proc 07FF  
                                              __size_of_main 0377  
                                     UART_Transmit_Num@F1843 0130  
                                     UART_Transmit_Num@F1845 0110  
                                 _lcd_avail_loc_within_limit 007C  
                                 __size_of_UART_Transmit_Num 0314  
                                 __size_of_UART_Transmit_Str 0025  
                                       __size_of_Timer1_Stop 000F  
                                                   main@temp 01D3  
                                    _ADC_Conv_Over_Appl_Proc 0003  
                                                 _INTCONbits 000B  
                          Interrupt_ISR@adc_value_least_byte 0074  
                                                   init_ram0 0937  
                                  _timer1_elapsed_num_update 00E7  
                                                   intlevel1 0000  
                                           ___lldiv@dividend 0031  
                        ADC_Conf_Channel@set_adc_cur_channel 0032  
                                       _timer1_cur_run_state 0060  
                    main@r_at_ch_instant_current_encoded_val 01D7  
                                                  stringcode 100A  
                                 __size_of_Is_ADC_Converting 0008  
          Encoded_To_Actual_Analog_Val_Calc@remainder_val_10 00BE  
                                           _ADC_Conf_Channel 06FF  
                            UART_Transmit_Char@transmit_char 002D  
                                           ___lldiv@quotient 0036  
                                                   stringtab 1000  
                                            _timer1_1_update 01B0  
                                            _timer2_1_update 0194  
                Encoded_To_Actual_Analog_Val_Calc@temp_val_1 00B2  
                                 _timer1_req_time_max_update 01AC  
            __end_ofUART_Receive_Char@framing_error_msg_disp 101C  
                    UART_Receive_Char@framing_error_msg_disp 1017  
